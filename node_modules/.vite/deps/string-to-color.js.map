{
  "version": 3,
  "sources": ["../../colornames/colors.js", "../../colornames/index.js", "../../lodash.words/index.js", "../../lodash.trimstart/index.js", "../../lodash.padend/index.js", "../../rgb-hex/index.js", "../../hex-rgb/index.js", "../../string-to-color/index.js"],
  "sourcesContent": ["module.exports = [\n  {\n    \"value\":\"#B0171F\",\n    \"name\":\"indian red\"\n  },\n  {\n    \"value\":\"#DC143C\",\n    \"css\":true,\n    \"name\":\"crimson\"\n  },\n  {\n    \"value\":\"#FFB6C1\",\n    \"css\":true,\n    \"name\":\"lightpink\"\n  },\n  {\n    \"value\":\"#FFAEB9\",\n    \"name\":\"lightpink 1\"\n  },\n  {\n    \"value\":\"#EEA2AD\",\n    \"name\":\"lightpink 2\"\n  },\n  {\n    \"value\":\"#CD8C95\",\n    \"name\":\"lightpink 3\"\n  },\n  {\n    \"value\":\"#8B5F65\",\n    \"name\":\"lightpink 4\"\n  },\n  {\n    \"value\":\"#FFC0CB\",\n    \"css\":true,\n    \"name\":\"pink\"\n  },\n  {\n    \"value\":\"#FFB5C5\",\n    \"name\":\"pink 1\"\n  },\n  {\n    \"value\":\"#EEA9B8\",\n    \"name\":\"pink 2\"\n  },\n  {\n    \"value\":\"#CD919E\",\n    \"name\":\"pink 3\"\n  },\n  {\n    \"value\":\"#8B636C\",\n    \"name\":\"pink 4\"\n  },\n  {\n    \"value\":\"#DB7093\",\n    \"css\":true,\n    \"name\":\"palevioletred\"\n  },\n  {\n    \"value\":\"#FF82AB\",\n    \"name\":\"palevioletred 1\"\n  },\n  {\n    \"value\":\"#EE799F\",\n    \"name\":\"palevioletred 2\"\n  },\n  {\n    \"value\":\"#CD6889\",\n    \"name\":\"palevioletred 3\"\n  },\n  {\n    \"value\":\"#8B475D\",\n    \"name\":\"palevioletred 4\"\n  },\n  {\n    \"value\":\"#FFF0F5\",\n    \"name\":\"lavenderblush 1\"\n  },\n  {\n    \"value\":\"#FFF0F5\",\n    \"css\":true,\n    \"name\":\"lavenderblush\"\n  },\n  {\n    \"value\":\"#EEE0E5\",\n    \"name\":\"lavenderblush 2\"\n  },\n  {\n    \"value\":\"#CDC1C5\",\n    \"name\":\"lavenderblush 3\"\n  },\n  {\n    \"value\":\"#8B8386\",\n    \"name\":\"lavenderblush 4\"\n  },\n  {\n    \"value\":\"#FF3E96\",\n    \"name\":\"violetred 1\"\n  },\n  {\n    \"value\":\"#EE3A8C\",\n    \"name\":\"violetred 2\"\n  },\n  {\n    \"value\":\"#CD3278\",\n    \"name\":\"violetred 3\"\n  },\n  {\n    \"value\":\"#8B2252\",\n    \"name\":\"violetred 4\"\n  },\n  {\n    \"value\":\"#FF69B4\",\n    \"css\":true,\n    \"name\":\"hotpink\"\n  },\n  {\n    \"value\":\"#FF6EB4\",\n    \"name\":\"hotpink 1\"\n  },\n  {\n    \"value\":\"#EE6AA7\",\n    \"name\":\"hotpink 2\"\n  },\n  {\n    \"value\":\"#CD6090\",\n    \"name\":\"hotpink 3\"\n  },\n  {\n    \"value\":\"#8B3A62\",\n    \"name\":\"hotpink 4\"\n  },\n  {\n    \"value\":\"#872657\",\n    \"name\":\"raspberry\"\n  },\n  {\n    \"value\":\"#FF1493\",\n    \"name\":\"deeppink 1\"\n  },\n  {\n    \"value\":\"#FF1493\",\n    \"css\":true,\n    \"name\":\"deeppink\"\n  },\n  {\n    \"value\":\"#EE1289\",\n    \"name\":\"deeppink 2\"\n  },\n  {\n    \"value\":\"#CD1076\",\n    \"name\":\"deeppink 3\"\n  },\n  {\n    \"value\":\"#8B0A50\",\n    \"name\":\"deeppink 4\"\n  },\n  {\n    \"value\":\"#FF34B3\",\n    \"name\":\"maroon 1\"\n  },\n  {\n    \"value\":\"#EE30A7\",\n    \"name\":\"maroon 2\"\n  },\n  {\n    \"value\":\"#CD2990\",\n    \"name\":\"maroon 3\"\n  },\n  {\n    \"value\":\"#8B1C62\",\n    \"name\":\"maroon 4\"\n  },\n  {\n    \"value\":\"#C71585\",\n    \"css\":true,\n    \"name\":\"mediumvioletred\"\n  },\n  {\n    \"value\":\"#D02090\",\n    \"name\":\"violetred\"\n  },\n  {\n    \"value\":\"#DA70D6\",\n    \"css\":true,\n    \"name\":\"orchid\"\n  },\n  {\n    \"value\":\"#FF83FA\",\n    \"name\":\"orchid 1\"\n  },\n  {\n    \"value\":\"#EE7AE9\",\n    \"name\":\"orchid 2\"\n  },\n  {\n    \"value\":\"#CD69C9\",\n    \"name\":\"orchid 3\"\n  },\n  {\n    \"value\":\"#8B4789\",\n    \"name\":\"orchid 4\"\n  },\n  {\n    \"value\":\"#D8BFD8\",\n    \"css\":true,\n    \"name\":\"thistle\"\n  },\n  {\n    \"value\":\"#FFE1FF\",\n    \"name\":\"thistle 1\"\n  },\n  {\n    \"value\":\"#EED2EE\",\n    \"name\":\"thistle 2\"\n  },\n  {\n    \"value\":\"#CDB5CD\",\n    \"name\":\"thistle 3\"\n  },\n  {\n    \"value\":\"#8B7B8B\",\n    \"name\":\"thistle 4\"\n  },\n  {\n    \"value\":\"#FFBBFF\",\n    \"name\":\"plum 1\"\n  },\n  {\n    \"value\":\"#EEAEEE\",\n    \"name\":\"plum 2\"\n  },\n  {\n    \"value\":\"#CD96CD\",\n    \"name\":\"plum 3\"\n  },\n  {\n    \"value\":\"#8B668B\",\n    \"name\":\"plum 4\"\n  },\n  {\n    \"value\":\"#DDA0DD\",\n    \"css\":true,\n    \"name\":\"plum\"\n  },\n  {\n    \"value\":\"#EE82EE\",\n    \"css\":true,\n    \"name\":\"violet\"\n  },\n  {\n    \"value\":\"#FF00FF\",\n    \"vga\":true,\n    \"name\":\"magenta\"\n  },\n  {\n    \"value\":\"#FF00FF\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"fuchsia\"\n  },\n  {\n    \"value\":\"#EE00EE\",\n    \"name\":\"magenta 2\"\n  },\n  {\n    \"value\":\"#CD00CD\",\n    \"name\":\"magenta 3\"\n  },\n  {\n    \"value\":\"#8B008B\",\n    \"name\":\"magenta 4\"\n  },\n  {\n    \"value\":\"#8B008B\",\n    \"css\":true,\n    \"name\":\"darkmagenta\"\n  },\n  {\n    \"value\":\"#800080\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"purple\"\n  },\n  {\n    \"value\":\"#BA55D3\",\n    \"css\":true,\n    \"name\":\"mediumorchid\"\n  },\n  {\n    \"value\":\"#E066FF\",\n    \"name\":\"mediumorchid 1\"\n  },\n  {\n    \"value\":\"#D15FEE\",\n    \"name\":\"mediumorchid 2\"\n  },\n  {\n    \"value\":\"#B452CD\",\n    \"name\":\"mediumorchid 3\"\n  },\n  {\n    \"value\":\"#7A378B\",\n    \"name\":\"mediumorchid 4\"\n  },\n  {\n    \"value\":\"#9400D3\",\n    \"css\":true,\n    \"name\":\"darkviolet\"\n  },\n  {\n    \"value\":\"#9932CC\",\n    \"css\":true,\n    \"name\":\"darkorchid\"\n  },\n  {\n    \"value\":\"#BF3EFF\",\n    \"name\":\"darkorchid 1\"\n  },\n  {\n    \"value\":\"#B23AEE\",\n    \"name\":\"darkorchid 2\"\n  },\n  {\n    \"value\":\"#9A32CD\",\n    \"name\":\"darkorchid 3\"\n  },\n  {\n    \"value\":\"#68228B\",\n    \"name\":\"darkorchid 4\"\n  },\n  {\n    \"value\":\"#4B0082\",\n    \"css\":true,\n    \"name\":\"indigo\"\n  },\n  {\n    \"value\":\"#8A2BE2\",\n    \"css\":true,\n    \"name\":\"blueviolet\"\n  },\n  {\n    \"value\":\"#9B30FF\",\n    \"name\":\"purple 1\"\n  },\n  {\n    \"value\":\"#912CEE\",\n    \"name\":\"purple 2\"\n  },\n  {\n    \"value\":\"#7D26CD\",\n    \"name\":\"purple 3\"\n  },\n  {\n    \"value\":\"#551A8B\",\n    \"name\":\"purple 4\"\n  },\n  {\n    \"value\":\"#9370DB\",\n    \"css\":true,\n    \"name\":\"mediumpurple\"\n  },\n  {\n    \"value\":\"#AB82FF\",\n    \"name\":\"mediumpurple 1\"\n  },\n  {\n    \"value\":\"#9F79EE\",\n    \"name\":\"mediumpurple 2\"\n  },\n  {\n    \"value\":\"#8968CD\",\n    \"name\":\"mediumpurple 3\"\n  },\n  {\n    \"value\":\"#5D478B\",\n    \"name\":\"mediumpurple 4\"\n  },\n  {\n    \"value\":\"#483D8B\",\n    \"css\":true,\n    \"name\":\"darkslateblue\"\n  },\n  {\n    \"value\":\"#8470FF\",\n    \"name\":\"lightslateblue\"\n  },\n  {\n    \"value\":\"#7B68EE\",\n    \"css\":true,\n    \"name\":\"mediumslateblue\"\n  },\n  {\n    \"value\":\"#6A5ACD\",\n    \"css\":true,\n    \"name\":\"slateblue\"\n  },\n  {\n    \"value\":\"#836FFF\",\n    \"name\":\"slateblue 1\"\n  },\n  {\n    \"value\":\"#7A67EE\",\n    \"name\":\"slateblue 2\"\n  },\n  {\n    \"value\":\"#6959CD\",\n    \"name\":\"slateblue 3\"\n  },\n  {\n    \"value\":\"#473C8B\",\n    \"name\":\"slateblue 4\"\n  },\n  {\n    \"value\":\"#F8F8FF\",\n    \"css\":true,\n    \"name\":\"ghostwhite\"\n  },\n  {\n    \"value\":\"#E6E6FA\",\n    \"css\":true,\n    \"name\":\"lavender\"\n  },\n  {\n    \"value\":\"#0000FF\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"blue\"\n  },\n  {\n    \"value\":\"#0000EE\",\n    \"name\":\"blue 2\"\n  },\n  {\n    \"value\":\"#0000CD\",\n    \"name\":\"blue 3\"\n  },\n  {\n    \"value\":\"#0000CD\",\n    \"css\":true,\n    \"name\":\"mediumblue\"\n  },\n  {\n    \"value\":\"#00008B\",\n    \"name\":\"blue 4\"\n  },\n  {\n    \"value\":\"#00008B\",\n    \"css\":true,\n    \"name\":\"darkblue\"\n  },\n  {\n    \"value\":\"#000080\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"navy\"\n  },\n  {\n    \"value\":\"#191970\",\n    \"css\":true,\n    \"name\":\"midnightblue\"\n  },\n  {\n    \"value\":\"#3D59AB\",\n    \"name\":\"cobalt\"\n  },\n  {\n    \"value\":\"#4169E1\",\n    \"css\":true,\n    \"name\":\"royalblue\"\n  },\n  {\n    \"value\":\"#4876FF\",\n    \"name\":\"royalblue 1\"\n  },\n  {\n    \"value\":\"#436EEE\",\n    \"name\":\"royalblue 2\"\n  },\n  {\n    \"value\":\"#3A5FCD\",\n    \"name\":\"royalblue 3\"\n  },\n  {\n    \"value\":\"#27408B\",\n    \"name\":\"royalblue 4\"\n  },\n  {\n    \"value\":\"#6495ED\",\n    \"css\":true,\n    \"name\":\"cornflowerblue\"\n  },\n  {\n    \"value\":\"#B0C4DE\",\n    \"css\":true,\n    \"name\":\"lightsteelblue\"\n  },\n  {\n    \"value\":\"#CAE1FF\",\n    \"name\":\"lightsteelblue 1\"\n  },\n  {\n    \"value\":\"#BCD2EE\",\n    \"name\":\"lightsteelblue 2\"\n  },\n  {\n    \"value\":\"#A2B5CD\",\n    \"name\":\"lightsteelblue 3\"\n  },\n  {\n    \"value\":\"#6E7B8B\",\n    \"name\":\"lightsteelblue 4\"\n  },\n  {\n    \"value\":\"#778899\",\n    \"css\":true,\n    \"name\":\"lightslategray\"\n  },\n  {\n    \"value\":\"#708090\",\n    \"css\":true,\n    \"name\":\"slategray\"\n  },\n  {\n    \"value\":\"#C6E2FF\",\n    \"name\":\"slategray 1\"\n  },\n  {\n    \"value\":\"#B9D3EE\",\n    \"name\":\"slategray 2\"\n  },\n  {\n    \"value\":\"#9FB6CD\",\n    \"name\":\"slategray 3\"\n  },\n  {\n    \"value\":\"#6C7B8B\",\n    \"name\":\"slategray 4\"\n  },\n  {\n    \"value\":\"#1E90FF\",\n    \"name\":\"dodgerblue 1\"\n  },\n  {\n    \"value\":\"#1E90FF\",\n    \"css\":true,\n    \"name\":\"dodgerblue\"\n  },\n  {\n    \"value\":\"#1C86EE\",\n    \"name\":\"dodgerblue 2\"\n  },\n  {\n    \"value\":\"#1874CD\",\n    \"name\":\"dodgerblue 3\"\n  },\n  {\n    \"value\":\"#104E8B\",\n    \"name\":\"dodgerblue 4\"\n  },\n  {\n    \"value\":\"#F0F8FF\",\n    \"css\":true,\n    \"name\":\"aliceblue\"\n  },\n  {\n    \"value\":\"#4682B4\",\n    \"css\":true,\n    \"name\":\"steelblue\"\n  },\n  {\n    \"value\":\"#63B8FF\",\n    \"name\":\"steelblue 1\"\n  },\n  {\n    \"value\":\"#5CACEE\",\n    \"name\":\"steelblue 2\"\n  },\n  {\n    \"value\":\"#4F94CD\",\n    \"name\":\"steelblue 3\"\n  },\n  {\n    \"value\":\"#36648B\",\n    \"name\":\"steelblue 4\"\n  },\n  {\n    \"value\":\"#87CEFA\",\n    \"css\":true,\n    \"name\":\"lightskyblue\"\n  },\n  {\n    \"value\":\"#B0E2FF\",\n    \"name\":\"lightskyblue 1\"\n  },\n  {\n    \"value\":\"#A4D3EE\",\n    \"name\":\"lightskyblue 2\"\n  },\n  {\n    \"value\":\"#8DB6CD\",\n    \"name\":\"lightskyblue 3\"\n  },\n  {\n    \"value\":\"#607B8B\",\n    \"name\":\"lightskyblue 4\"\n  },\n  {\n    \"value\":\"#87CEFF\",\n    \"name\":\"skyblue 1\"\n  },\n  {\n    \"value\":\"#7EC0EE\",\n    \"name\":\"skyblue 2\"\n  },\n  {\n    \"value\":\"#6CA6CD\",\n    \"name\":\"skyblue 3\"\n  },\n  {\n    \"value\":\"#4A708B\",\n    \"name\":\"skyblue 4\"\n  },\n  {\n    \"value\":\"#87CEEB\",\n    \"css\":true,\n    \"name\":\"skyblue\"\n  },\n  {\n    \"value\":\"#00BFFF\",\n    \"name\":\"deepskyblue 1\"\n  },\n  {\n    \"value\":\"#00BFFF\",\n    \"css\":true,\n    \"name\":\"deepskyblue\"\n  },\n  {\n    \"value\":\"#00B2EE\",\n    \"name\":\"deepskyblue 2\"\n  },\n  {\n    \"value\":\"#009ACD\",\n    \"name\":\"deepskyblue 3\"\n  },\n  {\n    \"value\":\"#00688B\",\n    \"name\":\"deepskyblue 4\"\n  },\n  {\n    \"value\":\"#33A1C9\",\n    \"name\":\"peacock\"\n  },\n  {\n    \"value\":\"#ADD8E6\",\n    \"css\":true,\n    \"name\":\"lightblue\"\n  },\n  {\n    \"value\":\"#BFEFFF\",\n    \"name\":\"lightblue 1\"\n  },\n  {\n    \"value\":\"#B2DFEE\",\n    \"name\":\"lightblue 2\"\n  },\n  {\n    \"value\":\"#9AC0CD\",\n    \"name\":\"lightblue 3\"\n  },\n  {\n    \"value\":\"#68838B\",\n    \"name\":\"lightblue 4\"\n  },\n  {\n    \"value\":\"#B0E0E6\",\n    \"css\":true,\n    \"name\":\"powderblue\"\n  },\n  {\n    \"value\":\"#98F5FF\",\n    \"name\":\"cadetblue 1\"\n  },\n  {\n    \"value\":\"#8EE5EE\",\n    \"name\":\"cadetblue 2\"\n  },\n  {\n    \"value\":\"#7AC5CD\",\n    \"name\":\"cadetblue 3\"\n  },\n  {\n    \"value\":\"#53868B\",\n    \"name\":\"cadetblue 4\"\n  },\n  {\n    \"value\":\"#00F5FF\",\n    \"name\":\"turquoise 1\"\n  },\n  {\n    \"value\":\"#00E5EE\",\n    \"name\":\"turquoise 2\"\n  },\n  {\n    \"value\":\"#00C5CD\",\n    \"name\":\"turquoise 3\"\n  },\n  {\n    \"value\":\"#00868B\",\n    \"name\":\"turquoise 4\"\n  },\n  {\n    \"value\":\"#5F9EA0\",\n    \"css\":true,\n    \"name\":\"cadetblue\"\n  },\n  {\n    \"value\":\"#00CED1\",\n    \"css\":true,\n    \"name\":\"darkturquoise\"\n  },\n  {\n    \"value\":\"#F0FFFF\",\n    \"name\":\"azure 1\"\n  },\n  {\n    \"value\":\"#F0FFFF\",\n    \"css\":true,\n    \"name\":\"azure\"\n  },\n  {\n    \"value\":\"#E0EEEE\",\n    \"name\":\"azure 2\"\n  },\n  {\n    \"value\":\"#C1CDCD\",\n    \"name\":\"azure 3\"\n  },\n  {\n    \"value\":\"#838B8B\",\n    \"name\":\"azure 4\"\n  },\n  {\n    \"value\":\"#E0FFFF\",\n    \"name\":\"lightcyan 1\"\n  },\n  {\n    \"value\":\"#E0FFFF\",\n    \"css\":true,\n    \"name\":\"lightcyan\"\n  },\n  {\n    \"value\":\"#D1EEEE\",\n    \"name\":\"lightcyan 2\"\n  },\n  {\n    \"value\":\"#B4CDCD\",\n    \"name\":\"lightcyan 3\"\n  },\n  {\n    \"value\":\"#7A8B8B\",\n    \"name\":\"lightcyan 4\"\n  },\n  {\n    \"value\":\"#BBFFFF\",\n    \"name\":\"paleturquoise 1\"\n  },\n  {\n    \"value\":\"#AEEEEE\",\n    \"name\":\"paleturquoise 2\"\n  },\n  {\n    \"value\":\"#AEEEEE\",\n    \"css\":true,\n    \"name\":\"paleturquoise\"\n  },\n  {\n    \"value\":\"#96CDCD\",\n    \"name\":\"paleturquoise 3\"\n  },\n  {\n    \"value\":\"#668B8B\",\n    \"name\":\"paleturquoise 4\"\n  },\n  {\n    \"value\":\"#2F4F4F\",\n    \"css\":true,\n    \"name\":\"darkslategray\"\n  },\n  {\n    \"value\":\"#97FFFF\",\n    \"name\":\"darkslategray 1\"\n  },\n  {\n    \"value\":\"#8DEEEE\",\n    \"name\":\"darkslategray 2\"\n  },\n  {\n    \"value\":\"#79CDCD\",\n    \"name\":\"darkslategray 3\"\n  },\n  {\n    \"value\":\"#528B8B\",\n    \"name\":\"darkslategray 4\"\n  },\n  {\n    \"value\":\"#00FFFF\",\n    \"name\":\"cyan\"\n  },\n  {\n    \"value\":\"#00FFFF\",\n    \"css\":true,\n    \"name\":\"aqua\"\n  },\n  {\n    \"value\":\"#00EEEE\",\n    \"name\":\"cyan 2\"\n  },\n  {\n    \"value\":\"#00CDCD\",\n    \"name\":\"cyan 3\"\n  },\n  {\n    \"value\":\"#008B8B\",\n    \"name\":\"cyan 4\"\n  },\n  {\n    \"value\":\"#008B8B\",\n    \"css\":true,\n    \"name\":\"darkcyan\"\n  },\n  {\n    \"value\":\"#008080\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"teal\"\n  },\n  {\n    \"value\":\"#48D1CC\",\n    \"css\":true,\n    \"name\":\"mediumturquoise\"\n  },\n  {\n    \"value\":\"#20B2AA\",\n    \"css\":true,\n    \"name\":\"lightseagreen\"\n  },\n  {\n    \"value\":\"#03A89E\",\n    \"name\":\"manganeseblue\"\n  },\n  {\n    \"value\":\"#40E0D0\",\n    \"css\":true,\n    \"name\":\"turquoise\"\n  },\n  {\n    \"value\":\"#808A87\",\n    \"name\":\"coldgrey\"\n  },\n  {\n    \"value\":\"#00C78C\",\n    \"name\":\"turquoiseblue\"\n  },\n  {\n    \"value\":\"#7FFFD4\",\n    \"name\":\"aquamarine 1\"\n  },\n  {\n    \"value\":\"#7FFFD4\",\n    \"css\":true,\n    \"name\":\"aquamarine\"\n  },\n  {\n    \"value\":\"#76EEC6\",\n    \"name\":\"aquamarine 2\"\n  },\n  {\n    \"value\":\"#66CDAA\",\n    \"name\":\"aquamarine 3\"\n  },\n  {\n    \"value\":\"#66CDAA\",\n    \"css\":true,\n    \"name\":\"mediumaquamarine\"\n  },\n  {\n    \"value\":\"#458B74\",\n    \"name\":\"aquamarine 4\"\n  },\n  {\n    \"value\":\"#00FA9A\",\n    \"css\":true,\n    \"name\":\"mediumspringgreen\"\n  },\n  {\n    \"value\":\"#F5FFFA\",\n    \"css\":true,\n    \"name\":\"mintcream\"\n  },\n  {\n    \"value\":\"#00FF7F\",\n    \"css\":true,\n    \"name\":\"springgreen\"\n  },\n  {\n    \"value\":\"#00EE76\",\n    \"name\":\"springgreen 1\"\n  },\n  {\n    \"value\":\"#00CD66\",\n    \"name\":\"springgreen 2\"\n  },\n  {\n    \"value\":\"#008B45\",\n    \"name\":\"springgreen 3\"\n  },\n  {\n    \"value\":\"#3CB371\",\n    \"css\":true,\n    \"name\":\"mediumseagreen\"\n  },\n  {\n    \"value\":\"#54FF9F\",\n    \"name\":\"seagreen 1\"\n  },\n  {\n    \"value\":\"#4EEE94\",\n    \"name\":\"seagreen 2\"\n  },\n  {\n    \"value\":\"#43CD80\",\n    \"name\":\"seagreen 3\"\n  },\n  {\n    \"value\":\"#2E8B57\",\n    \"name\":\"seagreen 4\"\n  },\n  {\n    \"value\":\"#2E8B57\",\n    \"css\":true,\n    \"name\":\"seagreen\"\n  },\n  {\n    \"value\":\"#00C957\",\n    \"name\":\"emeraldgreen\"\n  },\n  {\n    \"value\":\"#BDFCC9\",\n    \"name\":\"mint\"\n  },\n  {\n    \"value\":\"#3D9140\",\n    \"name\":\"cobaltgreen\"\n  },\n  {\n    \"value\":\"#F0FFF0\",\n    \"name\":\"honeydew 1\"\n  },\n  {\n    \"value\":\"#F0FFF0\",\n    \"css\":true,\n    \"name\":\"honeydew\"\n  },\n  {\n    \"value\":\"#E0EEE0\",\n    \"name\":\"honeydew 2\"\n  },\n  {\n    \"value\":\"#C1CDC1\",\n    \"name\":\"honeydew 3\"\n  },\n  {\n    \"value\":\"#838B83\",\n    \"name\":\"honeydew 4\"\n  },\n  {\n    \"value\":\"#8FBC8F\",\n    \"css\":true,\n    \"name\":\"darkseagreen\"\n  },\n  {\n    \"value\":\"#C1FFC1\",\n    \"name\":\"darkseagreen 1\"\n  },\n  {\n    \"value\":\"#B4EEB4\",\n    \"name\":\"darkseagreen 2\"\n  },\n  {\n    \"value\":\"#9BCD9B\",\n    \"name\":\"darkseagreen 3\"\n  },\n  {\n    \"value\":\"#698B69\",\n    \"name\":\"darkseagreen 4\"\n  },\n  {\n    \"value\":\"#98FB98\",\n    \"css\":true,\n    \"name\":\"palegreen\"\n  },\n  {\n    \"value\":\"#9AFF9A\",\n    \"name\":\"palegreen 1\"\n  },\n  {\n    \"value\":\"#90EE90\",\n    \"name\":\"palegreen 2\"\n  },\n  {\n    \"value\":\"#90EE90\",\n    \"css\":true,\n    \"name\":\"lightgreen\"\n  },\n  {\n    \"value\":\"#7CCD7C\",\n    \"name\":\"palegreen 3\"\n  },\n  {\n    \"value\":\"#548B54\",\n    \"name\":\"palegreen 4\"\n  },\n  {\n    \"value\":\"#32CD32\",\n    \"css\":true,\n    \"name\":\"limegreen\"\n  },\n  {\n    \"value\":\"#228B22\",\n    \"css\":true,\n    \"name\":\"forestgreen\"\n  },\n  {\n    \"value\":\"#00FF00\",\n    \"vga\":true,\n    \"name\":\"green 1\"\n  },\n  {\n    \"value\":\"#00FF00\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"lime\"\n  },\n  {\n    \"value\":\"#00EE00\",\n    \"name\":\"green 2\"\n  },\n  {\n    \"value\":\"#00CD00\",\n    \"name\":\"green 3\"\n  },\n  {\n    \"value\":\"#008B00\",\n    \"name\":\"green 4\"\n  },\n  {\n    \"value\":\"#008000\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"green\"\n  },\n  {\n    \"value\":\"#006400\",\n    \"css\":true,\n    \"name\":\"darkgreen\"\n  },\n  {\n    \"value\":\"#308014\",\n    \"name\":\"sapgreen\"\n  },\n  {\n    \"value\":\"#7CFC00\",\n    \"css\":true,\n    \"name\":\"lawngreen\"\n  },\n  {\n    \"value\":\"#7FFF00\",\n    \"name\":\"chartreuse 1\"\n  },\n  {\n    \"value\":\"#7FFF00\",\n    \"css\":true,\n    \"name\":\"chartreuse\"\n  },\n  {\n    \"value\":\"#76EE00\",\n    \"name\":\"chartreuse 2\"\n  },\n  {\n    \"value\":\"#66CD00\",\n    \"name\":\"chartreuse 3\"\n  },\n  {\n    \"value\":\"#458B00\",\n    \"name\":\"chartreuse 4\"\n  },\n  {\n    \"value\":\"#ADFF2F\",\n    \"css\":true,\n    \"name\":\"greenyellow\"\n  },\n  {\n    \"value\":\"#CAFF70\",\n    \"name\":\"darkolivegreen 1\"\n  },\n  {\n    \"value\":\"#BCEE68\",\n    \"name\":\"darkolivegreen 2\"\n  },\n  {\n    \"value\":\"#A2CD5A\",\n    \"name\":\"darkolivegreen 3\"\n  },\n  {\n    \"value\":\"#6E8B3D\",\n    \"name\":\"darkolivegreen 4\"\n  },\n  {\n    \"value\":\"#556B2F\",\n    \"css\":true,\n    \"name\":\"darkolivegreen\"\n  },\n  {\n    \"value\":\"#6B8E23\",\n    \"css\":true,\n    \"name\":\"olivedrab\"\n  },\n  {\n    \"value\":\"#C0FF3E\",\n    \"name\":\"olivedrab 1\"\n  },\n  {\n    \"value\":\"#B3EE3A\",\n    \"name\":\"olivedrab 2\"\n  },\n  {\n    \"value\":\"#9ACD32\",\n    \"name\":\"olivedrab 3\"\n  },\n  {\n    \"value\":\"#9ACD32\",\n    \"css\":true,\n    \"name\":\"yellowgreen\"\n  },\n  {\n    \"value\":\"#698B22\",\n    \"name\":\"olivedrab 4\"\n  },\n  {\n    \"value\":\"#FFFFF0\",\n    \"name\":\"ivory 1\"\n  },\n  {\n    \"value\":\"#FFFFF0\",\n    \"css\":true,\n    \"name\":\"ivory\"\n  },\n  {\n    \"value\":\"#EEEEE0\",\n    \"name\":\"ivory 2\"\n  },\n  {\n    \"value\":\"#CDCDC1\",\n    \"name\":\"ivory 3\"\n  },\n  {\n    \"value\":\"#8B8B83\",\n    \"name\":\"ivory 4\"\n  },\n  {\n    \"value\":\"#F5F5DC\",\n    \"css\":true,\n    \"name\":\"beige\"\n  },\n  {\n    \"value\":\"#FFFFE0\",\n    \"name\":\"lightyellow 1\"\n  },\n  {\n    \"value\":\"#FFFFE0\",\n    \"css\":true,\n    \"name\":\"lightyellow\"\n  },\n  {\n    \"value\":\"#EEEED1\",\n    \"name\":\"lightyellow 2\"\n  },\n  {\n    \"value\":\"#CDCDB4\",\n    \"name\":\"lightyellow 3\"\n  },\n  {\n    \"value\":\"#8B8B7A\",\n    \"name\":\"lightyellow 4\"\n  },\n  {\n    \"value\":\"#FAFAD2\",\n    \"css\":true,\n    \"name\":\"lightgoldenrodyellow\"\n  },\n  {\n    \"value\":\"#FFFF00\",\n    \"vga\":true,\n    \"name\":\"yellow 1\"\n  },\n  {\n    \"value\":\"#FFFF00\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"yellow\"\n  },\n  {\n    \"value\":\"#EEEE00\",\n    \"name\":\"yellow 2\"\n  },\n  {\n    \"value\":\"#CDCD00\",\n    \"name\":\"yellow 3\"\n  },\n  {\n    \"value\":\"#8B8B00\",\n    \"name\":\"yellow 4\"\n  },\n  {\n    \"value\":\"#808069\",\n    \"name\":\"warmgrey\"\n  },\n  {\n    \"value\":\"#808000\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"olive\"\n  },\n  {\n    \"value\":\"#BDB76B\",\n    \"css\":true,\n    \"name\":\"darkkhaki\"\n  },\n  {\n    \"value\":\"#FFF68F\",\n    \"name\":\"khaki 1\"\n  },\n  {\n    \"value\":\"#EEE685\",\n    \"name\":\"khaki 2\"\n  },\n  {\n    \"value\":\"#CDC673\",\n    \"name\":\"khaki 3\"\n  },\n  {\n    \"value\":\"#8B864E\",\n    \"name\":\"khaki 4\"\n  },\n  {\n    \"value\":\"#F0E68C\",\n    \"css\":true,\n    \"name\":\"khaki\"\n  },\n  {\n    \"value\":\"#EEE8AA\",\n    \"css\":true,\n    \"name\":\"palegoldenrod\"\n  },\n  {\n    \"value\":\"#FFFACD\",\n    \"name\":\"lemonchiffon 1\"\n  },\n  {\n    \"value\":\"#FFFACD\",\n    \"css\":true,\n    \"name\":\"lemonchiffon\"\n  },\n  {\n    \"value\":\"#EEE9BF\",\n    \"name\":\"lemonchiffon 2\"\n  },\n  {\n    \"value\":\"#CDC9A5\",\n    \"name\":\"lemonchiffon 3\"\n  },\n  {\n    \"value\":\"#8B8970\",\n    \"name\":\"lemonchiffon 4\"\n  },\n  {\n    \"value\":\"#FFEC8B\",\n    \"name\":\"lightgoldenrod 1\"\n  },\n  {\n    \"value\":\"#EEDC82\",\n    \"name\":\"lightgoldenrod 2\"\n  },\n  {\n    \"value\":\"#CDBE70\",\n    \"name\":\"lightgoldenrod 3\"\n  },\n  {\n    \"value\":\"#8B814C\",\n    \"name\":\"lightgoldenrod 4\"\n  },\n  {\n    \"value\":\"#E3CF57\",\n    \"name\":\"banana\"\n  },\n  {\n    \"value\":\"#FFD700\",\n    \"name\":\"gold 1\"\n  },\n  {\n    \"value\":\"#FFD700\",\n    \"css\":true,\n    \"name\":\"gold\"\n  },\n  {\n    \"value\":\"#EEC900\",\n    \"name\":\"gold 2\"\n  },\n  {\n    \"value\":\"#CDAD00\",\n    \"name\":\"gold 3\"\n  },\n  {\n    \"value\":\"#8B7500\",\n    \"name\":\"gold 4\"\n  },\n  {\n    \"value\":\"#FFF8DC\",\n    \"name\":\"cornsilk 1\"\n  },\n  {\n    \"value\":\"#FFF8DC\",\n    \"css\":true,\n    \"name\":\"cornsilk\"\n  },\n  {\n    \"value\":\"#EEE8CD\",\n    \"name\":\"cornsilk 2\"\n  },\n  {\n    \"value\":\"#CDC8B1\",\n    \"name\":\"cornsilk 3\"\n  },\n  {\n    \"value\":\"#8B8878\",\n    \"name\":\"cornsilk 4\"\n  },\n  {\n    \"value\":\"#DAA520\",\n    \"css\":true,\n    \"name\":\"goldenrod\"\n  },\n  {\n    \"value\":\"#FFC125\",\n    \"name\":\"goldenrod 1\"\n  },\n  {\n    \"value\":\"#EEB422\",\n    \"name\":\"goldenrod 2\"\n  },\n  {\n    \"value\":\"#CD9B1D\",\n    \"name\":\"goldenrod 3\"\n  },\n  {\n    \"value\":\"#8B6914\",\n    \"name\":\"goldenrod 4\"\n  },\n  {\n    \"value\":\"#B8860B\",\n    \"css\":true,\n    \"name\":\"darkgoldenrod\"\n  },\n  {\n    \"value\":\"#FFB90F\",\n    \"name\":\"darkgoldenrod 1\"\n  },\n  {\n    \"value\":\"#EEAD0E\",\n    \"name\":\"darkgoldenrod 2\"\n  },\n  {\n    \"value\":\"#CD950C\",\n    \"name\":\"darkgoldenrod 3\"\n  },\n  {\n    \"value\":\"#8B6508\",\n    \"name\":\"darkgoldenrod 4\"\n  },\n  {\n    \"value\":\"#FFA500\",\n    \"name\":\"orange 1\"\n  },\n  {\n    \"value\":\"#FF8000\",\n    \"css\":true,\n    \"name\":\"orange\"\n  },\n  {\n    \"value\":\"#EE9A00\",\n    \"name\":\"orange 2\"\n  },\n  {\n    \"value\":\"#CD8500\",\n    \"name\":\"orange 3\"\n  },\n  {\n    \"value\":\"#8B5A00\",\n    \"name\":\"orange 4\"\n  },\n  {\n    \"value\":\"#FFFAF0\",\n    \"css\":true,\n    \"name\":\"floralwhite\"\n  },\n  {\n    \"value\":\"#FDF5E6\",\n    \"css\":true,\n    \"name\":\"oldlace\"\n  },\n  {\n    \"value\":\"#F5DEB3\",\n    \"css\":true,\n    \"name\":\"wheat\"\n  },\n  {\n    \"value\":\"#FFE7BA\",\n    \"name\":\"wheat 1\"\n  },\n  {\n    \"value\":\"#EED8AE\",\n    \"name\":\"wheat 2\"\n  },\n  {\n    \"value\":\"#CDBA96\",\n    \"name\":\"wheat 3\"\n  },\n  {\n    \"value\":\"#8B7E66\",\n    \"name\":\"wheat 4\"\n  },\n  {\n    \"value\":\"#FFE4B5\",\n    \"css\":true,\n    \"name\":\"moccasin\"\n  },\n  {\n    \"value\":\"#FFEFD5\",\n    \"css\":true,\n    \"name\":\"papayawhip\"\n  },\n  {\n    \"value\":\"#FFEBCD\",\n    \"css\":true,\n    \"name\":\"blanchedalmond\"\n  },\n  {\n    \"value\":\"#FFDEAD\",\n    \"name\":\"navajowhite 1\"\n  },\n  {\n    \"value\":\"#FFDEAD\",\n    \"css\":true,\n    \"name\":\"navajowhite\"\n  },\n  {\n    \"value\":\"#EECFA1\",\n    \"name\":\"navajowhite 2\"\n  },\n  {\n    \"value\":\"#CDB38B\",\n    \"name\":\"navajowhite 3\"\n  },\n  {\n    \"value\":\"#8B795E\",\n    \"name\":\"navajowhite 4\"\n  },\n  {\n    \"value\":\"#FCE6C9\",\n    \"name\":\"eggshell\"\n  },\n  {\n    \"value\":\"#D2B48C\",\n    \"css\":true,\n    \"name\":\"tan\"\n  },\n  {\n    \"value\":\"#9C661F\",\n    \"name\":\"brick\"\n  },\n  {\n    \"value\":\"#FF9912\",\n    \"name\":\"cadmiumyellow\"\n  },\n  {\n    \"value\":\"#FAEBD7\",\n    \"css\":true,\n    \"name\":\"antiquewhite\"\n  },\n  {\n    \"value\":\"#FFEFDB\",\n    \"name\":\"antiquewhite 1\"\n  },\n  {\n    \"value\":\"#EEDFCC\",\n    \"name\":\"antiquewhite 2\"\n  },\n  {\n    \"value\":\"#CDC0B0\",\n    \"name\":\"antiquewhite 3\"\n  },\n  {\n    \"value\":\"#8B8378\",\n    \"name\":\"antiquewhite 4\"\n  },\n  {\n    \"value\":\"#DEB887\",\n    \"css\":true,\n    \"name\":\"burlywood\"\n  },\n  {\n    \"value\":\"#FFD39B\",\n    \"name\":\"burlywood 1\"\n  },\n  {\n    \"value\":\"#EEC591\",\n    \"name\":\"burlywood 2\"\n  },\n  {\n    \"value\":\"#CDAA7D\",\n    \"name\":\"burlywood 3\"\n  },\n  {\n    \"value\":\"#8B7355\",\n    \"name\":\"burlywood 4\"\n  },\n  {\n    \"value\":\"#FFE4C4\",\n    \"name\":\"bisque 1\"\n  },\n  {\n    \"value\":\"#FFE4C4\",\n    \"css\":true,\n    \"name\":\"bisque\"\n  },\n  {\n    \"value\":\"#EED5B7\",\n    \"name\":\"bisque 2\"\n  },\n  {\n    \"value\":\"#CDB79E\",\n    \"name\":\"bisque 3\"\n  },\n  {\n    \"value\":\"#8B7D6B\",\n    \"name\":\"bisque 4\"\n  },\n  {\n    \"value\":\"#E3A869\",\n    \"name\":\"melon\"\n  },\n  {\n    \"value\":\"#ED9121\",\n    \"name\":\"carrot\"\n  },\n  {\n    \"value\":\"#FF8C00\",\n    \"css\":true,\n    \"name\":\"darkorange\"\n  },\n  {\n    \"value\":\"#FF7F00\",\n    \"name\":\"darkorange 1\"\n  },\n  {\n    \"value\":\"#EE7600\",\n    \"name\":\"darkorange 2\"\n  },\n  {\n    \"value\":\"#CD6600\",\n    \"name\":\"darkorange 3\"\n  },\n  {\n    \"value\":\"#8B4500\",\n    \"name\":\"darkorange 4\"\n  },\n  {\n    \"value\":\"#FFA54F\",\n    \"name\":\"tan 1\"\n  },\n  {\n    \"value\":\"#EE9A49\",\n    \"name\":\"tan 2\"\n  },\n  {\n    \"value\":\"#CD853F\",\n    \"name\":\"tan 3\"\n  },\n  {\n    \"value\":\"#CD853F\",\n    \"css\":true,\n    \"name\":\"peru\"\n  },\n  {\n    \"value\":\"#8B5A2B\",\n    \"name\":\"tan 4\"\n  },\n  {\n    \"value\":\"#FAF0E6\",\n    \"css\":true,\n    \"name\":\"linen\"\n  },\n  {\n    \"value\":\"#FFDAB9\",\n    \"name\":\"peachpuff 1\"\n  },\n  {\n    \"value\":\"#FFDAB9\",\n    \"css\":true,\n    \"name\":\"peachpuff\"\n  },\n  {\n    \"value\":\"#EECBAD\",\n    \"name\":\"peachpuff 2\"\n  },\n  {\n    \"value\":\"#CDAF95\",\n    \"name\":\"peachpuff 3\"\n  },\n  {\n    \"value\":\"#8B7765\",\n    \"name\":\"peachpuff 4\"\n  },\n  {\n    \"value\":\"#FFF5EE\",\n    \"name\":\"seashell 1\"\n  },\n  {\n    \"value\":\"#FFF5EE\",\n    \"css\":true,\n    \"name\":\"seashell\"\n  },\n  {\n    \"value\":\"#EEE5DE\",\n    \"name\":\"seashell 2\"\n  },\n  {\n    \"value\":\"#CDC5BF\",\n    \"name\":\"seashell 3\"\n  },\n  {\n    \"value\":\"#8B8682\",\n    \"name\":\"seashell 4\"\n  },\n  {\n    \"value\":\"#F4A460\",\n    \"css\":true,\n    \"name\":\"sandybrown\"\n  },\n  {\n    \"value\":\"#C76114\",\n    \"name\":\"rawsienna\"\n  },\n  {\n    \"value\":\"#D2691E\",\n    \"css\":true,\n    \"name\":\"chocolate\"\n  },\n  {\n    \"value\":\"#FF7F24\",\n    \"name\":\"chocolate 1\"\n  },\n  {\n    \"value\":\"#EE7621\",\n    \"name\":\"chocolate 2\"\n  },\n  {\n    \"value\":\"#CD661D\",\n    \"name\":\"chocolate 3\"\n  },\n  {\n    \"value\":\"#8B4513\",\n    \"name\":\"chocolate 4\"\n  },\n  {\n    \"value\":\"#8B4513\",\n    \"css\":true,\n    \"name\":\"saddlebrown\"\n  },\n  {\n    \"value\":\"#292421\",\n    \"name\":\"ivoryblack\"\n  },\n  {\n    \"value\":\"#FF7D40\",\n    \"name\":\"flesh\"\n  },\n  {\n    \"value\":\"#FF6103\",\n    \"name\":\"cadmiumorange\"\n  },\n  {\n    \"value\":\"#8A360F\",\n    \"name\":\"burntsienna\"\n  },\n  {\n    \"value\":\"#A0522D\",\n    \"css\":true,\n    \"name\":\"sienna\"\n  },\n  {\n    \"value\":\"#FF8247\",\n    \"name\":\"sienna 1\"\n  },\n  {\n    \"value\":\"#EE7942\",\n    \"name\":\"sienna 2\"\n  },\n  {\n    \"value\":\"#CD6839\",\n    \"name\":\"sienna 3\"\n  },\n  {\n    \"value\":\"#8B4726\",\n    \"name\":\"sienna 4\"\n  },\n  {\n    \"value\":\"#FFA07A\",\n    \"name\":\"lightsalmon 1\"\n  },\n  {\n    \"value\":\"#FFA07A\",\n    \"css\":true,\n    \"name\":\"lightsalmon\"\n  },\n  {\n    \"value\":\"#EE9572\",\n    \"name\":\"lightsalmon 2\"\n  },\n  {\n    \"value\":\"#CD8162\",\n    \"name\":\"lightsalmon 3\"\n  },\n  {\n    \"value\":\"#8B5742\",\n    \"name\":\"lightsalmon 4\"\n  },\n  {\n    \"value\":\"#FF7F50\",\n    \"css\":true,\n    \"name\":\"coral\"\n  },\n  {\n    \"value\":\"#FF4500\",\n    \"name\":\"orangered 1\"\n  },\n  {\n    \"value\":\"#FF4500\",\n    \"css\":true,\n    \"name\":\"orangered\"\n  },\n  {\n    \"value\":\"#EE4000\",\n    \"name\":\"orangered 2\"\n  },\n  {\n    \"value\":\"#CD3700\",\n    \"name\":\"orangered 3\"\n  },\n  {\n    \"value\":\"#8B2500\",\n    \"name\":\"orangered 4\"\n  },\n  {\n    \"value\":\"#5E2612\",\n    \"name\":\"sepia\"\n  },\n  {\n    \"value\":\"#E9967A\",\n    \"css\":true,\n    \"name\":\"darksalmon\"\n  },\n  {\n    \"value\":\"#FF8C69\",\n    \"name\":\"salmon 1\"\n  },\n  {\n    \"value\":\"#EE8262\",\n    \"name\":\"salmon 2\"\n  },\n  {\n    \"value\":\"#CD7054\",\n    \"name\":\"salmon 3\"\n  },\n  {\n    \"value\":\"#8B4C39\",\n    \"name\":\"salmon 4\"\n  },\n  {\n    \"value\":\"#FF7256\",\n    \"name\":\"coral 1\"\n  },\n  {\n    \"value\":\"#EE6A50\",\n    \"name\":\"coral 2\"\n  },\n  {\n    \"value\":\"#CD5B45\",\n    \"name\":\"coral 3\"\n  },\n  {\n    \"value\":\"#8B3E2F\",\n    \"name\":\"coral 4\"\n  },\n  {\n    \"value\":\"#8A3324\",\n    \"name\":\"burntumber\"\n  },\n  {\n    \"value\":\"#FF6347\",\n    \"name\":\"tomato 1\"\n  },\n  {\n    \"value\":\"#FF6347\",\n    \"css\":true,\n    \"name\":\"tomato\"\n  },\n  {\n    \"value\":\"#EE5C42\",\n    \"name\":\"tomato 2\"\n  },\n  {\n    \"value\":\"#CD4F39\",\n    \"name\":\"tomato 3\"\n  },\n  {\n    \"value\":\"#8B3626\",\n    \"name\":\"tomato 4\"\n  },\n  {\n    \"value\":\"#FA8072\",\n    \"css\":true,\n    \"name\":\"salmon\"\n  },\n  {\n    \"value\":\"#FFE4E1\",\n    \"name\":\"mistyrose 1\"\n  },\n  {\n    \"value\":\"#FFE4E1\",\n    \"css\":true,\n    \"name\":\"mistyrose\"\n  },\n  {\n    \"value\":\"#EED5D2\",\n    \"name\":\"mistyrose 2\"\n  },\n  {\n    \"value\":\"#CDB7B5\",\n    \"name\":\"mistyrose 3\"\n  },\n  {\n    \"value\":\"#8B7D7B\",\n    \"name\":\"mistyrose 4\"\n  },\n  {\n    \"value\":\"#FFFAFA\",\n    \"name\":\"snow 1\"\n  },\n  {\n    \"value\":\"#FFFAFA\",\n    \"css\":true,\n    \"name\":\"snow\"\n  },\n  {\n    \"value\":\"#EEE9E9\",\n    \"name\":\"snow 2\"\n  },\n  {\n    \"value\":\"#CDC9C9\",\n    \"name\":\"snow 3\"\n  },\n  {\n    \"value\":\"#8B8989\",\n    \"name\":\"snow 4\"\n  },\n  {\n    \"value\":\"#BC8F8F\",\n    \"css\":true,\n    \"name\":\"rosybrown\"\n  },\n  {\n    \"value\":\"#FFC1C1\",\n    \"name\":\"rosybrown 1\"\n  },\n  {\n    \"value\":\"#EEB4B4\",\n    \"name\":\"rosybrown 2\"\n  },\n  {\n    \"value\":\"#CD9B9B\",\n    \"name\":\"rosybrown 3\"\n  },\n  {\n    \"value\":\"#8B6969\",\n    \"name\":\"rosybrown 4\"\n  },\n  {\n    \"value\":\"#F08080\",\n    \"css\":true,\n    \"name\":\"lightcoral\"\n  },\n  {\n    \"value\":\"#CD5C5C\",\n    \"css\":true,\n    \"name\":\"indianred\"\n  },\n  {\n    \"value\":\"#FF6A6A\",\n    \"name\":\"indianred 1\"\n  },\n  {\n    \"value\":\"#EE6363\",\n    \"name\":\"indianred 2\"\n  },\n  {\n    \"value\":\"#8B3A3A\",\n    \"name\":\"indianred 4\"\n  },\n  {\n    \"value\":\"#CD5555\",\n    \"name\":\"indianred 3\"\n  },\n  {\n    \"value\":\"#A52A2A\",\n    \"css\":true,\n    \"name\":\"brown\"\n  },\n  {\n    \"value\":\"#FF4040\",\n    \"name\":\"brown 1\"\n  },\n  {\n    \"value\":\"#EE3B3B\",\n    \"name\":\"brown 2\"\n  },\n  {\n    \"value\":\"#CD3333\",\n    \"name\":\"brown 3\"\n  },\n  {\n    \"value\":\"#8B2323\",\n    \"name\":\"brown 4\"\n  },\n  {\n    \"value\":\"#B22222\",\n    \"css\":true,\n    \"name\":\"firebrick\"\n  },\n  {\n    \"value\":\"#FF3030\",\n    \"name\":\"firebrick 1\"\n  },\n  {\n    \"value\":\"#EE2C2C\",\n    \"name\":\"firebrick 2\"\n  },\n  {\n    \"value\":\"#CD2626\",\n    \"name\":\"firebrick 3\"\n  },\n  {\n    \"value\":\"#8B1A1A\",\n    \"name\":\"firebrick 4\"\n  },\n  {\n    \"value\":\"#FF0000\",\n    \"vga\":true,\n    \"name\":\"red 1\"\n  },\n  {\n    \"value\":\"#FF0000\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"red\"\n  },\n  {\n    \"value\":\"#EE0000\",\n    \"name\":\"red 2\"\n  },\n  {\n    \"value\":\"#CD0000\",\n    \"name\":\"red 3\"\n  },\n  {\n    \"value\":\"#8B0000\",\n    \"name\":\"red 4\"\n  },\n  {\n    \"value\":\"#8B0000\",\n    \"css\":true,\n    \"name\":\"darkred\"\n  },\n  {\n    \"value\":\"#800000\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"maroon\"\n  },\n  {\n    \"value\":\"#8E388E\",\n    \"name\":\"sgi beet\"\n  },\n  {\n    \"value\":\"#7171C6\",\n    \"name\":\"sgi slateblue\"\n  },\n  {\n    \"value\":\"#7D9EC0\",\n    \"name\":\"sgi lightblue\"\n  },\n  {\n    \"value\":\"#388E8E\",\n    \"name\":\"sgi teal\"\n  },\n  {\n    \"value\":\"#71C671\",\n    \"name\":\"sgi chartreuse\"\n  },\n  {\n    \"value\":\"#8E8E38\",\n    \"name\":\"sgi olivedrab\"\n  },\n  {\n    \"value\":\"#C5C1AA\",\n    \"name\":\"sgi brightgray\"\n  },\n  {\n    \"value\":\"#C67171\",\n    \"name\":\"sgi salmon\"\n  },\n  {\n    \"value\":\"#555555\",\n    \"name\":\"sgi darkgray\"\n  },\n  {\n    \"value\":\"#1E1E1E\",\n    \"name\":\"sgi gray 12\"\n  },\n  {\n    \"value\":\"#282828\",\n    \"name\":\"sgi gray 16\"\n  },\n  {\n    \"value\":\"#515151\",\n    \"name\":\"sgi gray 32\"\n  },\n  {\n    \"value\":\"#5B5B5B\",\n    \"name\":\"sgi gray 36\"\n  },\n  {\n    \"value\":\"#848484\",\n    \"name\":\"sgi gray 52\"\n  },\n  {\n    \"value\":\"#8E8E8E\",\n    \"name\":\"sgi gray 56\"\n  },\n  {\n    \"value\":\"#AAAAAA\",\n    \"name\":\"sgi lightgray\"\n  },\n  {\n    \"value\":\"#B7B7B7\",\n    \"name\":\"sgi gray 72\"\n  },\n  {\n    \"value\":\"#C1C1C1\",\n    \"name\":\"sgi gray 76\"\n  },\n  {\n    \"value\":\"#EAEAEA\",\n    \"name\":\"sgi gray 92\"\n  },\n  {\n    \"value\":\"#F4F4F4\",\n    \"name\":\"sgi gray 96\"\n  },\n  {\n    \"value\":\"#FFFFFF\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"white\"\n  },\n  {\n    \"value\":\"#F5F5F5\",\n    \"name\":\"white smoke\"\n  },\n  {\n    \"value\":\"#F5F5F5\",\n    \"name\":\"gray 96\"\n  },\n  {\n    \"value\":\"#DCDCDC\",\n    \"css\":true,\n    \"name\":\"gainsboro\"\n  },\n  {\n    \"value\":\"#D3D3D3\",\n    \"css\":true,\n    \"name\":\"lightgrey\"\n  },\n  {\n    \"value\":\"#C0C0C0\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"silver\"\n  },\n  {\n    \"value\":\"#A9A9A9\",\n    \"css\":true,\n    \"name\":\"darkgray\"\n  },\n  {\n    \"value\":\"#808080\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"gray\"\n  },\n  {\n    \"value\":\"#696969\",\n    \"css\":true,\n    \"name\":\"dimgray\"\n  },\n  {\n    \"value\":\"#696969\",\n    \"name\":\"gray 42\"\n  },\n  {\n    \"value\":\"#000000\",\n    \"vga\":true,\n    \"css\":true,\n    \"name\":\"black\"\n  },\n  {\n    \"value\":\"#FCFCFC\",\n    \"name\":\"gray 99\"\n  },\n  {\n    \"value\":\"#FAFAFA\",\n    \"name\":\"gray 98\"\n  },\n  {\n    \"value\":\"#F7F7F7\",\n    \"name\":\"gray 97\"\n  },\n  {\n    \"value\":\"#F2F2F2\",\n    \"name\":\"gray 95\"\n  },\n  {\n    \"value\":\"#F0F0F0\",\n    \"name\":\"gray 94\"\n  },\n  {\n    \"value\":\"#EDEDED\",\n    \"name\":\"gray 93\"\n  },\n  {\n    \"value\":\"#EBEBEB\",\n    \"name\":\"gray 92\"\n  },\n  {\n    \"value\":\"#E8E8E8\",\n    \"name\":\"gray 91\"\n  },\n  {\n    \"value\":\"#E5E5E5\",\n    \"name\":\"gray 90\"\n  },\n  {\n    \"value\":\"#E3E3E3\",\n    \"name\":\"gray 89\"\n  },\n  {\n    \"value\":\"#E0E0E0\",\n    \"name\":\"gray 88\"\n  },\n  {\n    \"value\":\"#DEDEDE\",\n    \"name\":\"gray 87\"\n  },\n  {\n    \"value\":\"#DBDBDB\",\n    \"name\":\"gray 86\"\n  },\n  {\n    \"value\":\"#D9D9D9\",\n    \"name\":\"gray 85\"\n  },\n  {\n    \"value\":\"#D6D6D6\",\n    \"name\":\"gray 84\"\n  },\n  {\n    \"value\":\"#D4D4D4\",\n    \"name\":\"gray 83\"\n  },\n  {\n    \"value\":\"#D1D1D1\",\n    \"name\":\"gray 82\"\n  },\n  {\n    \"value\":\"#CFCFCF\",\n    \"name\":\"gray 81\"\n  },\n  {\n    \"value\":\"#CCCCCC\",\n    \"name\":\"gray 80\"\n  },\n  {\n    \"value\":\"#C9C9C9\",\n    \"name\":\"gray 79\"\n  },\n  {\n    \"value\":\"#C7C7C7\",\n    \"name\":\"gray 78\"\n  },\n  {\n    \"value\":\"#C4C4C4\",\n    \"name\":\"gray 77\"\n  },\n  {\n    \"value\":\"#C2C2C2\",\n    \"name\":\"gray 76\"\n  },\n  {\n    \"value\":\"#BFBFBF\",\n    \"name\":\"gray 75\"\n  },\n  {\n    \"value\":\"#BDBDBD\",\n    \"name\":\"gray 74\"\n  },\n  {\n    \"value\":\"#BABABA\",\n    \"name\":\"gray 73\"\n  },\n  {\n    \"value\":\"#B8B8B8\",\n    \"name\":\"gray 72\"\n  },\n  {\n    \"value\":\"#B5B5B5\",\n    \"name\":\"gray 71\"\n  },\n  {\n    \"value\":\"#B3B3B3\",\n    \"name\":\"gray 70\"\n  },\n  {\n    \"value\":\"#B0B0B0\",\n    \"name\":\"gray 69\"\n  },\n  {\n    \"value\":\"#ADADAD\",\n    \"name\":\"gray 68\"\n  },\n  {\n    \"value\":\"#ABABAB\",\n    \"name\":\"gray 67\"\n  },\n  {\n    \"value\":\"#A8A8A8\",\n    \"name\":\"gray 66\"\n  },\n  {\n    \"value\":\"#A6A6A6\",\n    \"name\":\"gray 65\"\n  },\n  {\n    \"value\":\"#A3A3A3\",\n    \"name\":\"gray 64\"\n  },\n  {\n    \"value\":\"#A1A1A1\",\n    \"name\":\"gray 63\"\n  },\n  {\n    \"value\":\"#9E9E9E\",\n    \"name\":\"gray 62\"\n  },\n  {\n    \"value\":\"#9C9C9C\",\n    \"name\":\"gray 61\"\n  },\n  {\n    \"value\":\"#999999\",\n    \"name\":\"gray 60\"\n  },\n  {\n    \"value\":\"#969696\",\n    \"name\":\"gray 59\"\n  },\n  {\n    \"value\":\"#949494\",\n    \"name\":\"gray 58\"\n  },\n  {\n    \"value\":\"#919191\",\n    \"name\":\"gray 57\"\n  },\n  {\n    \"value\":\"#8F8F8F\",\n    \"name\":\"gray 56\"\n  },\n  {\n    \"value\":\"#8C8C8C\",\n    \"name\":\"gray 55\"\n  },\n  {\n    \"value\":\"#8A8A8A\",\n    \"name\":\"gray 54\"\n  },\n  {\n    \"value\":\"#878787\",\n    \"name\":\"gray 53\"\n  },\n  {\n    \"value\":\"#858585\",\n    \"name\":\"gray 52\"\n  },\n  {\n    \"value\":\"#828282\",\n    \"name\":\"gray 51\"\n  },\n  {\n    \"value\":\"#7F7F7F\",\n    \"name\":\"gray 50\"\n  },\n  {\n    \"value\":\"#7D7D7D\",\n    \"name\":\"gray 49\"\n  },\n  {\n    \"value\":\"#7A7A7A\",\n    \"name\":\"gray 48\"\n  },\n  {\n    \"value\":\"#787878\",\n    \"name\":\"gray 47\"\n  },\n  {\n    \"value\":\"#757575\",\n    \"name\":\"gray 46\"\n  },\n  {\n    \"value\":\"#737373\",\n    \"name\":\"gray 45\"\n  },\n  {\n    \"value\":\"#707070\",\n    \"name\":\"gray 44\"\n  },\n  {\n    \"value\":\"#6E6E6E\",\n    \"name\":\"gray 43\"\n  },\n  {\n    \"value\":\"#666666\",\n    \"name\":\"gray 40\"\n  },\n  {\n    \"value\":\"#636363\",\n    \"name\":\"gray 39\"\n  },\n  {\n    \"value\":\"#616161\",\n    \"name\":\"gray 38\"\n  },\n  {\n    \"value\":\"#5E5E5E\",\n    \"name\":\"gray 37\"\n  },\n  {\n    \"value\":\"#5C5C5C\",\n    \"name\":\"gray 36\"\n  },\n  {\n    \"value\":\"#595959\",\n    \"name\":\"gray 35\"\n  },\n  {\n    \"value\":\"#575757\",\n    \"name\":\"gray 34\"\n  },\n  {\n    \"value\":\"#545454\",\n    \"name\":\"gray 33\"\n  },\n  {\n    \"value\":\"#525252\",\n    \"name\":\"gray 32\"\n  },\n  {\n    \"value\":\"#4F4F4F\",\n    \"name\":\"gray 31\"\n  },\n  {\n    \"value\":\"#4D4D4D\",\n    \"name\":\"gray 30\"\n  },\n  {\n    \"value\":\"#4A4A4A\",\n    \"name\":\"gray 29\"\n  },\n  {\n    \"value\":\"#474747\",\n    \"name\":\"gray 28\"\n  },\n  {\n    \"value\":\"#454545\",\n    \"name\":\"gray 27\"\n  },\n  {\n    \"value\":\"#424242\",\n    \"name\":\"gray 26\"\n  },\n  {\n    \"value\":\"#404040\",\n    \"name\":\"gray 25\"\n  },\n  {\n    \"value\":\"#3D3D3D\",\n    \"name\":\"gray 24\"\n  },\n  {\n    \"value\":\"#3B3B3B\",\n    \"name\":\"gray 23\"\n  },\n  {\n    \"value\":\"#383838\",\n    \"name\":\"gray 22\"\n  },\n  {\n    \"value\":\"#363636\",\n    \"name\":\"gray 21\"\n  },\n  {\n    \"value\":\"#333333\",\n    \"name\":\"gray 20\"\n  },\n  {\n    \"value\":\"#303030\",\n    \"name\":\"gray 19\"\n  },\n  {\n    \"value\":\"#2E2E2E\",\n    \"name\":\"gray 18\"\n  },\n  {\n    \"value\":\"#2B2B2B\",\n    \"name\":\"gray 17\"\n  },\n  {\n    \"value\":\"#292929\",\n    \"name\":\"gray 16\"\n  },\n  {\n    \"value\":\"#262626\",\n    \"name\":\"gray 15\"\n  },\n  {\n    \"value\":\"#242424\",\n    \"name\":\"gray 14\"\n  },\n  {\n    \"value\":\"#212121\",\n    \"name\":\"gray 13\"\n  },\n  {\n    \"value\":\"#1F1F1F\",\n    \"name\":\"gray 12\"\n  },\n  {\n    \"value\":\"#1C1C1C\",\n    \"name\":\"gray 11\"\n  },\n  {\n    \"value\":\"#1A1A1A\",\n    \"name\":\"gray 10\"\n  },\n  {\n    \"value\":\"#171717\",\n    \"name\":\"gray 9\"\n  },\n  {\n    \"value\":\"#141414\",\n    \"name\":\"gray 8\"\n  },\n  {\n    \"value\":\"#121212\",\n    \"name\":\"gray 7\"\n  },\n  {\n    \"value\":\"#0F0F0F\",\n    \"name\":\"gray 6\"\n  },\n  {\n    \"value\":\"#0D0D0D\",\n    \"name\":\"gray 5\"\n  },\n  {\n    \"value\":\"#0A0A0A\",\n    \"name\":\"gray 4\"\n  },\n  {\n    \"value\":\"#080808\",\n    \"name\":\"gray 3\"\n  },\n  {\n    \"value\":\"#050505\",\n    \"name\":\"gray 2\"\n  },\n  {\n    \"value\":\"#030303\",\n    \"name\":\"gray 1\"\n  },\n  {\n    \"value\":\"#F5F5F5\",\n    \"css\":true,\n    \"name\":\"whitesmoke\"\n  }\n]\n", "/**\n * Module dependencies\n */\nvar colors = require('./colors')\n\nvar cssColors = colors.filter(function(color){\n  return !! color.css\n})\n\nvar vgaColors = colors.filter(function(color){\n  return !! color.vga\n})\n\n\n/**\n * Get color value for a certain name.\n * @param name {String}\n * @return {String} Hex color value\n * @api public\n */\n\nmodule.exports = function(name) {\n  var color = module.exports.get(name)\n  return color && color.value\n}\n\n/**\n * Get color object.\n *\n * @param name {String}\n * @return {Object} Color object\n * @api public\n */\n\nmodule.exports.get = function(name) {\n  name = name || ''\n  name = name.trim().toLowerCase()\n  return colors.filter(function(color){\n    return color.name.toLowerCase() === name\n  }).pop()\n}\n\n/**\n * Get all color object.\n *\n * @return {Array}\n * @api public\n */\n\nmodule.exports.all = module.exports.get.all = function() {\n return colors\n}\n\n/**\n * Get color object compatible with CSS.\n *\n * @return {Array}\n * @api public\n */\n\nmodule.exports.get.css = function(name) {\n  if (!name) return cssColors\n  name = name || ''\n  name = name.trim().toLowerCase()\n  return cssColors.filter(function(color){\n    return color.name.toLowerCase() === name\n  }).pop()\n}\n\n\n\nmodule.exports.get.vga = function(name) {\n  if (!name) return vgaColors\n  name = name || ''\n  name = name.trim().toLowerCase()\n  return vgaColors.filter(function(color){\n    return color.name.toLowerCase() === name\n  }).pop()\n}\n", "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\n  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,\n  rsUpper + '+' + rsOptUpperContr,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;\n", "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n */\nfunction charsStartIndex(strSymbols, chrSymbols) {\n  var index = -1,\n      length = strSymbols.length;\n\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Removes leading whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimStart('  abc  ');\n * // => 'abc  '\n *\n * _.trimStart('-_-abc-_-', '_-');\n * // => 'abc-_-'\n */\nfunction trimStart(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrimStart, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      start = charsStartIndex(strSymbols, stringToArray(chars));\n\n  return castSlice(strSymbols, start).join('');\n}\n\nmodule.exports = trimStart;\n", "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nvar asciiSize = baseProperty('length');\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/**\n * Gets the number of symbols in `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the string size.\n */\nfunction stringSize(string) {\n  return hasUnicode(string)\n    ? unicodeSize(string)\n    : asciiSize(string);\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nfunction unicodeSize(string) {\n  var result = reUnicode.lastIndex = 0;\n  while (reUnicode.test(string)) {\n    result++;\n  }\n  return result;\n}\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeFloor = Math.floor;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.repeat` which doesn't coerce arguments.\n *\n * @private\n * @param {string} string The string to repeat.\n * @param {number} n The number of times to repeat the string.\n * @returns {string} Returns the repeated string.\n */\nfunction baseRepeat(string, n) {\n  var result = '';\n  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n    return result;\n  }\n  // Leverage the exponentiation by squaring algorithm for a faster repeat.\n  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n  do {\n    if (n % 2) {\n      result += string;\n    }\n    n = nativeFloor(n / 2);\n    if (n) {\n      string += string;\n    }\n  } while (n);\n\n  return result;\n}\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\n/**\n * Creates the padding for `string` based on `length`. The `chars` string\n * is truncated if the number of characters exceeds `length`.\n *\n * @private\n * @param {number} length The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padding for `string`.\n */\nfunction createPadding(length, chars) {\n  chars = chars === undefined ? ' ' : baseToString(chars);\n\n  var charsLength = chars.length;\n  if (charsLength < 2) {\n    return charsLength ? baseRepeat(chars, length) : chars;\n  }\n  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n  return hasUnicode(chars)\n    ? castSlice(stringToArray(result), 0, length).join('')\n    : result.slice(0, length);\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Pads `string` on the right side if it's shorter than `length`. Padding\n * characters are truncated if they exceed `length`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to pad.\n * @param {number} [length=0] The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padded string.\n * @example\n *\n * _.padEnd('abc', 6);\n * // => 'abc   '\n *\n * _.padEnd('abc', 6, '_-');\n * // => 'abc_-_'\n *\n * _.padEnd('abc', 3);\n * // => 'abc'\n */\nfunction padEnd(string, length, chars) {\n  string = toString(string);\n  length = toInteger(length);\n\n  var strLength = length ? stringSize(string) : 0;\n  return (length && strLength < length)\n    ? (string + createPadding(length - strLength, chars))\n    : string;\n}\n\nmodule.exports = padEnd;\n", "'use strict';\n/* eslint-disable no-mixed-operators */\nmodule.exports = (red, green, blue, alpha) => {\n\tconst isPercent = (red + (alpha || '')).toString().includes('%');\n\n\tif (typeof red === 'string') {\n\t\t[red, green, blue, alpha] = red.match(/(0?\\.?\\d{1,3})%?\\b/g).map(Number);\n\t} else if (alpha !== undefined) {\n\t\talpha = parseFloat(alpha);\n\t}\n\n\tif (typeof red !== 'number' ||\n\t\ttypeof green !== 'number' ||\n\t\ttypeof blue !== 'number' ||\n\t\tred > 255 ||\n\t\tgreen > 255 ||\n\t\tblue > 255\n\t) {\n\t\tthrow new TypeError('Expected three numbers below 256');\n\t}\n\n\tif (typeof alpha === 'number') {\n\t\tif (!isPercent && alpha >= 0 && alpha <= 1) {\n\t\t\talpha = Math.round(255 * alpha);\n\t\t} else if (isPercent && alpha >= 0 && alpha <= 100) {\n\t\t\talpha = Math.round(255 * alpha / 100);\n\t\t} else {\n\t\t\tthrow new TypeError(`Expected alpha value (${alpha}) as a fraction or percentage`);\n\t\t}\n\n\t\talpha = (alpha | 1 << 8).toString(16).slice(1);\n\t} else {\n\t\talpha = '';\n\t}\n\n\treturn ((blue | green << 8 | red << 16) | 1 << 24).toString(16).slice(1) + alpha;\n};\n/* eslint-enable no-mixed-operators */\n", "'use strict';\n\nconst hexCharacters = 'a-f\\\\d';\nconst match3or4Hex = `#?[${hexCharacters}]{3}[${hexCharacters}]?`;\nconst match6or8Hex = `#?[${hexCharacters}]{6}([${hexCharacters}]{2})?`;\nconst nonHexChars = new RegExp(`[^#${hexCharacters}]`, 'gi');\nconst validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');\n\nmodule.exports = (hex, options = {}) => {\n\tif (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n\t\tthrow new TypeError('Expected a valid hex string');\n\t}\n\n\thex = hex.replace(/^#/, '');\n\tlet alphaFromHex = 1;\n\n\tif (hex.length === 8) {\n\t\talphaFromHex = Number.parseInt(hex.slice(6, 8), 16) / 255;\n\t\thex = hex.slice(0, 6);\n\t}\n\n\tif (hex.length === 4) {\n\t\talphaFromHex = Number.parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n\t\thex = hex.slice(0, 3);\n\t}\n\n\tif (hex.length === 3) {\n\t\thex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n\t}\n\n\tconst number = Number.parseInt(hex, 16);\n\tconst red = number >> 16;\n\tconst green = (number >> 8) & 255;\n\tconst blue = number & 255;\n\tconst alpha = typeof options.alpha === 'number' ? options.alpha : alphaFromHex;\n\n\tif (options.format === 'array') {\n\t\treturn [red, green, blue, alpha];\n\t}\n\n\tif (options.format === 'css') {\n\t\tconst alphaString = alpha === 1 ? '' : ` / ${Number((alpha * 100).toFixed(2))}%`;\n\t\treturn `rgb(${red} ${green} ${blue}${alphaString})`;\n\t}\n\n\treturn {red, green, blue, alpha};\n};\n", "var toHex = require('colornames');\nvar _words = require('lodash.words');\nvar trimStart = require('lodash.trimstart');\nvar padEnd = require('lodash.padend');\nvar rgbHex = require('rgb-hex');\nvar hexRgb = require('hex-rgb');\n\nconst MIXED_WEIGHT = 0.75;\nconst TEXT_WEIGHT = 0.25;\nconst SEED = 16777215;\nconst FACTOR = 49979693;\n\nmodule.exports = function(object) {\n  return '#' + generateColor(String(JSON.stringify(object)));\n};\n\nfunction getColors(text) {\n  var words = _words(text);\n  var colors = [];\n  words.forEach(function(word) {\n    var color = toHex(word);\n    if (color) colors.push(hexRgb(trimStart(color, '#'), {format: 'array'}));\n  });\n  return colors;\n}\n\nfunction mixColors(colors) {\n  var mixed = [0, 0, 0];\n  colors.forEach(function(value) {\n    for (var i = 0; i < 3; i++) mixed[i] += value[i];\n  });\n  return [mixed[0] / colors.length, mixed[1] / colors.length, mixed[2] / colors.length];\n}\n\nfunction generateColor(text) {\n  var mixed;\n  var colors = getColors(text);\n  if (colors.length > 0) mixed = mixColors(colors);\n  var b = 1;\n  var d = 0;\n  var f = 1;\n  if (text.length > 0) {\n    for (var i = 0; i < text.length; i++)\n      text[i].charCodeAt(0) > d && (d = text[i].charCodeAt(0)),\n        (f = parseInt(SEED / d)),\n        (b = (b + text[i].charCodeAt(0) * f * FACTOR) % SEED);\n  }\n  var hex = ((b * text.length) % SEED).toString(16);\n  hex = padEnd(hex, 6, hex);\n  var rgb = hexRgb(hex, {format: 'array'});\n  if (mixed)\n    return rgbHex(\n      TEXT_WEIGHT * rgb[0] + MIXED_WEIGHT * mixed[0],\n      TEXT_WEIGHT * rgb[1] + MIXED_WEIGHT * mixed[1],\n      TEXT_WEIGHT * rgb[2] + MIXED_WEIGHT * mixed[2]\n    );\n  return hex;\n}\n"],
  "mappings": "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",
  "names": ["require_lodash", "require_lodash"]
}
