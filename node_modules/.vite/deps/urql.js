import {
  __commonJS,
  __toESM
} from "./chunk-UV5CTPV7.js";

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error2(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a2) {
          return isArrayImpl(a2);
        }
        function typeName(value2) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type2 = hasToStringTag && value2[Symbol.toStringTag] || value2.constructor.name || "Object";
            return type2;
          }
        }
        function willCoercionThrow(value2) {
          {
            try {
              testStringCoercion(value2);
              return false;
            } catch (e3) {
              return true;
            }
          }
        }
        function testStringCoercion(value2) {
          return "" + value2;
        }
        function checkKeyStringCoercion(value2) {
          {
            if (willCoercionThrow(value2)) {
              error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value2));
              return testStringCoercion(value2);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type2) {
          return type2.displayName || "Context";
        }
        function getComponentNameFromType(type2) {
          if (type2 == null) {
            return null;
          }
          {
            if (typeof type2.tag === "number") {
              error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type2 === "function") {
            return type2.displayName || type2.name || null;
          }
          if (typeof type2 === "string") {
            return type2;
          }
          switch (type2) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type2;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type2;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type2, type2.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type2.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type2.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type2, key, ref, self, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type2,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type2, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i3 = 0; i3 < childrenLength; i3++) {
              childArray[i3] = arguments[i3 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type2 && type2.defaultProps) {
            var defaultProps = type2.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type2 === "function" ? type2.displayName || type2.name || "Unknown" : type2;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type2, key, ref, self, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i3 = 0; i3 < childrenLength; i3++) {
              childArray[i3] = arguments[i3 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type2 = typeof children;
          if (type2 === "undefined" || type2 === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type2) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c3) {
                return c3;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                    // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/"
                  ) : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i3 = 0; i3 < children.length; i3++) {
              child = children[i3];
              nextName = nextNamePrefix + getElementKey(child, i3);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type2 === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n2 = 0;
          mapChildren(children, function() {
            n2++;
          });
          return n2;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext2(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error3) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error3;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy2(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error2("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type2) {
          if (typeof type2 === "string" || typeof type2 === "function") {
            return true;
          }
          if (type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || enableDebugTracing || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type2 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type2 === "object" && type2 !== null) {
            if (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type2.$$typeof === REACT_MODULE_REFERENCE || type2.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type2, compare) {
          {
            if (!isValidElementType(type2)) {
              error2("memo: The first argument must be a component. Instead received: %s", type2 === null ? "null" : typeof type2);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type2,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type2.name && !type2.displayName) {
                  type2.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error2("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext2(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState2(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef2(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect2(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback2(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo2(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value2, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value2, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value2) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value2);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c3 = controlLines.length - 1;
              while (s2 >= 1 && c3 >= 0 && sampleLines[s2] !== controlLines[c3]) {
                c3--;
              }
              for (; s2 >= 1 && c3 >= 0; s2--, c3--) {
                if (sampleLines[s2] !== controlLines[c3]) {
                  if (s2 !== 1 || c3 !== 1) {
                    do {
                      s2--;
                      c3--;
                      if (c3 < 0 || sampleLines[s2] !== controlLines[c3]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c3 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
          if (type2 == null) {
            return "";
          }
          if (typeof type2 === "function") {
            {
              return describeNativeComponentFrame(type2, shouldConstruct(type2));
            }
          }
          if (typeof type2 === "string") {
            return describeBuiltInComponentFrame(type2);
          }
          switch (type2) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type2.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error2("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i3 = 0; i3 < node.length; i3++) {
              var child = node[i3];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type2 = element.type;
            if (type2 === null || type2 === void 0 || typeof type2 === "string") {
              return;
            }
            var propTypes;
            if (typeof type2 === "function") {
              propTypes = type2.propTypes;
            } else if (typeof type2 === "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type2.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type2.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type2);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type2);
              error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type2.getDefaultProps === "function" && !type2.getDefaultProps.isReactClassApproved) {
              error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i3 = 0; i3 < keys.length; i3++) {
              var key = keys[i3];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error2("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type2, props, children) {
          var validType = isValidElementType(type2);
          if (!validType) {
            var info = "";
            if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type2 === null) {
              typeString = "null";
            } else if (isArray(type2)) {
              typeString = "array";
            } else if (type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type2.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type2;
            }
            {
              error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i3 = 2; i3 < arguments.length; i3++) {
              validateChildKeys(arguments[i3], type2);
            }
          }
          if (type2 === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type2) {
          var validatedFactory = createElementWithValidation.bind(null, type2);
          validatedFactory.type = type2;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type2
                });
                return type2;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i3 = 2; i3 < arguments.length; i3++) {
            validateChildKeys(arguments[i3], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module && module[requireString];
              enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error2("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error3) {
              popActScope(prevActScopeDepth);
              throw error3;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error3) {
                    popActScope(prevActScopeDepth);
                    reject(error3);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error2("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error2("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error3) {
                reject(error3);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i3 = 0;
              try {
                for (; i3 < queue.length; i3++) {
                  var callback = queue[i3];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error3) {
                queue = queue.slice(i3 + 1);
                throw error3;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext2;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy2;
        exports.memo = memo;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback2;
        exports.useContext = useContext2;
        exports.useDebugValue = useDebugValue;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect2;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo2;
        exports.useReducer = useReducer;
        exports.useRef = useRef2;
        exports.useState = useState2;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  }
});

// node_modules/@0no-co/graphql.web/dist/graphql.web.mjs
var e = {
  NAME: "Name",
  DOCUMENT: "Document",
  OPERATION_DEFINITION: "OperationDefinition",
  VARIABLE_DEFINITION: "VariableDefinition",
  SELECTION_SET: "SelectionSet",
  FIELD: "Field",
  ARGUMENT: "Argument",
  FRAGMENT_SPREAD: "FragmentSpread",
  INLINE_FRAGMENT: "InlineFragment",
  FRAGMENT_DEFINITION: "FragmentDefinition",
  VARIABLE: "Variable",
  INT: "IntValue",
  FLOAT: "FloatValue",
  STRING: "StringValue",
  BOOLEAN: "BooleanValue",
  NULL: "NullValue",
  ENUM: "EnumValue",
  LIST: "ListValue",
  OBJECT: "ObjectValue",
  OBJECT_FIELD: "ObjectField",
  DIRECTIVE: "Directive",
  NAMED_TYPE: "NamedType",
  LIST_TYPE: "ListType",
  NON_NULL_TYPE: "NonNullType"
};
var GraphQLError = class extends Error {
  constructor(e3, r3, i3, n2, a2, t2, l4) {
    super(e3);
    this.name = "GraphQLError";
    this.message = e3;
    if (a2) {
      this.path = a2;
    }
    if (r3) {
      this.nodes = Array.isArray(r3) ? r3 : [r3];
    }
    if (i3) {
      this.source = i3;
    }
    if (n2) {
      this.positions = n2;
    }
    if (t2) {
      this.originalError = t2;
    }
    var o2 = l4;
    if (!o2 && t2) {
      var u3 = t2.extensions;
      if (u3 && "object" == typeof u3) {
        o2 = u3;
      }
    }
    this.extensions = o2 || {};
  }
  toJSON() {
    return {
      ...this,
      message: this.message
    };
  }
  toString() {
    return this.message;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLError";
  }
};
var i;
var n;
function error(e3) {
  return new GraphQLError(`Syntax Error: Unexpected token at ${n} in ${e3}`);
}
function advance(e3) {
  e3.lastIndex = n;
  if (e3.test(i)) {
    return i.slice(n, n = e3.lastIndex);
  }
}
var a = / +(?=[^\s])/y;
function blockString(e3) {
  var r3 = e3.split("\n");
  var i3 = "";
  var n2 = 0;
  var t2 = 0;
  var l4 = r3.length - 1;
  for (var o2 = 0; o2 < r3.length; o2++) {
    a.lastIndex = 0;
    if (a.test(r3[o2])) {
      if (o2 && (!n2 || a.lastIndex < n2)) {
        n2 = a.lastIndex;
      }
      t2 = t2 || o2;
      l4 = o2;
    }
  }
  for (var u3 = t2; u3 <= l4; u3++) {
    if (u3 !== t2) {
      i3 += "\n";
    }
    i3 += r3[u3].slice(n2).replace(/\\"""/g, '"""');
  }
  return i3;
}
function ignored() {
  for (var e3 = 0 | i.charCodeAt(n++); 9 === e3 || 10 === e3 || 13 === e3 || 32 === e3 || 35 === e3 || 44 === e3 || 65279 === e3; e3 = 0 | i.charCodeAt(n++)) {
    if (35 === e3) {
      while (10 !== (e3 = i.charCodeAt(n++)) && 13 !== e3) {
      }
    }
  }
  n--;
}
var t = /[_A-Za-z]\w*/y;
var l = new RegExp("(?:(null|true|false)|\\$(" + t.source + ')|(-?\\d+)((?:\\.\\d+)?[eE][+-]?\\d+|\\.\\d+)?|("""(?:"""|(?:[\\s\\S]*?[^\\\\])"""))|("(?:"|[^\\r\\n]*?[^\\\\]"))|(' + t.source + "))", "y");
var o = function(e3) {
  e3[e3.Const = 1] = "Const";
  e3[e3.Var = 2] = "Var";
  e3[e3.Int = 3] = "Int";
  e3[e3.Float = 4] = "Float";
  e3[e3.BlockString = 5] = "BlockString";
  e3[e3.String = 6] = "String";
  e3[e3.Enum = 7] = "Enum";
  return e3;
}(o || {});
var u = /\\/g;
function value(e3) {
  var r3;
  var a2;
  l.lastIndex = n;
  if (91 === i.charCodeAt(n)) {
    n++;
    ignored();
    var d4 = [];
    while (93 !== i.charCodeAt(n)) {
      d4.push(value(e3));
    }
    n++;
    ignored();
    return {
      kind: "ListValue",
      values: d4
    };
  } else if (123 === i.charCodeAt(n)) {
    n++;
    ignored();
    var v4 = [];
    while (125 !== i.charCodeAt(n)) {
      if (null == (r3 = advance(t))) {
        throw error("ObjectField");
      }
      ignored();
      if (58 !== i.charCodeAt(n++)) {
        throw error("ObjectField");
      }
      ignored();
      v4.push({
        kind: "ObjectField",
        name: {
          kind: "Name",
          value: r3
        },
        value: value(e3)
      });
    }
    n++;
    ignored();
    return {
      kind: "ObjectValue",
      fields: v4
    };
  } else if (null != (a2 = l.exec(i))) {
    n = l.lastIndex;
    ignored();
    if (null != (r3 = a2[o.Const])) {
      return "null" === r3 ? {
        kind: "NullValue"
      } : {
        kind: "BooleanValue",
        value: "true" === r3
      };
    } else if (null != (r3 = a2[o.Var])) {
      if (e3) {
        throw error("Variable");
      } else {
        return {
          kind: "Variable",
          name: {
            kind: "Name",
            value: r3
          }
        };
      }
    } else if (null != (r3 = a2[o.Int])) {
      var s2;
      if (null != (s2 = a2[o.Float])) {
        return {
          kind: "FloatValue",
          value: r3 + s2
        };
      } else {
        return {
          kind: "IntValue",
          value: r3
        };
      }
    } else if (null != (r3 = a2[o.BlockString])) {
      return {
        kind: "StringValue",
        value: blockString(r3.slice(3, -3)),
        block: true
      };
    } else if (null != (r3 = a2[o.String])) {
      return {
        kind: "StringValue",
        value: u.test(r3) ? JSON.parse(r3) : r3.slice(1, -1),
        block: false
      };
    } else if (null != (r3 = a2[o.Enum])) {
      return {
        kind: "EnumValue",
        value: r3
      };
    }
  }
  throw error("Value");
}
function arguments_(e3) {
  if (40 === i.charCodeAt(n)) {
    var r3 = [];
    n++;
    ignored();
    var a2;
    do {
      if (null == (a2 = advance(t))) {
        throw error("Argument");
      }
      ignored();
      if (58 !== i.charCodeAt(n++)) {
        throw error("Argument");
      }
      ignored();
      r3.push({
        kind: "Argument",
        name: {
          kind: "Name",
          value: a2
        },
        value: value(e3)
      });
    } while (41 !== i.charCodeAt(n));
    n++;
    ignored();
    return r3;
  }
}
function directives(e3) {
  if (64 === i.charCodeAt(n)) {
    var r3 = [];
    var a2;
    do {
      n++;
      if (null == (a2 = advance(t))) {
        throw error("Directive");
      }
      ignored();
      r3.push({
        kind: "Directive",
        name: {
          kind: "Name",
          value: a2
        },
        arguments: arguments_(e3)
      });
    } while (64 === i.charCodeAt(n));
    return r3;
  }
}
function type() {
  var e3;
  var r3 = 0;
  while (91 === i.charCodeAt(n)) {
    r3++;
    n++;
    ignored();
  }
  if (null == (e3 = advance(t))) {
    throw error("NamedType");
  }
  ignored();
  var a2 = {
    kind: "NamedType",
    name: {
      kind: "Name",
      value: e3
    }
  };
  do {
    if (33 === i.charCodeAt(n)) {
      n++;
      ignored();
      a2 = {
        kind: "NonNullType",
        type: a2
      };
    }
    if (r3) {
      if (93 !== i.charCodeAt(n++)) {
        throw error("NamedType");
      }
      ignored();
      a2 = {
        kind: "ListType",
        type: a2
      };
    }
  } while (r3--);
  return a2;
}
var d = new RegExp("(?:(\\.{3})|(" + t.source + "))", "y");
var v = function(e3) {
  e3[e3.Spread = 1] = "Spread";
  e3[e3.Name = 2] = "Name";
  return e3;
}(v || {});
function selectionSet() {
  var e3 = [];
  var r3;
  var a2;
  do {
    d.lastIndex = n;
    if (null != (a2 = d.exec(i))) {
      n = d.lastIndex;
      if (null != a2[v.Spread]) {
        ignored();
        var l4 = advance(t);
        if (null != l4 && "on" !== l4) {
          ignored();
          e3.push({
            kind: "FragmentSpread",
            name: {
              kind: "Name",
              value: l4
            },
            directives: directives(false)
          });
        } else {
          ignored();
          if ("on" === l4) {
            if (null == (l4 = advance(t))) {
              throw error("NamedType");
            }
            ignored();
          }
          var o2 = directives(false);
          if (123 !== i.charCodeAt(n++)) {
            throw error("InlineFragment");
          }
          ignored();
          e3.push({
            kind: "InlineFragment",
            typeCondition: l4 ? {
              kind: "NamedType",
              name: {
                kind: "Name",
                value: l4
              }
            } : void 0,
            directives: o2,
            selectionSet: selectionSet()
          });
        }
      } else if (null != (r3 = a2[v.Name])) {
        var u3 = void 0;
        ignored();
        if (58 === i.charCodeAt(n)) {
          n++;
          ignored();
          u3 = r3;
          if (null == (r3 = advance(t))) {
            throw error("Field");
          }
          ignored();
        }
        var s2 = arguments_(false);
        ignored();
        var c3 = directives(false);
        var f4 = void 0;
        if (123 === i.charCodeAt(n)) {
          n++;
          ignored();
          f4 = selectionSet();
        }
        e3.push({
          kind: "Field",
          alias: u3 ? {
            kind: "Name",
            value: u3
          } : void 0,
          name: {
            kind: "Name",
            value: r3
          },
          arguments: s2,
          directives: c3,
          selectionSet: f4
        });
      }
    } else {
      throw error("SelectionSet");
    }
  } while (125 !== i.charCodeAt(n));
  n++;
  ignored();
  return {
    kind: "SelectionSet",
    selections: e3
  };
}
function fragmentDefinition() {
  var e3;
  var r3;
  if (null == (e3 = advance(t))) {
    throw error("FragmentDefinition");
  }
  ignored();
  if ("on" !== advance(t)) {
    throw error("FragmentDefinition");
  }
  ignored();
  if (null == (r3 = advance(t))) {
    throw error("FragmentDefinition");
  }
  ignored();
  var a2 = directives(false);
  if (123 !== i.charCodeAt(n++)) {
    throw error("FragmentDefinition");
  }
  ignored();
  return {
    kind: "FragmentDefinition",
    name: {
      kind: "Name",
      value: e3
    },
    typeCondition: {
      kind: "NamedType",
      name: {
        kind: "Name",
        value: r3
      }
    },
    directives: a2,
    selectionSet: selectionSet()
  };
}
var s = /(?:query|mutation|subscription|fragment)/y;
function operationDefinition(e3) {
  var r3;
  var a2;
  var l4;
  if (e3) {
    ignored();
    r3 = advance(t);
    a2 = function variableDefinitions() {
      ignored();
      if (40 === i.charCodeAt(n)) {
        var e4 = [];
        n++;
        ignored();
        var r4;
        do {
          if (36 !== i.charCodeAt(n++)) {
            throw error("Variable");
          }
          if (null == (r4 = advance(t))) {
            throw error("Variable");
          }
          ignored();
          if (58 !== i.charCodeAt(n++)) {
            throw error("VariableDefinition");
          }
          ignored();
          var a3 = type();
          var l5 = void 0;
          if (61 === i.charCodeAt(n)) {
            n++;
            ignored();
            l5 = value(true);
          }
          ignored();
          e4.push({
            kind: "VariableDefinition",
            variable: {
              kind: "Variable",
              name: {
                kind: "Name",
                value: r4
              }
            },
            type: a3,
            defaultValue: l5,
            directives: directives(true)
          });
        } while (41 !== i.charCodeAt(n));
        n++;
        ignored();
        return e4;
      }
    }();
    l4 = directives(false);
  }
  if (123 === i.charCodeAt(n)) {
    n++;
    ignored();
    return {
      kind: "OperationDefinition",
      operation: e3 || "query",
      name: r3 ? {
        kind: "Name",
        value: r3
      } : void 0,
      variableDefinitions: a2,
      directives: l4,
      selectionSet: selectionSet()
    };
  }
}
function parse(e3, r3) {
  i = "string" == typeof e3.body ? e3.body : e3;
  n = 0;
  return function document() {
    var e4;
    var r4;
    ignored();
    var a2 = [];
    do {
      if ("fragment" === (e4 = advance(s))) {
        ignored();
        a2.push(fragmentDefinition());
      } else if (null != (r4 = operationDefinition(e4))) {
        a2.push(r4);
      } else {
        throw error("Document");
      }
    } while (n < i.length);
    return {
      kind: "Document",
      definitions: a2
    };
  }();
}
function mapJoin(e3, r3, i3) {
  var n2 = "";
  for (var a2 = 0; a2 < e3.length; a2++) {
    if (a2) {
      n2 += r3;
    }
    n2 += i3(e3[a2]);
  }
  return n2;
}
function printString(e3) {
  return JSON.stringify(e3);
}
function printBlockString(e3) {
  return '"""\n' + e3.replace(/"""/g, '\\"""') + '\n"""';
}
var f = "\n";
var m = {
  OperationDefinition(e3) {
    var r3 = e3.operation;
    if (e3.name) {
      r3 += " " + e3.name.value;
    }
    if (e3.variableDefinitions && e3.variableDefinitions.length) {
      if (!e3.name) {
        r3 += " ";
      }
      r3 += "(" + mapJoin(e3.variableDefinitions, ", ", m.VariableDefinition) + ")";
    }
    if (e3.directives && e3.directives.length) {
      r3 += " " + mapJoin(e3.directives, " ", m.Directive);
    }
    return "query" !== r3 ? r3 + " " + m.SelectionSet(e3.selectionSet) : m.SelectionSet(e3.selectionSet);
  },
  VariableDefinition(e3) {
    var r3 = m.Variable(e3.variable) + ": " + _print(e3.type);
    if (e3.defaultValue) {
      r3 += " = " + _print(e3.defaultValue);
    }
    if (e3.directives && e3.directives.length) {
      r3 += " " + mapJoin(e3.directives, " ", m.Directive);
    }
    return r3;
  },
  Field(e3) {
    var r3 = e3.alias ? e3.alias.value + ": " + e3.name.value : e3.name.value;
    if (e3.arguments && e3.arguments.length) {
      var i3 = mapJoin(e3.arguments, ", ", m.Argument);
      if (r3.length + i3.length + 2 > 80) {
        r3 += "(" + (f += "  ") + mapJoin(e3.arguments, f, m.Argument) + (f = f.slice(0, -2)) + ")";
      } else {
        r3 += "(" + i3 + ")";
      }
    }
    if (e3.directives && e3.directives.length) {
      r3 += " " + mapJoin(e3.directives, " ", m.Directive);
    }
    if (e3.selectionSet) {
      r3 += " " + m.SelectionSet(e3.selectionSet);
    }
    return r3;
  },
  StringValue(e3) {
    if (e3.block) {
      return printBlockString(e3.value).replace(/\n/g, f);
    } else {
      return printString(e3.value);
    }
  },
  BooleanValue: (e3) => "" + e3.value,
  NullValue: (e3) => "null",
  IntValue: (e3) => e3.value,
  FloatValue: (e3) => e3.value,
  EnumValue: (e3) => e3.value,
  Name: (e3) => e3.value,
  Variable: (e3) => "$" + e3.name.value,
  ListValue: (e3) => "[" + mapJoin(e3.values, ", ", _print) + "]",
  ObjectValue: (e3) => "{" + mapJoin(e3.fields, ", ", m.ObjectField) + "}",
  ObjectField: (e3) => e3.name.value + ": " + _print(e3.value),
  Document(e3) {
    if (!e3.definitions || !e3.definitions.length) {
      return "";
    }
    return mapJoin(e3.definitions, "\n\n", _print);
  },
  SelectionSet: (e3) => "{" + (f += "  ") + mapJoin(e3.selections, f, _print) + (f = f.slice(0, -2)) + "}",
  Argument: (e3) => e3.name.value + ": " + _print(e3.value),
  FragmentSpread(e3) {
    var r3 = "..." + e3.name.value;
    if (e3.directives && e3.directives.length) {
      r3 += " " + mapJoin(e3.directives, " ", m.Directive);
    }
    return r3;
  },
  InlineFragment(e3) {
    var r3 = "...";
    if (e3.typeCondition) {
      r3 += " on " + e3.typeCondition.name.value;
    }
    if (e3.directives && e3.directives.length) {
      r3 += " " + mapJoin(e3.directives, " ", m.Directive);
    }
    return r3 += " " + m.SelectionSet(e3.selectionSet);
  },
  FragmentDefinition(e3) {
    var r3 = "fragment " + e3.name.value;
    r3 += " on " + e3.typeCondition.name.value;
    if (e3.directives && e3.directives.length) {
      r3 += " " + mapJoin(e3.directives, " ", m.Directive);
    }
    return r3 + " " + m.SelectionSet(e3.selectionSet);
  },
  Directive(e3) {
    var r3 = "@" + e3.name.value;
    if (e3.arguments && e3.arguments.length) {
      r3 += "(" + mapJoin(e3.arguments, ", ", m.Argument) + ")";
    }
    return r3;
  },
  NamedType: (e3) => e3.name.value,
  ListType: (e3) => "[" + _print(e3.type) + "]",
  NonNullType: (e3) => _print(e3.type) + "!"
};
var _print = (e3) => m[e3.kind](e3);
function print(e3) {
  f = "\n";
  return m[e3.kind] ? m[e3.kind](e3) : "";
}

// node_modules/wonka/dist/wonka.mjs
var teardownPlaceholder = () => {
};
var e2 = teardownPlaceholder;
function start(e3) {
  return {
    tag: 0,
    0: e3
  };
}
function push(e3) {
  return {
    tag: 1,
    0: e3
  };
}
var asyncIteratorSymbol = () => "function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator";
var identity = (e3) => e3;
function filter(r3) {
  return (t2) => (i3) => {
    var a2 = e2;
    t2((e3) => {
      if (0 === e3) {
        i3(0);
      } else if (0 === e3.tag) {
        a2 = e3[0];
        i3(e3);
      } else if (!r3(e3[0])) {
        a2(0);
      } else {
        i3(e3);
      }
    });
  };
}
function map(e3) {
  return (r3) => (t2) => r3((r4) => {
    if (0 === r4 || 0 === r4.tag) {
      t2(r4);
    } else {
      t2(push(e3(r4[0])));
    }
  });
}
function mergeMap(r3) {
  return (t2) => (i3) => {
    var a2 = [];
    var f4 = e2;
    var n2 = false;
    var s2 = false;
    t2((t3) => {
      if (s2) {
      } else if (0 === t3) {
        s2 = true;
        if (!a2.length) {
          i3(0);
        }
      } else if (0 === t3.tag) {
        f4 = t3[0];
      } else {
        n2 = false;
        !function applyInnerSource(r4) {
          var t4 = e2;
          r4((e3) => {
            if (0 === e3) {
              if (a2.length) {
                var r5 = a2.indexOf(t4);
                if (r5 > -1) {
                  (a2 = a2.slice()).splice(r5, 1);
                }
                if (!a2.length) {
                  if (s2) {
                    i3(0);
                  } else if (!n2) {
                    n2 = true;
                    f4(0);
                  }
                }
              }
            } else if (0 === e3.tag) {
              a2.push(t4 = e3[0]);
              t4(0);
            } else if (a2.length) {
              i3(e3);
              t4(0);
            }
          });
        }(r3(t3[0]));
        if (!n2) {
          n2 = true;
          f4(0);
        }
      }
    });
    i3(start((e3) => {
      if (1 === e3) {
        if (!s2) {
          s2 = true;
          f4(1);
        }
        for (var r4 = 0, t3 = a2, i4 = a2.length; r4 < i4; r4++) {
          t3[r4](1);
        }
        a2.length = 0;
      } else {
        if (!s2 && !n2) {
          n2 = true;
          f4(0);
        } else {
          n2 = false;
        }
        for (var l4 = 0, u3 = a2, o2 = a2.length; l4 < o2; l4++) {
          u3[l4](0);
        }
      }
    }));
  };
}
function mergeAll(e3) {
  return mergeMap(identity)(e3);
}
function merge(e3) {
  return mergeAll(r(e3));
}
function onEnd(e3) {
  return (r3) => (t2) => {
    var i3 = false;
    r3((r4) => {
      if (i3) {
      } else if (0 === r4) {
        i3 = true;
        t2(0);
        e3();
      } else if (0 === r4.tag) {
        var a2 = r4[0];
        t2(start((r5) => {
          if (1 === r5) {
            i3 = true;
            a2(1);
            e3();
          } else {
            a2(r5);
          }
        }));
      } else {
        t2(r4);
      }
    });
  };
}
function onPush(e3) {
  return (r3) => (t2) => {
    var i3 = false;
    r3((r4) => {
      if (i3) {
      } else if (0 === r4) {
        i3 = true;
        t2(0);
      } else if (0 === r4.tag) {
        var a2 = r4[0];
        t2(start((e4) => {
          if (1 === e4) {
            i3 = true;
          }
          a2(e4);
        }));
      } else {
        e3(r4[0]);
        t2(r4);
      }
    });
  };
}
function onStart(e3) {
  return (r3) => (t2) => r3((r4) => {
    if (0 === r4) {
      t2(0);
    } else if (0 === r4.tag) {
      t2(r4);
      e3();
    } else {
      t2(r4);
    }
  });
}
function share(r3) {
  var t2 = [];
  var i3 = e2;
  var a2 = false;
  return (e3) => {
    t2.push(e3);
    if (1 === t2.length) {
      r3((e4) => {
        if (0 === e4) {
          for (var r4 = 0, f4 = t2, n2 = t2.length; r4 < n2; r4++) {
            f4[r4](0);
          }
          t2.length = 0;
        } else if (0 === e4.tag) {
          i3 = e4[0];
        } else {
          a2 = false;
          for (var s2 = 0, l4 = t2, u3 = t2.length; s2 < u3; s2++) {
            l4[s2](e4);
          }
        }
      });
    }
    e3(start((r4) => {
      if (1 === r4) {
        var f4 = t2.indexOf(e3);
        if (f4 > -1) {
          (t2 = t2.slice()).splice(f4, 1);
        }
        if (!t2.length) {
          i3(1);
        }
      } else if (!a2) {
        a2 = true;
        i3(0);
      }
    }));
  };
}
function switchMap(r3) {
  return (t2) => (i3) => {
    var a2 = e2;
    var f4 = e2;
    var n2 = false;
    var s2 = false;
    var l4 = false;
    var u3 = false;
    t2((t3) => {
      if (u3) {
      } else if (0 === t3) {
        u3 = true;
        if (!l4) {
          i3(0);
        }
      } else if (0 === t3.tag) {
        a2 = t3[0];
      } else {
        if (l4) {
          f4(1);
          f4 = e2;
        }
        if (!n2) {
          n2 = true;
          a2(0);
        } else {
          n2 = false;
        }
        !function applyInnerSource(e3) {
          l4 = true;
          e3((e4) => {
            if (!l4) {
            } else if (0 === e4) {
              l4 = false;
              if (u3) {
                i3(0);
              } else if (!n2) {
                n2 = true;
                a2(0);
              }
            } else if (0 === e4.tag) {
              s2 = false;
              (f4 = e4[0])(0);
            } else {
              i3(e4);
              if (!s2) {
                f4(0);
              } else {
                s2 = false;
              }
            }
          });
        }(r3(t3[0]));
      }
    });
    i3(start((e3) => {
      if (1 === e3) {
        if (!u3) {
          u3 = true;
          a2(1);
        }
        if (l4) {
          l4 = false;
          f4(1);
        }
      } else {
        if (!u3 && !n2) {
          n2 = true;
          a2(0);
        }
        if (l4 && !s2) {
          s2 = true;
          f4(0);
        }
      }
    }));
  };
}
function take(r3) {
  return (t2) => (i3) => {
    var a2 = e2;
    var f4 = false;
    var n2 = 0;
    t2((e3) => {
      if (f4) {
      } else if (0 === e3) {
        f4 = true;
        i3(0);
      } else if (0 === e3.tag) {
        if (r3 <= 0) {
          f4 = true;
          i3(0);
          e3[0](1);
        } else {
          a2 = e3[0];
        }
      } else if (n2++ < r3) {
        i3(e3);
        if (!f4 && n2 >= r3) {
          f4 = true;
          i3(0);
          a2(1);
        }
      } else {
        i3(e3);
      }
    });
    i3(start((e3) => {
      if (1 === e3 && !f4) {
        f4 = true;
        a2(1);
      } else if (0 === e3 && !f4 && n2 < r3) {
        a2(0);
      }
    }));
  };
}
function takeUntil(r3) {
  return (t2) => (i3) => {
    var a2 = e2;
    var f4 = e2;
    var n2 = false;
    t2((e3) => {
      if (n2) {
      } else if (0 === e3) {
        n2 = true;
        f4(1);
        i3(0);
      } else if (0 === e3.tag) {
        a2 = e3[0];
        r3((e4) => {
          if (0 === e4) {
          } else if (0 === e4.tag) {
            (f4 = e4[0])(0);
          } else {
            n2 = true;
            f4(1);
            a2(1);
            i3(0);
          }
        });
      } else {
        i3(e3);
      }
    });
    i3(start((e3) => {
      if (1 === e3 && !n2) {
        n2 = true;
        a2(1);
        f4(1);
      } else if (!n2) {
        a2(0);
      }
    }));
  };
}
function takeWhile(r3, t2) {
  return (i3) => (a2) => {
    var f4 = e2;
    var n2 = false;
    i3((e3) => {
      if (n2) {
      } else if (0 === e3) {
        n2 = true;
        a2(0);
      } else if (0 === e3.tag) {
        f4 = e3[0];
        a2(e3);
      } else if (!r3(e3[0])) {
        n2 = true;
        if (t2) {
          a2(e3);
        }
        a2(0);
        f4(1);
      } else {
        a2(e3);
      }
    });
  };
}
function lazy(e3) {
  return (r3) => e3()(r3);
}
function fromAsyncIterable(e3) {
  return (r3) => {
    var t2 = e3[asyncIteratorSymbol()] && e3[asyncIteratorSymbol()]() || e3;
    var i3 = false;
    var a2 = false;
    var f4 = false;
    var n2;
    r3(start(async (e4) => {
      if (1 === e4) {
        i3 = true;
        if (t2.return) {
          t2.return();
        }
      } else if (a2) {
        f4 = true;
      } else {
        for (f4 = a2 = true; f4 && !i3; ) {
          if ((n2 = await t2.next()).done) {
            i3 = true;
            if (t2.return) {
              await t2.return();
            }
            r3(0);
          } else {
            try {
              f4 = false;
              r3(push(n2.value));
            } catch (e5) {
              if (t2.throw) {
                if (i3 = !!(await t2.throw(e5)).done) {
                  r3(0);
                }
              } else {
                throw e5;
              }
            }
          }
        }
        a2 = false;
      }
    }));
  };
}
function fromIterable(e3) {
  if (e3[Symbol.asyncIterator]) {
    return fromAsyncIterable(e3);
  }
  return (r3) => {
    var t2 = e3[Symbol.iterator]();
    var i3 = false;
    var a2 = false;
    var f4 = false;
    var n2;
    r3(start((e4) => {
      if (1 === e4) {
        i3 = true;
        if (t2.return) {
          t2.return();
        }
      } else if (a2) {
        f4 = true;
      } else {
        for (f4 = a2 = true; f4 && !i3; ) {
          if ((n2 = t2.next()).done) {
            i3 = true;
            if (t2.return) {
              t2.return();
            }
            r3(0);
          } else {
            try {
              f4 = false;
              r3(push(n2.value));
            } catch (e5) {
              if (t2.throw) {
                if (i3 = !!t2.throw(e5).done) {
                  r3(0);
                }
              } else {
                throw e5;
              }
            }
          }
        }
        a2 = false;
      }
    }));
  };
}
var r = fromIterable;
function fromValue(e3) {
  return (r3) => {
    var t2 = false;
    r3(start((i3) => {
      if (1 === i3) {
        t2 = true;
      } else if (!t2) {
        t2 = true;
        r3(push(e3));
        r3(0);
      }
    }));
  };
}
function make(e3) {
  return (r3) => {
    var t2 = false;
    var i3 = e3({
      next(e4) {
        if (!t2) {
          r3(push(e4));
        }
      },
      complete() {
        if (!t2) {
          t2 = true;
          r3(0);
        }
      }
    });
    r3(start((e4) => {
      if (1 === e4 && !t2) {
        t2 = true;
        i3();
      }
    }));
  };
}
function makeSubject() {
  var e3;
  var r3;
  return {
    source: share(make((t2) => {
      e3 = t2.next;
      r3 = t2.complete;
      return teardownPlaceholder;
    })),
    next(r4) {
      if (e3) {
        e3(r4);
      }
    },
    complete() {
      if (r3) {
        r3();
      }
    }
  };
}
function fromPromise(e3) {
  return make((r3) => {
    e3.then((e4) => {
      Promise.resolve(e4).then(() => {
        r3.next(e4);
        r3.complete();
      });
    });
    return teardownPlaceholder;
  });
}
function subscribe(r3) {
  return (t2) => {
    var i3 = e2;
    var a2 = false;
    t2((e3) => {
      if (0 === e3) {
        a2 = true;
      } else if (0 === e3.tag) {
        (i3 = e3[0])(0);
      } else if (!a2) {
        r3(e3[0]);
        i3(0);
      }
    });
    return {
      unsubscribe() {
        if (!a2) {
          a2 = true;
          i3(1);
        }
      }
    };
  };
}
function publish(e3) {
  subscribe((e4) => {
  })(e3);
}
function toPromise(r3) {
  return new Promise((t2) => {
    var i3 = e2;
    var a2;
    r3((e3) => {
      if (0 === e3) {
        Promise.resolve(a2).then(t2);
      } else if (0 === e3.tag) {
        (i3 = e3[0])(0);
      } else {
        a2 = e3[0];
        i3(0);
      }
    });
  });
}

// node_modules/@urql/core/dist/urql-core-chunk.mjs
var rehydrateGraphQlError = (r3) => {
  if (r3 && r3.message && (r3.extensions || "GraphQLError" === r3.name)) {
    return r3;
  } else if ("object" == typeof r3 && r3.message) {
    return new GraphQLError(r3.message, r3.nodes, r3.source, r3.positions, r3.path, r3, r3.extensions || {});
  } else {
    return new GraphQLError(r3);
  }
};
var CombinedError = class extends Error {
  constructor(e3) {
    var r3 = (e3.graphQLErrors || []).map(rehydrateGraphQlError);
    var t2 = ((e4, r4) => {
      var t3 = "";
      if (e4) {
        return `[Network] ${e4.message}`;
      }
      if (r4) {
        for (var a2 of r4) {
          if (t3) {
            t3 += "\n";
          }
          t3 += `[GraphQL] ${a2.message}`;
        }
      }
      return t3;
    })(e3.networkError, r3);
    super(t2);
    this.name = "CombinedError";
    this.message = t2;
    this.graphQLErrors = r3;
    this.networkError = e3.networkError;
    this.response = e3.response;
  }
  toString() {
    return this.message;
  }
};
var phash = (e3, r3) => {
  var t2 = 0 | (r3 || 5381);
  for (var a2 = 0, o2 = 0 | e3.length; a2 < o2; a2++) {
    t2 = (t2 << 5) + t2 + e3.charCodeAt(a2);
  }
  return t2;
};
var i2 = /* @__PURE__ */ new Set();
var f2 = /* @__PURE__ */ new WeakMap();
var stringify = (e3) => {
  if (null === e3 || i2.has(e3)) {
    return "null";
  } else if ("object" != typeof e3) {
    return JSON.stringify(e3) || "";
  } else if (e3.toJSON) {
    return stringify(e3.toJSON());
  } else if (Array.isArray(e3)) {
    var r3 = "[";
    for (var t2 of e3) {
      if (r3.length > 1) {
        r3 += ",";
      }
      r3 += stringify(t2) || "null";
    }
    return r3 += "]";
  } else if (l2 !== NoopConstructor && e3 instanceof l2 || c !== NoopConstructor && e3 instanceof c) {
    return "null";
  }
  var a2 = Object.keys(e3).sort();
  if (!a2.length && e3.constructor && Object.getPrototypeOf(e3).constructor !== Object.prototype.constructor) {
    var o2 = f2.get(e3) || Math.random().toString(36).slice(2);
    f2.set(e3, o2);
    return stringify({
      __key: o2
    });
  }
  i2.add(e3);
  var n2 = "{";
  for (var s2 of a2) {
    var d4 = stringify(e3[s2]);
    if (d4) {
      if (n2.length > 1) {
        n2 += ",";
      }
      n2 += stringify(s2) + ":" + d4;
    }
  }
  i2.delete(e3);
  return n2 += "}";
};
var extract = (e3, r3, t2) => {
  if (null == t2 || "object" != typeof t2 || t2.toJSON || i2.has(t2)) {
  } else if (Array.isArray(t2)) {
    for (var a2 = 0, o2 = t2.length; a2 < o2; a2++) {
      extract(e3, `${r3}.${a2}`, t2[a2]);
    }
  } else if (t2 instanceof l2 || t2 instanceof c) {
    e3.set(r3, t2);
  } else {
    i2.add(t2);
    for (var n2 of Object.keys(t2)) {
      extract(e3, `${r3}.${n2}`, t2[n2]);
    }
  }
};
var stringifyVariables = (e3) => {
  i2.clear();
  return stringify(e3);
};
var NoopConstructor = class {
};
var l2 = "undefined" != typeof File ? File : NoopConstructor;
var c = "undefined" != typeof Blob ? Blob : NoopConstructor;
var d2 = /("{3}[\s\S]*"{3}|"(?:\\.|[^"])*")/g;
var v2 = /(?:#[^\n\r]+)?(?:[\r\n]+|$)/g;
var replaceOutsideStrings = (e3, r3) => r3 % 2 == 0 ? e3.replace(v2, "\n") : e3;
var sanitizeDocument = (e3) => e3.split(d2).map(replaceOutsideStrings).join("").trim();
var p = /* @__PURE__ */ new Map();
var u2 = /* @__PURE__ */ new Map();
var stringifyDocument = (e3) => {
  var t2;
  if ("string" == typeof e3) {
    t2 = sanitizeDocument(e3);
  } else if (e3.loc && u2.get(e3.__key) === e3) {
    t2 = e3.loc.source.body;
  } else {
    t2 = p.get(e3) || sanitizeDocument(print(e3));
    p.set(e3, t2);
  }
  if ("string" != typeof e3 && !e3.loc) {
    e3.loc = {
      start: 0,
      end: t2.length,
      source: {
        body: t2,
        name: "gql",
        locationOffset: {
          line: 1,
          column: 1
        }
      }
    };
  }
  return t2;
};
var hashDocument = (e3) => {
  var r3 = phash(stringifyDocument(e3));
  if (e3.definitions) {
    var t2 = getOperationName(e3);
    if (t2) {
      r3 = phash(`
# ${t2}`, r3);
    }
  }
  return r3;
};
var keyDocument = (e3) => {
  var r3;
  var a2;
  if ("string" == typeof e3) {
    r3 = hashDocument(e3);
    a2 = u2.get(r3) || parse(e3, {
      noLocation: true
    });
  } else {
    r3 = e3.__key || hashDocument(e3);
    a2 = u2.get(r3) || e3;
  }
  if (!a2.loc) {
    stringifyDocument(a2);
  }
  a2.__key = r3;
  u2.set(r3, a2);
  return a2;
};
var createRequest = (e3, r3, t2) => {
  var a2 = r3 || {};
  var o2 = keyDocument(e3);
  var n2 = stringifyVariables(a2);
  var s2 = o2.__key;
  if ("{}" !== n2) {
    s2 = phash(n2, s2);
  }
  return {
    key: s2,
    query: o2,
    variables: a2,
    extensions: t2
  };
};
var getOperationName = (e3) => {
  for (var r3 of e3.definitions) {
    if (r3.kind === e.OPERATION_DEFINITION) {
      return r3.name ? r3.name.value : void 0;
    }
  }
};
var getOperationType = (e3) => {
  for (var r3 of e3.definitions) {
    if (r3.kind === e.OPERATION_DEFINITION) {
      return r3.operation;
    }
  }
};
var makeResult = (e3, r3, t2) => {
  if (!("data" in r3 || "errors" in r3 && Array.isArray(r3.errors))) {
    throw new Error("No Content");
  }
  var a2 = "subscription" === e3.kind;
  return {
    operation: e3,
    data: r3.data,
    error: Array.isArray(r3.errors) ? new CombinedError({
      graphQLErrors: r3.errors,
      response: t2
    }) : void 0,
    extensions: r3.extensions ? {
      ...r3.extensions
    } : void 0,
    hasNext: null == r3.hasNext ? a2 : r3.hasNext,
    stale: false
  };
};
var deepMerge = (e3, r3) => {
  if ("object" == typeof e3 && null != e3) {
    if (!e3.constructor || e3.constructor === Object || Array.isArray(e3)) {
      e3 = Array.isArray(e3) ? [...e3] : {
        ...e3
      };
      for (var t2 of Object.keys(r3)) {
        e3[t2] = deepMerge(e3[t2], r3[t2]);
      }
      return e3;
    }
  }
  return r3;
};
var mergeResultPatch = (e3, r3, t2, a2) => {
  var o2 = e3.error ? e3.error.graphQLErrors : [];
  var n2 = !!e3.extensions || !!(r3.payload || r3).extensions;
  var s2 = {
    ...e3.extensions,
    ...(r3.payload || r3).extensions
  };
  var i3 = r3.incremental;
  if ("path" in r3) {
    i3 = [r3];
  }
  var f4 = {
    data: e3.data
  };
  if (i3) {
    var _loop = function(e4) {
      if (Array.isArray(e4.errors)) {
        o2.push(...e4.errors);
      }
      if (e4.extensions) {
        Object.assign(s2, e4.extensions);
        n2 = true;
      }
      var r4 = "data";
      var t3 = f4;
      var i4 = [];
      if (e4.path) {
        i4 = e4.path;
      } else if (a2) {
        var l5 = a2.find((r5) => r5.id === e4.id);
        if (e4.subPath) {
          i4 = [...l5.path, ...e4.subPath];
        } else {
          i4 = l5.path;
        }
      }
      for (var c3 = 0, d4 = i4.length; c3 < d4; r4 = i4[c3++]) {
        t3 = t3[r4] = Array.isArray(t3[r4]) ? [...t3[r4]] : {
          ...t3[r4]
        };
      }
      if (e4.items) {
        var v4 = +r4 >= 0 ? r4 : 0;
        for (var p3 = 0, u3 = e4.items.length; p3 < u3; p3++) {
          t3[v4 + p3] = deepMerge(t3[v4 + p3], e4.items[p3]);
        }
      } else if (void 0 !== e4.data) {
        t3[r4] = deepMerge(t3[r4], e4.data);
      }
    };
    for (var l4 of i3) {
      _loop(l4);
    }
  } else {
    f4.data = (r3.payload || r3).data || e3.data;
    o2 = r3.errors || r3.payload && r3.payload.errors || o2;
  }
  return {
    operation: e3.operation,
    data: f4.data,
    error: o2.length ? new CombinedError({
      graphQLErrors: o2,
      response: t2
    }) : void 0,
    extensions: n2 ? s2 : void 0,
    hasNext: null != r3.hasNext ? r3.hasNext : e3.hasNext,
    stale: false
  };
};
var makeErrorResult = (e3, r3, t2) => ({
  operation: e3,
  data: void 0,
  error: new CombinedError({
    networkError: r3,
    response: t2
  }),
  extensions: void 0,
  hasNext: false,
  stale: false
});
function makeFetchBody(e3) {
  var r3 = {
    query: void 0,
    documentId: void 0,
    operationName: getOperationName(e3.query),
    variables: e3.variables || void 0,
    extensions: e3.extensions
  };
  if ("documentId" in e3.query && e3.query.documentId && (!e3.query.definitions || !e3.query.definitions.length)) {
    r3.documentId = e3.query.documentId;
  } else if (!e3.extensions || !e3.extensions.persistedQuery || e3.extensions.persistedQuery.miss) {
    r3.query = stringifyDocument(e3.query);
  }
  return r3;
}
var makeFetchURL = (e3, r3) => {
  var t2 = "query" === e3.kind && e3.context.preferGetMethod;
  if (!t2 || !r3) {
    return e3.context.url;
  }
  var a2 = splitOutSearchParams(e3.context.url);
  for (var o2 in r3) {
    var n2 = r3[o2];
    if (n2) {
      a2[1].set(o2, "object" == typeof n2 ? stringifyVariables(n2) : n2);
    }
  }
  var s2 = a2.join("?");
  if (s2.length > 2047 && "force" !== t2) {
    e3.context.preferGetMethod = false;
    return e3.context.url;
  }
  return s2;
};
var splitOutSearchParams = (e3) => {
  var r3 = e3.indexOf("?");
  return r3 > -1 ? [e3.slice(0, r3), new URLSearchParams(e3.slice(r3 + 1))] : [e3, new URLSearchParams()];
};
var serializeBody = (e3, r3) => {
  if (r3 && !("query" === e3.kind && !!e3.context.preferGetMethod)) {
    var t2 = stringifyVariables(r3);
    var a2 = ((e4) => {
      var r4 = /* @__PURE__ */ new Map();
      if (l2 !== NoopConstructor || c !== NoopConstructor) {
        i2.clear();
        extract(r4, "variables", e4);
      }
      return r4;
    })(r3.variables);
    if (a2.size) {
      var o2 = new FormData();
      o2.append("operations", t2);
      o2.append("map", stringifyVariables({
        ...[...a2.keys()].map((e4) => [e4])
      }));
      var n2 = 0;
      for (var s2 of a2.values()) {
        o2.append("" + n2++, s2);
      }
      return o2;
    }
    return t2;
  }
};
var makeFetchOptions = (e3, r3) => {
  var t2 = {
    accept: "subscription" === e3.kind ? "text/event-stream, multipart/mixed" : "application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed"
  };
  var a2 = ("function" == typeof e3.context.fetchOptions ? e3.context.fetchOptions() : e3.context.fetchOptions) || {};
  if (a2.headers) {
    if (((e4) => "has" in e4 && !Object.keys(e4).length)(a2.headers)) {
      a2.headers.forEach((e4, r4) => {
        t2[r4] = e4;
      });
    } else if (Array.isArray(a2.headers)) {
      a2.headers.forEach((e4, r4) => {
        if (Array.isArray(e4)) {
          if (t2[e4[0]]) {
            t2[e4[0]] = `${t2[e4[0]]},${e4[1]}`;
          } else {
            t2[e4[0]] = e4[1];
          }
        } else {
          t2[r4] = e4;
        }
      });
    } else {
      for (var o2 in a2.headers) {
        t2[o2.toLowerCase()] = a2.headers[o2];
      }
    }
  }
  var n2 = serializeBody(e3, r3);
  if ("string" == typeof n2 && !t2["content-type"]) {
    t2["content-type"] = "application/json";
  }
  return {
    ...a2,
    method: n2 ? "POST" : "GET",
    body: n2,
    headers: t2
  };
};
var y = "undefined" != typeof TextDecoder ? new TextDecoder() : null;
var h = /boundary="?([^=";]+)"?/i;
var m2 = /data: ?([^\n]+)/;
var toString = (e3) => "Buffer" === e3.constructor.name ? e3.toString() : y.decode(e3);
async function* streamBody(e3) {
  if (e3.body[Symbol.asyncIterator]) {
    for await (var r3 of e3.body) {
      yield toString(r3);
    }
  } else {
    var t2 = e3.body.getReader();
    var a2;
    try {
      while (!(a2 = await t2.read()).done) {
        yield toString(a2.value);
      }
    } finally {
      t2.cancel();
    }
  }
}
async function* split(e3, r3) {
  var t2 = "";
  var a2;
  for await (var o2 of e3) {
    t2 += o2;
    while ((a2 = t2.indexOf(r3)) > -1) {
      yield t2.slice(0, a2);
      t2 = t2.slice(a2 + r3.length);
    }
  }
}
async function* fetchOperation(e3, r3, t2) {
  var a2 = true;
  var o2 = null;
  var n2;
  try {
    yield await Promise.resolve();
    var s2 = (n2 = await (e3.context.fetch || fetch)(r3, t2)).headers.get("Content-Type") || "";
    var i3;
    if (/multipart\/mixed/i.test(s2)) {
      i3 = async function* parseMultipartMixed(e4, r4) {
        var t3 = e4.match(h);
        var a3 = "--" + (t3 ? t3[1] : "-");
        var o3 = true;
        var n3;
        for await (var s3 of split(streamBody(r4), "\r\n" + a3)) {
          if (o3) {
            o3 = false;
            var i4 = s3.indexOf(a3);
            if (i4 > -1) {
              s3 = s3.slice(i4 + a3.length);
            } else {
              continue;
            }
          }
          try {
            yield n3 = JSON.parse(s3.slice(s3.indexOf("\r\n\r\n") + 4));
          } catch (e5) {
            if (!n3) {
              throw e5;
            }
          }
          if (n3 && false === n3.hasNext) {
            break;
          }
        }
        if (n3 && false !== n3.hasNext) {
          yield {
            hasNext: false
          };
        }
      }(s2, n2);
    } else if (/text\/event-stream/i.test(s2)) {
      i3 = async function* parseEventStream(e4) {
        var r4;
        for await (var t3 of split(streamBody(e4), "\n\n")) {
          var a3 = t3.match(m2);
          if (a3) {
            var o3 = a3[1];
            try {
              yield r4 = JSON.parse(o3);
            } catch (e5) {
              if (!r4) {
                throw e5;
              }
            }
            if (r4 && false === r4.hasNext) {
              break;
            }
          }
        }
        if (r4 && false !== r4.hasNext) {
          yield {
            hasNext: false
          };
        }
      }(n2);
    } else if (!/text\//i.test(s2)) {
      i3 = async function* parseJSON(e4) {
        yield JSON.parse(await e4.text());
      }(n2);
    } else {
      i3 = async function* parseMaybeJSON(e4) {
        var r4 = await e4.text();
        try {
          var t3 = JSON.parse(r4);
          if (true) {
            console.warn('Found response with content-type "text/plain" but it had a valid "application/json" response.');
          }
          yield t3;
        } catch (e5) {
          throw new Error(r4);
        }
      }(n2);
    }
    var f4;
    for await (var l4 of i3) {
      if (l4.pending && !o2) {
        f4 = l4.pending;
      } else if (l4.pending) {
        f4 = [...f4, ...l4.pending];
      }
      o2 = o2 ? mergeResultPatch(o2, l4, n2, f4) : makeResult(e3, l4, n2);
      a2 = false;
      yield o2;
      a2 = true;
    }
    if (!o2) {
      yield o2 = makeResult(e3, {}, n2);
    }
  } catch (r4) {
    if (!a2) {
      throw r4;
    }
    yield makeErrorResult(e3, n2 && (n2.status < 200 || n2.status >= 300) && n2.statusText ? new Error(n2.statusText) : r4, n2);
  }
}
function makeFetchSource(e3, r3, t2) {
  var a2;
  if ("undefined" != typeof AbortController) {
    t2.signal = (a2 = new AbortController()).signal;
  }
  return onEnd(() => {
    if (a2) {
      a2.abort();
    }
  })(filter((e4) => !!e4)(fromAsyncIterable(fetchOperation(e3, r3, t2))));
}

// node_modules/@urql/core/dist/urql-core.mjs
var collectTypes = (e3, r3) => {
  if (Array.isArray(e3)) {
    for (var t2 of e3) {
      collectTypes(t2, r3);
    }
  } else if ("object" == typeof e3 && null !== e3) {
    for (var n2 in e3) {
      if ("__typename" === n2 && "string" == typeof e3[n2]) {
        r3.add(e3[n2]);
      } else {
        collectTypes(e3[n2], r3);
      }
    }
  }
  return r3;
};
var formatNode = (r3) => {
  if ("definitions" in r3) {
    var t2 = [];
    for (var n2 of r3.definitions) {
      var a2 = formatNode(n2);
      t2.push(a2);
    }
    return {
      ...r3,
      definitions: t2
    };
  }
  if ("directives" in r3 && r3.directives && r3.directives.length) {
    var o2 = [];
    var i3 = {};
    for (var s2 of r3.directives) {
      var c3 = s2.name.value;
      if ("_" !== c3[0]) {
        o2.push(s2);
      } else {
        c3 = c3.slice(1);
      }
      i3[c3] = s2;
    }
    r3 = {
      ...r3,
      directives: o2,
      _directives: i3
    };
  }
  if ("selectionSet" in r3) {
    var u3 = [];
    var p3 = r3.kind === e.OPERATION_DEFINITION;
    if (r3.selectionSet) {
      for (var d4 of r3.selectionSet.selections || []) {
        p3 = p3 || d4.kind === e.FIELD && "__typename" === d4.name.value && !d4.alias;
        var v4 = formatNode(d4);
        u3.push(v4);
      }
      if (!p3) {
        u3.push({
          kind: e.FIELD,
          name: {
            kind: e.NAME,
            value: "__typename"
          },
          _generated: true
        });
      }
      return {
        ...r3,
        selectionSet: {
          ...r3.selectionSet,
          selections: u3
        }
      };
    }
  }
  return r3;
};
var I = /* @__PURE__ */ new Map();
var formatDocument = (e3) => {
  var t2 = keyDocument(e3);
  var n2 = I.get(t2.__key);
  if (!n2) {
    I.set(t2.__key, n2 = formatNode(t2));
    Object.defineProperty(n2, "__key", {
      value: t2.__key,
      enumerable: false
    });
  }
  return n2;
};
function withPromise(e3) {
  var source$ = (r3) => e3(r3);
  source$.toPromise = () => toPromise(take(1)(filter((e4) => !e4.stale && !e4.hasNext)(source$)));
  source$.then = (e4, r3) => source$.toPromise().then(e4, r3);
  source$.subscribe = (e4) => subscribe(e4)(source$);
  return source$;
}
function makeOperation(e3, r3, t2) {
  return {
    ...r3,
    kind: e3,
    context: r3.context ? {
      ...r3.context,
      ...t2
    } : t2 || r3.context
  };
}
var addMetadata = (e3, r3) => makeOperation(e3.kind, e3, {
  meta: {
    ...e3.context.meta,
    ...r3
  }
});
var noop = () => {
};
function gql(n2) {
  var a2 = /* @__PURE__ */ new Map();
  var o2 = [];
  var i3 = [];
  var s2 = Array.isArray(n2) ? n2[0] : n2 || "";
  for (var c3 = 1; c3 < arguments.length; c3++) {
    var u3 = arguments[c3];
    if (u3 && u3.definitions) {
      i3.push(u3);
    } else {
      s2 += u3;
    }
    s2 += arguments[0][c3];
  }
  i3.unshift(keyDocument(s2));
  for (var p3 of i3) {
    for (var d4 of p3.definitions) {
      if (d4.kind === e.FRAGMENT_DEFINITION) {
        var v4 = d4.name.value;
        var f4 = stringifyDocument(d4);
        if (!a2.has(v4)) {
          a2.set(v4, f4);
          o2.push(d4);
        } else if (a2.get(v4) !== f4) {
          console.warn("[WARNING: Duplicate Fragment] A fragment with name `" + v4 + "` already exists in this document.\nWhile fragment names may not be unique across your source, each name must be unique per document.");
        }
      } else {
        o2.push(d4);
      }
    }
  }
  return keyDocument({
    kind: e.DOCUMENT,
    definitions: o2
  });
}
var shouldSkip = ({ kind: e3 }) => "mutation" !== e3 && "query" !== e3;
var mapTypeNames = (e3) => {
  var r3 = formatDocument(e3.query);
  if (r3 !== e3.query) {
    var t2 = makeOperation(e3.kind, e3);
    t2.query = r3;
    return t2;
  } else {
    return e3;
  }
};
var cacheExchange = ({ forward: e3, client: r3, dispatchDebug: t2 }) => {
  var a2 = /* @__PURE__ */ new Map();
  var o2 = /* @__PURE__ */ new Map();
  var isOperationCached = (e4) => "query" === e4.kind && "network-only" !== e4.context.requestPolicy && ("cache-only" === e4.context.requestPolicy || a2.has(e4.key));
  return (i3) => {
    var s2 = map((e4) => {
      var o3 = a2.get(e4.key);
      t2({
        operation: e4,
        ...o3 ? {
          type: "cacheHit",
          message: "The result was successfully retried from the cache"
        } : {
          type: "cacheMiss",
          message: "The result could not be retrieved from the cache"
        },
        source: "cacheExchange"
      });
      var i4 = o3 || makeResult(e4, {
        data: null
      });
      i4 = {
        ...i4,
        operation: true ? addMetadata(e4, {
          cacheOutcome: o3 ? "hit" : "miss"
        }) : e4
      };
      if ("cache-and-network" === e4.context.requestPolicy) {
        i4.stale = true;
        reexecuteOperation(r3, e4);
      }
      return i4;
    })(filter((e4) => !shouldSkip(e4) && isOperationCached(e4))(i3));
    var c3 = onPush((e4) => {
      var { operation: n2 } = e4;
      if (!n2) {
        return;
      }
      var i4 = n2.context.additionalTypenames || [];
      if ("subscription" !== e4.operation.kind) {
        i4 = ((e5) => [...collectTypes(e5, /* @__PURE__ */ new Set())])(e4.data).concat(i4);
      }
      if ("mutation" === e4.operation.kind || "subscription" === e4.operation.kind) {
        var s3 = /* @__PURE__ */ new Set();
        t2({
          type: "cacheInvalidation",
          message: `The following typenames have been invalidated: ${i4}`,
          operation: n2,
          data: {
            typenames: i4,
            response: e4
          },
          source: "cacheExchange"
        });
        for (var c4 = 0; c4 < i4.length; c4++) {
          var u3 = i4[c4];
          var p3 = o2.get(u3);
          if (!p3) {
            o2.set(u3, p3 = /* @__PURE__ */ new Set());
          }
          for (var d4 of p3.values()) {
            s3.add(d4);
          }
          p3.clear();
        }
        for (var v4 of s3.values()) {
          if (a2.has(v4)) {
            n2 = a2.get(v4).operation;
            a2.delete(v4);
            reexecuteOperation(r3, n2);
          }
        }
      } else if ("query" === n2.kind && e4.data) {
        a2.set(n2.key, e4);
        for (var f4 = 0; f4 < i4.length; f4++) {
          var l4 = i4[f4];
          var h2 = o2.get(l4);
          if (!h2) {
            o2.set(l4, h2 = /* @__PURE__ */ new Set());
          }
          h2.add(n2.key);
        }
      }
    })(e3(filter((e4) => "query" !== e4.kind || "cache-only" !== e4.context.requestPolicy)(map((e4) => true ? addMetadata(e4, {
      cacheOutcome: "miss"
    }) : e4)(merge([map(mapTypeNames)(filter((e4) => !shouldSkip(e4) && !isOperationCached(e4))(i3)), filter((e4) => shouldSkip(e4))(i3)])))));
    return merge([s2, c3]);
  };
};
var reexecuteOperation = (e3, r3) => e3.reexecuteOperation(makeOperation(r3.kind, r3, {
  requestPolicy: "network-only"
}));
var T = /* @__PURE__ */ new Set();
var ssrExchange = (e3 = {}) => {
  var r3 = !!e3.staleWhileRevalidate;
  var t2 = !!e3.includeExtensions;
  var n2 = {};
  var o2 = [];
  var invalidate = (e4) => {
    o2.push(e4.operation.key);
    if (1 === o2.length) {
      Promise.resolve().then(() => {
        var e5;
        while (e5 = o2.shift()) {
          n2[e5] = null;
        }
      });
    }
  };
  var ssr = ({ client: o3, forward: i3 }) => (s2) => {
    var c3 = e3 && "boolean" == typeof e3.isClient ? !!e3.isClient : !o3.suspense;
    var u3 = i3(map(mapTypeNames)(filter((e4) => "teardown" === e4.kind || !n2[e4.key] || !!n2[e4.key].hasNext || "network-only" === e4.context.requestPolicy)(s2)));
    var p3 = map((e4) => {
      var i4 = ((e5, r4, t3) => ({
        operation: e5,
        data: r4.data ? JSON.parse(r4.data) : void 0,
        extensions: t3 && r4.extensions ? JSON.parse(r4.extensions) : void 0,
        error: r4.error ? new CombinedError({
          networkError: r4.error.networkError ? new Error(r4.error.networkError) : void 0,
          graphQLErrors: r4.error.graphQLErrors
        }) : void 0,
        stale: false,
        hasNext: !!r4.hasNext
      }))(e4, n2[e4.key], t2);
      if (r3 && !T.has(e4.key)) {
        i4.stale = true;
        T.add(e4.key);
        reexecuteOperation(o3, e4);
      }
      return {
        ...i4,
        operation: true ? addMetadata(e4, {
          cacheOutcome: "hit"
        }) : e4
      };
    })(filter((e4) => "teardown" !== e4.kind && !!n2[e4.key] && "network-only" !== e4.context.requestPolicy)(s2));
    if (!c3) {
      u3 = onPush((e4) => {
        var { operation: r4 } = e4;
        if ("mutation" !== r4.kind) {
          var a2 = ((e5, r5) => {
            var t3 = {
              data: JSON.stringify(e5.data),
              hasNext: e5.hasNext
            };
            if (void 0 !== e5.data) {
              t3.data = JSON.stringify(e5.data);
            }
            if (r5 && void 0 !== e5.extensions) {
              t3.extensions = JSON.stringify(e5.extensions);
            }
            if (e5.error) {
              t3.error = {
                graphQLErrors: e5.error.graphQLErrors.map((e6) => {
                  if (!e6.path && !e6.extensions) {
                    return e6.message;
                  }
                  return {
                    message: e6.message,
                    path: e6.path,
                    extensions: e6.extensions
                  };
                })
              };
              if (e5.error.networkError) {
                t3.error.networkError = "" + e5.error.networkError;
              }
            }
            return t3;
          })(e4, t2);
          n2[r4.key] = a2;
        }
      })(u3);
    } else {
      p3 = onPush(invalidate)(p3);
    }
    return merge([u3, p3]);
  };
  ssr.restoreData = (e4) => {
    for (var r4 in e4) {
      if (null !== n2[r4]) {
        n2[r4] = e4[r4];
      }
    }
  };
  ssr.extractData = () => {
    var e4 = {};
    for (var r4 in n2) {
      if (null != n2[r4]) {
        e4[r4] = n2[r4];
      }
    }
    return e4;
  };
  if (e3 && e3.initialState) {
    ssr.restoreData(e3.initialState);
  }
  return ssr;
};
var subscriptionExchange = ({ forwardSubscription: e3, enableAllOperations: r3, isSubscriptionOperation: t2 }) => ({ client: a2, forward: i3 }) => {
  var u3 = t2 || ((e4) => "subscription" === e4.kind || !!r3 && ("query" === e4.kind || "mutation" === e4.kind));
  return (r4) => {
    var t3 = mergeMap((t4) => {
      var { key: i4 } = t4;
      var u4 = filter((e4) => "teardown" === e4.kind && e4.key === i4)(r4);
      return takeUntil(u4)(((r5) => {
        var t5 = e3(makeFetchBody(r5), r5);
        return make((e4) => {
          var o2 = false;
          var i5;
          var u5;
          function nextResult(t6) {
            e4.next(u5 = u5 ? mergeResultPatch(u5, t6) : makeResult(r5, t6));
          }
          Promise.resolve().then(() => {
            if (o2) {
              return;
            }
            i5 = t5.subscribe({
              next: nextResult,
              error(t6) {
                if (Array.isArray(t6)) {
                  nextResult({
                    errors: t6
                  });
                } else {
                  e4.next(makeErrorResult(r5, t6));
                }
                e4.complete();
              },
              complete() {
                if (!o2) {
                  o2 = true;
                  if ("subscription" === r5.kind) {
                    a2.reexecuteOperation(makeOperation("teardown", r5, r5.context));
                  }
                  if (u5 && u5.hasNext) {
                    nextResult({
                      hasNext: false
                    });
                  }
                  e4.complete();
                }
              }
            });
          });
          return () => {
            o2 = true;
            if (i5) {
              i5.unsubscribe();
            }
          };
        });
      })(t4));
    })(filter((e4) => "teardown" !== e4.kind && u3(e4))(r4));
    var p3 = i3(filter((e4) => "teardown" === e4.kind || !u3(e4))(r4));
    return merge([t3, p3]);
  };
};
var debugExchange = ({ forward: e3 }) => {
  if (false) {
    return (r3) => e3(r3);
  } else {
    return (r3) => onPush((e4) => console.log("[Exchange debug]: Completed operation: ", e4))(e3(onPush((e4) => console.log("[Exchange debug]: Incoming operation: ", e4))(r3)));
  }
};
var fetchExchange = ({ forward: e3, dispatchDebug: r3 }) => (t2) => {
  var n2 = mergeMap((e4) => {
    var n3 = makeFetchBody(e4);
    var a3 = makeFetchURL(e4, n3);
    var i3 = makeFetchOptions(e4, n3);
    r3({
      type: "fetchRequest",
      message: "A fetch request is being executed.",
      operation: e4,
      data: {
        url: a3,
        fetchOptions: i3
      },
      source: "fetchExchange"
    });
    var s2 = takeUntil(filter((r4) => "teardown" === r4.kind && r4.key === e4.key)(t2))(makeFetchSource(e4, a3, i3));
    if (true) {
      return onPush((t3) => {
        var n4 = !t3.data ? t3.error : void 0;
        r3({
          type: n4 ? "fetchError" : "fetchSuccess",
          message: `A ${n4 ? "failed" : "successful"} fetch response has been returned.`,
          operation: e4,
          data: {
            url: a3,
            fetchOptions: i3,
            value: n4 || t3
          },
          source: "fetchExchange"
        });
      })(s2);
    }
    return s2;
  })(filter((e4) => "teardown" !== e4.kind && ("subscription" !== e4.kind || !!e4.context.fetchSubscriptions))(t2));
  var a2 = e3(filter((e4) => "teardown" === e4.kind || "subscription" === e4.kind && !e4.context.fetchSubscriptions)(t2));
  return merge([n2, a2]);
};
var composeExchanges = (e3) => ({ client: r3, forward: t2, dispatchDebug: n2 }) => e3.reduceRight((e4, t3) => {
  var a2 = false;
  return t3({
    client: r3,
    forward(r4) {
      if (true) {
        if (a2) {
          throw new Error("forward() must only be called once in each Exchange.");
        }
        a2 = true;
      }
      return share(e4(share(r4)));
    },
    dispatchDebug(e5) {
      n2({
        timestamp: Date.now(),
        source: t3.name,
        ...e5
      });
    }
  });
}, t2);
var mapExchange = ({ onOperation: e3, onResult: r3, onError: t2 }) => ({ forward: n2 }) => (a2) => mergeMap((e4) => {
  if (t2 && e4.error) {
    t2(e4.error, e4.operation);
  }
  var n3 = r3 && r3(e4) || e4;
  return "then" in n3 ? fromPromise(n3) : fromValue(n3);
})(n2(mergeMap((r4) => {
  var t3 = e3 && e3(r4) || r4;
  return "then" in t3 ? fromPromise(t3) : fromValue(t3);
})(a2)));
var fallbackExchange = ({ dispatchDebug: e3 }) => (r3) => {
  if (true) {
    r3 = onPush((r4) => {
      if ("teardown" !== r4.kind && true) {
        var t2 = `No exchange has handled operations of kind "${r4.kind}". Check whether you've added an exchange responsible for these operations.`;
        e3({
          type: "fallbackCatch",
          message: t2,
          operation: r4,
          source: "fallbackExchange"
        });
        console.warn(t2);
      }
    })(r3);
  }
  return filter((e4) => false)(r3);
};
var C = function Client(e3) {
  if (!e3.url) {
    throw new Error("You are creating an urql-client without a url.");
  }
  var r3 = 0;
  var t2 = /* @__PURE__ */ new Map();
  var n2 = /* @__PURE__ */ new Map();
  var a2 = /* @__PURE__ */ new Set();
  var o2 = [];
  var i3 = {
    url: e3.url,
    fetchSubscriptions: e3.fetchSubscriptions,
    fetchOptions: e3.fetchOptions,
    fetch: e3.fetch,
    preferGetMethod: e3.preferGetMethod,
    requestPolicy: e3.requestPolicy || "cache-first"
  };
  var s2 = makeSubject();
  function nextOperation(e4) {
    if ("mutation" === e4.kind || "teardown" === e4.kind || !a2.has(e4.key)) {
      if ("teardown" === e4.kind) {
        a2.delete(e4.key);
      } else if ("mutation" !== e4.kind) {
        a2.add(e4.key);
      }
      s2.next(e4);
    }
  }
  var c3 = false;
  function dispatchOperation(e4) {
    if (e4) {
      nextOperation(e4);
    }
    if (!c3) {
      c3 = true;
      while (c3 && (e4 = o2.shift())) {
        nextOperation(e4);
      }
      c3 = false;
    }
  }
  var makeResultSource = (e4) => {
    var r4 = takeUntil(filter((r5) => "teardown" === r5.kind && r5.key === e4.key)(s2.source))(filter((r5) => r5.operation.kind === e4.kind && r5.operation.key === e4.key && (!r5.operation.context._instance || r5.operation.context._instance === e4.context._instance))(O));
    if ("query" !== e4.kind) {
      r4 = takeWhile((e5) => !!e5.hasNext, true)(r4);
    } else {
      r4 = switchMap((r5) => {
        var t3 = fromValue(r5);
        return r5.stale || r5.hasNext ? t3 : merge([t3, map(() => {
          r5.stale = true;
          return r5;
        })(take(1)(filter((r6) => r6.key === e4.key)(s2.source)))]);
      })(r4);
    }
    if ("mutation" !== e4.kind) {
      r4 = onEnd(() => {
        a2.delete(e4.key);
        t2.delete(e4.key);
        n2.delete(e4.key);
        c3 = false;
        for (var r5 = o2.length - 1; r5 >= 0; r5--) {
          if (o2[r5].key === e4.key) {
            o2.splice(r5, 1);
          }
        }
        nextOperation(makeOperation("teardown", e4, e4.context));
      })(onPush((r5) => {
        if (r5.stale) {
          for (var n3 of o2) {
            if (n3.key === r5.operation.key) {
              a2.delete(n3.key);
              break;
            }
          }
        } else if (!r5.hasNext) {
          a2.delete(e4.key);
        }
        t2.set(e4.key, r5);
      })(r4));
    } else {
      r4 = onStart(() => {
        nextOperation(e4);
      })(r4);
    }
    return share(r4);
  };
  var u3 = this instanceof Client ? this : Object.create(Client.prototype);
  var p3 = Object.assign(u3, {
    suspense: !!e3.suspense,
    operations$: s2.source,
    reexecuteOperation(e4) {
      if ("teardown" === e4.kind) {
        dispatchOperation(e4);
      } else if ("mutation" === e4.kind || n2.has(e4.key)) {
        var r4 = false;
        for (var t3 = 0; t3 < o2.length; t3++) {
          r4 = r4 || o2[t3].key === e4.key;
        }
        if (!r4) {
          a2.delete(e4.key);
        }
        o2.push(e4);
        Promise.resolve().then(dispatchOperation);
      }
    },
    createRequestOperation(e4, t3, n3) {
      if (!n3) {
        n3 = {};
      }
      var a3;
      if ("teardown" !== e4 && (a3 = getOperationType(t3.query)) !== e4) {
        throw new Error(`Expected operation of type "${e4}" but found "${a3}"`);
      }
      return makeOperation(e4, t3, {
        _instance: "mutation" === e4 ? r3 = r3 + 1 | 0 : void 0,
        ...i3,
        ...n3,
        requestPolicy: n3.requestPolicy || i3.requestPolicy,
        suspense: n3.suspense || false !== n3.suspense && p3.suspense
      });
    },
    executeRequestOperation(e4) {
      if ("mutation" === e4.kind) {
        return withPromise(makeResultSource(e4));
      }
      return withPromise(lazy(() => {
        var r4 = n2.get(e4.key);
        if (!r4) {
          n2.set(e4.key, r4 = makeResultSource(e4));
        }
        r4 = onStart(() => {
          dispatchOperation(e4);
        })(r4);
        var a3 = t2.get(e4.key);
        if ("query" === e4.kind && a3 && (a3.stale || a3.hasNext)) {
          return switchMap(fromValue)(merge([r4, filter((r5) => r5 === t2.get(e4.key))(fromValue(a3))]));
        } else {
          return r4;
        }
      }));
    },
    executeQuery(e4, r4) {
      var t3 = p3.createRequestOperation("query", e4, r4);
      return p3.executeRequestOperation(t3);
    },
    executeSubscription(e4, r4) {
      var t3 = p3.createRequestOperation("subscription", e4, r4);
      return p3.executeRequestOperation(t3);
    },
    executeMutation(e4, r4) {
      var t3 = p3.createRequestOperation("mutation", e4, r4);
      return p3.executeRequestOperation(t3);
    },
    readQuery(e4, r4, t3) {
      var n3 = null;
      subscribe((e5) => {
        n3 = e5;
      })(p3.query(e4, r4, t3)).unsubscribe();
      return n3;
    },
    query: (e4, r4, t3) => p3.executeQuery(createRequest(e4, r4), t3),
    subscription: (e4, r4, t3) => p3.executeSubscription(createRequest(e4, r4), t3),
    mutation: (e4, r4, t3) => p3.executeMutation(createRequest(e4, r4), t3)
  });
  var d4 = noop;
  if (true) {
    var { next: l4, source: x } = makeSubject();
    p3.subscribeToDebugTarget = (e4) => subscribe(e4)(x);
    d4 = l4;
  }
  var w = composeExchanges(e3.exchanges);
  var O = share(w({
    client: p3,
    dispatchDebug: d4,
    forward: fallbackExchange({
      dispatchDebug: d4
    })
  })(s2.source));
  publish(O);
  return p3;
};
var Q = C;

// node_modules/urql/dist/urql.es.js
var r2 = __toESM(require_react());
var c2 = {};
var v3 = r2.createContext(c2);
var f3 = v3.Provider;
var l3 = v3.Consumer;
v3.displayName = "UrqlContext";
var useClient = () => {
  var e3 = r2.useContext(v3);
  if (e3 === c2 && true) {
    var t2 = "No client has been specified using urql's Provider. please create a client and add a Provider.";
    console.error(t2);
    throw new Error(t2);
  }
  return e3;
};
var d3 = {
  fetching: false,
  stale: false,
  error: void 0,
  data: void 0,
  extensions: void 0,
  operation: void 0
};
var areOperationsEqual = (e3, r3) => e3 === r3 || !(!e3 || !r3 || e3.key !== r3.key);
var computeNextState = (e3, r3) => {
  var t2 = {
    ...e3,
    ...r3,
    data: void 0 !== r3.data || r3.error ? r3.data : e3.data,
    fetching: !!r3.fetching,
    stale: !!r3.stale
  };
  return ((e4, r4) => {
    for (var t3 in e4) {
      if (!(t3 in r4)) {
        return true;
      }
    }
    for (var a2 in r4) {
      if ("operation" === a2 ? !areOperationsEqual(e4[a2], r4[a2]) : e4[a2] !== r4[a2]) {
        return true;
      }
    }
    return false;
  })(e3, t2) ? t2 : e3;
};
var hasDepsChanged = (e3, r3) => {
  for (var t2 = 0, a2 = r3.length; t2 < a2; t2++) {
    if (e3[t2] !== r3[t2]) {
      return true;
    }
  }
  return false;
};
var p2 = r2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
function deferDispatch(e3, r3) {
  if (p2 && p2.ReactCurrentOwner && p2.ReactCurrentOwner.current) {
    Promise.resolve(r3).then(e3);
  } else {
    e3(r3);
  }
}
function useMutation(i3) {
  var s2 = r2.useRef(true);
  var o2 = useClient();
  var [c3, v4] = r2.useState(d3);
  var f4 = r2.useCallback((r3, c4) => {
    deferDispatch(v4, {
      ...d3,
      fetching: true
    });
    return toPromise(take(1)(filter((e3) => !e3.hasNext)(onPush((e3) => {
      if (s2.current) {
        deferDispatch(v4, {
          fetching: false,
          stale: e3.stale,
          data: e3.data,
          error: e3.error,
          extensions: e3.extensions,
          operation: e3.operation
        });
      }
    })(o2.executeMutation(createRequest(i3, r3), c4 || {})))));
  }, [o2, i3, v4]);
  r2.useEffect(() => {
    s2.current = true;
    return () => {
      s2.current = false;
    };
  }, []);
  return [c3, f4];
}
function useRequest(t2, a2) {
  var n2 = r2.useRef(void 0);
  return r2.useMemo(() => {
    var r3 = createRequest(t2, a2);
    if (void 0 !== n2.current && n2.current.key === r3.key) {
      return n2.current;
    } else {
      n2.current = r3;
      return r3;
    }
  }, [t2, a2]);
}
var getCacheForClient = (e3) => {
  if (!e3._react) {
    var r3 = /* @__PURE__ */ new Set();
    var t2 = /* @__PURE__ */ new Map();
    if (e3.operations$) {
      subscribe((e4) => {
        if ("teardown" === e4.kind && r3.has(e4.key)) {
          r3.delete(e4.key);
          t2.delete(e4.key);
        }
      })(e3.operations$);
    }
    e3._react = {
      get: (e4) => t2.get(e4),
      set(e4, a2) {
        r3.delete(e4);
        t2.set(e4, a2);
      },
      dispose(e4) {
        r3.add(e4);
      }
    };
  }
  return e3._react;
};
var isSuspense = (e3, r3) => r3 && void 0 !== r3.suspense ? !!r3.suspense : e3.suspense;
function useQuery(e3) {
  var t2 = useClient();
  var a2 = getCacheForClient(t2);
  var n2 = isSuspense(t2, e3.context);
  var c3 = useRequest(e3.query, e3.variables);
  var v4 = r2.useMemo(() => {
    if (e3.pause) {
      return null;
    }
    var r3 = t2.executeQuery(c3, {
      requestPolicy: e3.requestPolicy,
      ...e3.context
    });
    return n2 ? onPush((e4) => {
      a2.set(c3.key, e4);
    })(r3) : r3;
  }, [a2, t2, c3, n2, e3.pause, e3.requestPolicy, e3.context]);
  var f4 = r2.useCallback((e4, r3) => {
    if (!e4) {
      return {
        fetching: false
      };
    }
    var t3 = a2.get(c3.key);
    if (!t3) {
      var n3;
      var u3 = subscribe((e5) => {
        t3 = e5;
        if (n3) {
          n3(t3);
        }
      })(takeWhile(() => r3 && !n3 || !t3)(e4));
      if (null == t3 && r3) {
        var o2 = new Promise((e5) => {
          n3 = e5;
        });
        a2.set(c3.key, o2);
        throw o2;
      } else {
        u3.unsubscribe();
      }
    } else if (r3 && null != t3 && "then" in t3) {
      throw t3;
    }
    return t3 || {
      fetching: true
    };
  }, [a2, c3]);
  var l4 = [t2, c3, e3.requestPolicy, e3.context, e3.pause];
  var [p3, h2] = r2.useState(() => [v4, computeNextState(d3, f4(v4, n2)), l4]);
  var y2 = p3[1];
  if (v4 !== p3[0] && hasDepsChanged(p3[2], l4)) {
    h2([v4, y2 = computeNextState(p3[1], f4(v4, n2)), l4]);
  }
  r2.useEffect(() => {
    var e4 = p3[0];
    var r3 = p3[2][1];
    var t3 = false;
    var updateResult = (e5) => {
      t3 = true;
      deferDispatch(h2, (r4) => {
        var t4 = computeNextState(r4[1], e5);
        return r4[1] !== t4 ? [r4[0], t4, r4[2]] : r4;
      });
    };
    if (e4) {
      var n3 = subscribe(updateResult)(onEnd(() => {
        updateResult({
          fetching: false
        });
      })(e4));
      if (!t3) {
        updateResult({
          fetching: true
        });
      }
      return () => {
        a2.dispose(r3.key);
        n3.unsubscribe();
      };
    } else {
      updateResult({
        fetching: false
      });
    }
  }, [a2, p3[0], p3[2][1]]);
  var x = r2.useCallback((r3) => {
    var i3 = {
      requestPolicy: e3.requestPolicy,
      ...e3.context,
      ...r3
    };
    deferDispatch(h2, (e4) => [n2 ? onPush((e5) => {
      a2.set(c3.key, e5);
    })(t2.executeQuery(c3, i3)) : t2.executeQuery(c3, i3), e4[1], l4]);
  }, [t2, a2, c3, n2, e3.requestPolicy, e3.context, e3.pause]);
  return [y2, x];
}
function useSubscription(e3, t2) {
  var a2 = useClient();
  var n2 = useRequest(e3.query, e3.variables);
  var u3 = r2.useRef(t2);
  u3.current = t2;
  var s2 = r2.useMemo(() => !e3.pause ? a2.executeSubscription(n2, e3.context) : null, [a2, n2, e3.pause, e3.context]);
  var c3 = [a2, n2, e3.context, e3.pause];
  var [v4, f4] = r2.useState(() => [s2, {
    ...d3,
    fetching: !!s2
  }, c3]);
  var l4 = v4[1];
  if (s2 !== v4[0] && hasDepsChanged(v4[2], c3)) {
    f4([s2, l4 = computeNextState(v4[1], {
      fetching: !!s2
    }), c3]);
  }
  r2.useEffect(() => {
    var updateResult = (e4) => {
      deferDispatch(f4, (r3) => {
        var t3 = computeNextState(r3[1], e4);
        if (r3[1] === t3) {
          return r3;
        }
        if (u3.current && r3[1].data !== t3.data) {
          t3.data = u3.current(r3[1].data, t3.data);
        }
        return [r3[0], t3, r3[2]];
      });
    };
    if (v4[0]) {
      return subscribe(updateResult)(onEnd(() => {
        updateResult({
          fetching: !!s2
        });
      })(v4[0])).unsubscribe;
    } else {
      updateResult({
        fetching: false
      });
    }
  }, [v4[0]]);
  var p3 = r2.useCallback((r3) => {
    var t3 = a2.executeSubscription(n2, {
      ...e3.context,
      ...r3
    });
    deferDispatch(f4, (e4) => [t3, e4[1], c3]);
  }, [a2, n2, e3.context, e3.pause]);
  return [l4, p3];
}
function Mutation(e3) {
  var r3 = useMutation(e3.query);
  return e3.children({
    ...r3[0],
    executeMutation: r3[1]
  });
}
function Query(e3) {
  var r3 = useQuery(e3);
  return e3.children({
    ...r3[0],
    executeQuery: r3[1]
  });
}
function Subscription(e3) {
  var r3 = useSubscription(e3, e3.handler);
  return e3.children({
    ...r3[0],
    executeSubscription: r3[1]
  });
}
export {
  C as Client,
  CombinedError,
  l3 as Consumer,
  v3 as Context,
  Mutation,
  f3 as Provider,
  Query,
  Subscription,
  cacheExchange,
  composeExchanges,
  Q as createClient,
  createRequest,
  debugExchange,
  mapExchange as errorExchange,
  fetchExchange,
  formatDocument,
  gql,
  makeErrorResult,
  makeOperation,
  makeResult,
  mapExchange,
  mergeResultPatch,
  ssrExchange,
  stringifyDocument,
  stringifyVariables,
  subscriptionExchange,
  useClient,
  useMutation,
  useQuery,
  useSubscription
};
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=urql.js.map
