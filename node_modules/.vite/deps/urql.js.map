{
  "version": 3,
  "sources": ["../../react/cjs/react.development.js", "../../react/index.js", "../../@0no-co/graphql.web/src/kind.js", "../../@0no-co/graphql.web/src/error.ts", "../../@0no-co/graphql.web/src/parser.ts", "../../@0no-co/graphql.web/src/visitor.ts", "../../@0no-co/graphql.web/src/printer.ts", "../../@0no-co/graphql.web/src/values.ts", "../../wonka/dist/wonka.mjs", "../../@urql/core/src/utils/error.ts", "../../@urql/core/src/utils/hash.ts", "../../@urql/core/src/utils/variables.ts", "../../@urql/core/src/utils/request.ts", "../../@urql/core/src/utils/result.ts", "../../@urql/core/src/internal/fetchOptions.ts", "../../@urql/core/src/internal/fetchSource.ts", "../../@urql/core/src/utils/collectTypenames.ts", "../../@urql/core/src/utils/formatDocument.ts", "../../@urql/core/src/utils/streamUtils.ts", "../../@urql/core/src/utils/operation.ts", "../../@urql/core/src/utils/index.ts", "../../@urql/core/src/gql.ts", "../../@urql/core/src/exchanges/cache.ts", "../../@urql/core/src/exchanges/ssr.ts", "../../@urql/core/src/exchanges/subscription.ts", "../../@urql/core/src/exchanges/debug.ts", "../../@urql/core/src/exchanges/fetch.ts", "../../@urql/core/src/exchanges/compose.ts", "../../@urql/core/src/exchanges/map.ts", "../../@urql/core/src/exchanges/fallback.ts", "../../@urql/core/src/client.ts", "../../urql/src/context.ts", "../../urql/src/hooks/state.ts", "../../urql/src/hooks/useMutation.ts", "../../urql/src/hooks/useRequest.ts", "../../urql/src/hooks/cache.ts", "../../urql/src/hooks/useQuery.ts", "../../urql/src/hooks/useSubscription.ts", "../../urql/src/components/Mutation.ts", "../../urql/src/components/Query.ts", "../../urql/src/components/Subscription.ts"],
  "sourcesContent": ["/**\n * @license React\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var ReactVersion = '18.2.0';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nvar ReactCurrentBatchConfig = {\n  transition: null\n};\n\nvar ReactCurrentActQueue = {\n  current: null,\n  // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n  isBatchingLegacy: false,\n  didScheduleLegacyUpdate: false\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar ReactDebugCurrentFrame = {};\nvar currentExtraStackFrame = null;\nfunction setExtraStackFrame(stack) {\n  {\n    currentExtraStackFrame = stack;\n  }\n}\n\n{\n  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {\n    {\n      currentExtraStackFrame = stack;\n    }\n  }; // Stack implementation injected by the current renderer.\n\n\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var stack = ''; // Add an extra top frame while an element is being validated\n\n    if (currentExtraStackFrame) {\n      stack += currentExtraStackFrame;\n    } // Delegate to the injected renderer-specific implementation\n\n\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher,\n  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner\n};\n\n{\n  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;\n  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n}\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      printWarning('warn', format, args);\n    }\n  }\n}\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + \".\" + callerName;\n\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n\n    error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n/**\n * This is the abstract API for an update queue.\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar assign = Object.assign;\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {\n    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n\n        return undefined;\n      }\n    });\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\nassign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n\n  {\n    Object.seal(refObject);\n  }\n\n  return refObject;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n\n      {\n        warnIfStringRefCannotBeAutoConverted(config);\n      }\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (element === null || element === undefined) {\n    throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n  }\n\n  var propName; // Original props are copied\n\n  var props = assign({}, element.props); // Reserved names are extracted\n\n  var key = element.key;\n  var ref = element.ref; // Self is preserved since the owner is preserved.\n\n  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  var source = element._source; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = key.replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\n\nvar didWarnAboutMaps = false;\nvar userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return text.replace(userProvidedKeyEscapeRegex, '$&/');\n}\n/**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getElementKey(element, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof element === 'object' && element !== null && element.key != null) {\n    // Explicit key\n    {\n      checkKeyStringCoercion(element.key);\n    }\n\n    return escape('' + element.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    var _child = children;\n    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows:\n\n    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n\n    if (isArray(mappedChild)) {\n      var escapedChildKey = '';\n\n      if (childKey != null) {\n        escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n      }\n\n      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {\n        return c;\n      });\n    } else if (mappedChild != null) {\n      if (isValidElement(mappedChild)) {\n        {\n          // The `if` statement here prevents auto-disabling of the safe\n          // coercion ESLint rule, so we must manually disable it below.\n          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {\n            checkKeyStringCoercion(mappedChild.key);\n          }\n        }\n\n        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n        // traverseAllChildren used to do for objects as children\n        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number\n        // eslint-disable-next-line react-internal/safe-string-coercion\n        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);\n      }\n\n      array.push(mappedChild);\n    }\n\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getElementKey(child, i);\n      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n      var iterableChildren = children;\n\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === iterableChildren.entries) {\n          if (!didWarnAboutMaps) {\n            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n          }\n\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(iterableChildren);\n      var step;\n      var ii = 0;\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getElementKey(child, ii++);\n        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n      }\n    } else if (type === 'object') {\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      var childrenString = String(children);\n      throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var result = [];\n  var count = 0;\n  mapIntoArray(children, result, '', '', function (child) {\n    return func.call(context, child, count++);\n  });\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  var n = 0;\n  mapChildren(children, function () {\n    n++; // Don't return anything\n  });\n  return n;\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  mapChildren(children, function () {\n    forEachFunc.apply(this, arguments); // Don't return anything.\n  }, forEachContext);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  return mapChildren(children, function (child) {\n    return child;\n  }) || [];\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    throw new Error('React.Children.only expected to receive a single React element child.');\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue) {\n  // TODO: Second argument used to be an optional `calculateChangedBits`\n  // function. Warn to reserve for future use?\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null,\n    // Add these to use same hidden class in VM as ServerContext\n    _defaultValue: null,\n    _globalName: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  var hasWarnedAboutUsingNestedContextConsumers = false;\n  var hasWarnedAboutUsingConsumerProvider = false;\n  var hasWarnedAboutDisplayNameOnConsumer = false;\n\n  {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    var Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get: function () {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n\n            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n        set: function (_Provider) {\n          context.Provider = _Provider;\n        }\n      },\n      _currentValue: {\n        get: function () {\n          return context._currentValue;\n        },\n        set: function (_currentValue) {\n          context._currentValue = _currentValue;\n        }\n      },\n      _currentValue2: {\n        get: function () {\n          return context._currentValue2;\n        },\n        set: function (_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n      },\n      _threadCount: {\n        get: function () {\n          return context._threadCount;\n        },\n        set: function (_threadCount) {\n          context._threadCount = _threadCount;\n        }\n      },\n      Consumer: {\n        get: function () {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n\n            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n      },\n      displayName: {\n        get: function () {\n          return context.displayName;\n        },\n        set: function (displayName) {\n          if (!hasWarnedAboutDisplayNameOnConsumer) {\n            warn('Setting `displayName` on Context.Consumer has no effect. ' + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n\n            hasWarnedAboutDisplayNameOnConsumer = true;\n          }\n        }\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nvar Uninitialized = -1;\nvar Pending = 0;\nvar Resolved = 1;\nvar Rejected = 2;\n\nfunction lazyInitializer(payload) {\n  if (payload._status === Uninitialized) {\n    var ctor = payload._result;\n    var thenable = ctor(); // Transition to the next state.\n    // This might throw either because it's missing or throws. If so, we treat it\n    // as still uninitialized and try again next time. Which is the same as what\n    // happens if the ctor or any wrappers processing the ctor throws. This might\n    // end up fixing it if the resolution was a concurrency bug.\n\n    thenable.then(function (moduleObject) {\n      if (payload._status === Pending || payload._status === Uninitialized) {\n        // Transition to the next state.\n        var resolved = payload;\n        resolved._status = Resolved;\n        resolved._result = moduleObject;\n      }\n    }, function (error) {\n      if (payload._status === Pending || payload._status === Uninitialized) {\n        // Transition to the next state.\n        var rejected = payload;\n        rejected._status = Rejected;\n        rejected._result = error;\n      }\n    });\n\n    if (payload._status === Uninitialized) {\n      // In case, we're still uninitialized, then we're waiting for the thenable\n      // to resolve. Set it as pending in the meantime.\n      var pending = payload;\n      pending._status = Pending;\n      pending._result = thenable;\n    }\n  }\n\n  if (payload._status === Resolved) {\n    var moduleObject = payload._result;\n\n    {\n      if (moduleObject === undefined) {\n        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n        'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\\n\\n\" + 'Did you accidentally put curly braces around the import?', moduleObject);\n      }\n    }\n\n    {\n      if (!('default' in moduleObject)) {\n        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n        'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\", moduleObject);\n      }\n    }\n\n    return moduleObject.default;\n  } else {\n    throw payload._result;\n  }\n}\n\nfunction lazy(ctor) {\n  var payload = {\n    // We use these fields to store the result.\n    _status: Uninitialized,\n    _result: ctor\n  };\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _payload: payload,\n    _init: lazyInitializer\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps;\n    var propTypes; // $FlowFixMe\n\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        set: function (newDefaultProps) {\n          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n          // $FlowFixMe\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        set: function (newPropTypes) {\n          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          propTypes = newPropTypes; // Match production behavior more closely:\n          // $FlowFixMe\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      if (render.length !== 0 && render.length !== 2) {\n        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n      }\n    }\n\n    if (render != null) {\n      if (render.defaultProps != null || render.propTypes != null) {\n        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n      }\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.forwardRef((props, ref) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n\n        if (!render.name && !render.displayName) {\n          render.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.memo((props) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n\n        if (!type.name && !type.displayName) {\n          type.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher.current;\n\n  {\n    if (dispatcher === null) {\n      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n    }\n  } // Will result in a null access error if accessed outside render phase. We\n  // intentionally don't throw our own error because this is in a hot path.\n  // Also helps ensure this is inlined.\n\n\n  return dispatcher;\n}\nfunction useContext(Context) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    // TODO: add a more generic warning for invalid values.\n    if (Context._context !== undefined) {\n      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n\n      if (realContext.Consumer === Context) {\n        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n      } else if (realContext.Provider === Context) {\n        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n      }\n    }\n  }\n\n  return dispatcher.useContext(Context);\n}\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, deps);\n}\nfunction useInsertionEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useInsertionEffect(create, deps);\n}\nfunction useLayoutEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, deps);\n}\nfunction useCallback(callback, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, deps);\n}\nfunction useMemo(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, deps);\n}\nfunction useImperativeHandle(ref, create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, deps);\n}\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\nfunction useTransition() {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useTransition();\n}\nfunction useDeferredValue(value) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useDeferredValue(value);\n}\nfunction useId() {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useId();\n}\nfunction useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher$1.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher$1.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      setExtraStackFrame(stack);\n    } else {\n      setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (source !== undefined) {\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendumForProps(elementProps) {\n  if (elementProps !== null && elementProps !== undefined) {\n    return getSourceInfoErrorAddendum(elementProps.__source);\n  }\n\n  return '';\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n    }\n  }\n\n  return info;\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwner = '';\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n  }\n\n  {\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\nfunction createElementWithValidation(type, props, children) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    {\n      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n  }\n\n  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\nvar didWarnAboutDeprecatedCreateFactory = false;\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type;\n\n  {\n    if (!didWarnAboutDeprecatedCreateFactory) {\n      didWarnAboutDeprecatedCreateFactory = true;\n\n      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n    } // Legacy hook: remove it\n\n\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n\n  validatePropTypes(newElement);\n  return newElement;\n}\n\nfunction startTransition(scope, options) {\n  var prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = {};\n  var currentTransition = ReactCurrentBatchConfig.transition;\n\n  {\n    ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n  }\n\n  try {\n    scope();\n  } finally {\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        var updatedFibersCount = currentTransition._updatedFibers.size;\n\n        if (updatedFibersCount > 10) {\n          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n        }\n\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nvar didWarnAboutMessageChannel = false;\nvar enqueueTaskImpl = null;\nfunction enqueueTask(task) {\n  if (enqueueTaskImpl === null) {\n    try {\n      // read require off the module object to get around the bundlers.\n      // we don't want them to detect a require and bundle a Node polyfill.\n      var requireString = ('require' + Math.random()).slice(0, 7);\n      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's\n      // version of setImmediate, bypassing fake timers if any.\n\n      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n    } catch (_err) {\n      // we're in a browser\n      // we can't use regular timers because they may still be faked\n      // so we try MessageChannel+postMessage instead\n      enqueueTaskImpl = function (callback) {\n        {\n          if (didWarnAboutMessageChannel === false) {\n            didWarnAboutMessageChannel = true;\n\n            if (typeof MessageChannel === 'undefined') {\n              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');\n            }\n          }\n        }\n\n        var channel = new MessageChannel();\n        channel.port1.onmessage = callback;\n        channel.port2.postMessage(undefined);\n      };\n    }\n  }\n\n  return enqueueTaskImpl(task);\n}\n\nvar actScopeDepth = 0;\nvar didWarnNoAwaitAct = false;\nfunction act(callback) {\n  {\n    // `act` calls can be nested, so we track the depth. This represents the\n    // number of `act` scopes on the stack.\n    var prevActScopeDepth = actScopeDepth;\n    actScopeDepth++;\n\n    if (ReactCurrentActQueue.current === null) {\n      // This is the outermost `act` scope. Initialize the queue. The reconciler\n      // will detect the queue and use it instead of Scheduler.\n      ReactCurrentActQueue.current = [];\n    }\n\n    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;\n    var result;\n\n    try {\n      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only\n      // set to `true` while the given callback is executed, not for updates\n      // triggered during an async event, because this is how the legacy\n      // implementation of `act` behaved.\n      ReactCurrentActQueue.isBatchingLegacy = true;\n      result = callback(); // Replicate behavior of original `act` implementation in legacy mode,\n      // which flushed updates immediately after the scope function exits, even\n      // if it's an async function.\n\n      if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {\n        var queue = ReactCurrentActQueue.current;\n\n        if (queue !== null) {\n          ReactCurrentActQueue.didScheduleLegacyUpdate = false;\n          flushActQueue(queue);\n        }\n      }\n    } catch (error) {\n      popActScope(prevActScopeDepth);\n      throw error;\n    } finally {\n      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n    }\n\n    if (result !== null && typeof result === 'object' && typeof result.then === 'function') {\n      var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait\n      // for it to resolve before exiting the current scope.\n\n      var wasAwaited = false;\n      var thenable = {\n        then: function (resolve, reject) {\n          wasAwaited = true;\n          thenableResult.then(function (returnValue) {\n            popActScope(prevActScopeDepth);\n\n            if (actScopeDepth === 0) {\n              // We've exited the outermost act scope. Recursively flush the\n              // queue until there's no remaining work.\n              recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n            } else {\n              resolve(returnValue);\n            }\n          }, function (error) {\n            // The callback threw an error.\n            popActScope(prevActScopeDepth);\n            reject(error);\n          });\n        }\n      };\n\n      {\n        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {\n          // eslint-disable-next-line no-undef\n          Promise.resolve().then(function () {}).then(function () {\n            if (!wasAwaited) {\n              didWarnNoAwaitAct = true;\n\n              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');\n            }\n          });\n        }\n      }\n\n      return thenable;\n    } else {\n      var returnValue = result; // The callback is not an async function. Exit the current scope\n      // immediately, without awaiting.\n\n      popActScope(prevActScopeDepth);\n\n      if (actScopeDepth === 0) {\n        // Exiting the outermost act scope. Flush the queue.\n        var _queue = ReactCurrentActQueue.current;\n\n        if (_queue !== null) {\n          flushActQueue(_queue);\n          ReactCurrentActQueue.current = null;\n        } // Return a thenable. If the user awaits it, we'll flush again in\n        // case additional work was scheduled by a microtask.\n\n\n        var _thenable = {\n          then: function (resolve, reject) {\n            // Confirm we haven't re-entered another `act` scope, in case\n            // the user does something weird like await the thenable\n            // multiple times.\n            if (ReactCurrentActQueue.current === null) {\n              // Recursively flush the queue until there's no remaining work.\n              ReactCurrentActQueue.current = [];\n              recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n            } else {\n              resolve(returnValue);\n            }\n          }\n        };\n        return _thenable;\n      } else {\n        // Since we're inside a nested `act` scope, the returned thenable\n        // immediately resolves. The outer scope will flush the queue.\n        var _thenable2 = {\n          then: function (resolve, reject) {\n            resolve(returnValue);\n          }\n        };\n        return _thenable2;\n      }\n    }\n  }\n}\n\nfunction popActScope(prevActScopeDepth) {\n  {\n    if (prevActScopeDepth !== actScopeDepth - 1) {\n      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');\n    }\n\n    actScopeDepth = prevActScopeDepth;\n  }\n}\n\nfunction recursivelyFlushAsyncActWork(returnValue, resolve, reject) {\n  {\n    var queue = ReactCurrentActQueue.current;\n\n    if (queue !== null) {\n      try {\n        flushActQueue(queue);\n        enqueueTask(function () {\n          if (queue.length === 0) {\n            // No additional work was scheduled. Finish.\n            ReactCurrentActQueue.current = null;\n            resolve(returnValue);\n          } else {\n            // Keep flushing work until there's none left.\n            recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n          }\n        });\n      } catch (error) {\n        reject(error);\n      }\n    } else {\n      resolve(returnValue);\n    }\n  }\n}\n\nvar isFlushing = false;\n\nfunction flushActQueue(queue) {\n  {\n    if (!isFlushing) {\n      // Prevent re-entrance.\n      isFlushing = true;\n      var i = 0;\n\n      try {\n        for (; i < queue.length; i++) {\n          var callback = queue[i];\n\n          do {\n            callback = callback(true);\n          } while (callback !== null);\n        }\n\n        queue.length = 0;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        queue = queue.slice(i + 1);\n        throw error;\n      } finally {\n        isFlushing = false;\n      }\n    }\n  }\n}\n\nvar createElement$1 =  createElementWithValidation ;\nvar cloneElement$1 =  cloneElementWithValidation ;\nvar createFactory =  createFactoryWithValidation ;\nvar Children = {\n  map: mapChildren,\n  forEach: forEachChildren,\n  count: countChildren,\n  toArray: toArray,\n  only: onlyChild\n};\n\nexports.Children = Children;\nexports.Component = Component;\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.Profiler = REACT_PROFILER_TYPE;\nexports.PureComponent = PureComponent;\nexports.StrictMode = REACT_STRICT_MODE_TYPE;\nexports.Suspense = REACT_SUSPENSE_TYPE;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\nexports.cloneElement = cloneElement$1;\nexports.createContext = createContext;\nexports.createElement = createElement$1;\nexports.createFactory = createFactory;\nexports.createRef = createRef;\nexports.forwardRef = forwardRef;\nexports.isValidElement = isValidElement;\nexports.lazy = lazy;\nexports.memo = memo;\nexports.startTransition = startTransition;\nexports.unstable_act = act;\nexports.useCallback = useCallback;\nexports.useContext = useContext;\nexports.useDebugValue = useDebugValue;\nexports.useDeferredValue = useDeferredValue;\nexports.useEffect = useEffect;\nexports.useId = useId;\nexports.useImperativeHandle = useImperativeHandle;\nexports.useInsertionEffect = useInsertionEffect;\nexports.useLayoutEffect = useLayoutEffect;\nexports.useMemo = useMemo;\nexports.useReducer = useReducer;\nexports.useRef = useRef;\nexports.useState = useState;\nexports.useSyncExternalStore = useSyncExternalStore;\nexports.useTransition = useTransition;\nexports.version = ReactVersion;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n", "export const Kind = {\n  NAME: 'Name',\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  DIRECTIVE: 'Directive',\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n\n  /*\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension',\n  */\n};\n\nexport const OperationTypeNode = {\n  QUERY: 'query',\n  MUTATION: 'mutation',\n  SUBSCRIPTION: 'subscription',\n};\n", "import type { Maybe, Extensions, Source } from './types';\nimport type { ASTNode } from './ast';\n\nexport class GraphQLError extends Error {\n  readonly locations: ReadonlyArray<any> | undefined;\n  readonly path: ReadonlyArray<string | number> | undefined;\n  readonly nodes: ReadonlyArray<any> | undefined;\n  readonly source: Source | undefined;\n  readonly positions: ReadonlyArray<number> | undefined;\n  readonly originalError: Error | undefined;\n  readonly extensions: Extensions;\n\n  constructor(\n    message: string,\n    nodes?: ReadonlyArray<ASTNode> | ASTNode | null,\n    source?: Maybe<Source>,\n    positions?: Maybe<ReadonlyArray<number>>,\n    path?: Maybe<ReadonlyArray<string | number>>,\n    originalError?: Maybe<Error>,\n    extensions?: Maybe<Extensions>\n  ) {\n    super(message);\n\n    this.name = 'GraphQLError';\n    this.message = message;\n\n    if (path) this.path = path;\n    if (nodes) this.nodes = (Array.isArray(nodes) ? nodes : [nodes]) as ASTNode[];\n    if (source) this.source = source;\n    if (positions) this.positions = positions;\n    if (originalError) this.originalError = originalError;\n\n    let _extensions = extensions;\n    if (!_extensions && originalError) {\n      const originalExtensions = (originalError as any).extensions;\n      if (originalExtensions && typeof originalExtensions === 'object') {\n        _extensions = originalExtensions;\n      }\n    }\n\n    this.extensions = _extensions || {};\n  }\n\n  toJSON(): any {\n    return { ...this, message: this.message };\n  }\n\n  toString() {\n    return this.message;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n}\n", "/**\n * This is a spec-compliant implementation of a GraphQL query language parser,\n * up-to-date with the October 2021 Edition. Unlike the reference implementation\n * in graphql.js it will only parse the query language, but not the schema\n * language.\n */\nimport type { Kind, OperationTypeNode } from './kind';\nimport { GraphQLError } from './error';\nimport type { Source } from './types';\nimport type * as ast from './ast';\n\nlet input: string;\nlet idx: number;\n\nfunction error(kind: string) {\n  return new GraphQLError(`Syntax Error: Unexpected token at ${idx} in ${kind}`);\n}\n\nfunction advance(pattern: RegExp) {\n  pattern.lastIndex = idx;\n  if (pattern.test(input)) {\n    const match = input.slice(idx, (idx = pattern.lastIndex));\n    return match;\n  }\n}\n\nconst leadingRe = / +(?=[^\\s])/y;\nfunction blockString(string: string) {\n  const lines = string.split('\\n');\n  let out = '';\n  let commonIndent = 0;\n  let firstNonEmptyLine = 0;\n  let lastNonEmptyLine = lines.length - 1;\n  for (let i = 0; i < lines.length; i++) {\n    leadingRe.lastIndex = 0;\n    if (leadingRe.test(lines[i])) {\n      if (i && (!commonIndent || leadingRe.lastIndex < commonIndent))\n        commonIndent = leadingRe.lastIndex;\n      firstNonEmptyLine = firstNonEmptyLine || i;\n      lastNonEmptyLine = i;\n    }\n  }\n  for (let i = firstNonEmptyLine; i <= lastNonEmptyLine; i++) {\n    if (i !== firstNonEmptyLine) out += '\\n';\n    out += lines[i].slice(commonIndent).replace(/\\\\\"\"\"/g, '\"\"\"');\n  }\n  return out;\n}\n\n// Note: This is equivalent to: /(?:[\\s,]*|#[^\\n\\r]*)*/y\nfunction ignored() {\n  for (\n    let char = input.charCodeAt(idx++) | 0;\n    char === 9 /*'\\t'*/ ||\n    char === 10 /*'\\n'*/ ||\n    char === 13 /*'\\r'*/ ||\n    char === 32 /*' '*/ ||\n    char === 35 /*'#'*/ ||\n    char === 44 /*','*/ ||\n    char === 65279 /*'\\ufeff'*/;\n    char = input.charCodeAt(idx++) | 0\n  ) {\n    if (char === 35 /*'#'*/) while ((char = input.charCodeAt(idx++)) !== 10 && char !== 13);\n  }\n  idx--;\n}\n\nconst nameRe = /[_A-Za-z]\\w*/y;\n\n// NOTE: This should be compressed by our build step\n// This merges all possible value parsing into one regular expression\nconst valueRe = new RegExp(\n  '(?:' +\n    // `null`, `true`, and `false` literals (BooleanValue & NullValue)\n    '(null|true|false)|' +\n    // Variables starting with `$` then having a name (VariableNode)\n    '\\\\$(' +\n    nameRe.source +\n    ')|' +\n    // Numbers, starting with int then optionally following with a float part (IntValue and FloatValue)\n    '(-?\\\\d+)((?:\\\\.\\\\d+)?[eE][+-]?\\\\d+|\\\\.\\\\d+)?|' +\n    // Block strings starting with `\"\"\"` until the next unescaped `\"\"\"` (StringValue)\n    '(\"\"\"(?:\"\"\"|(?:[\\\\s\\\\S]*?[^\\\\\\\\])\"\"\"))|' +\n    // Strings starting with `\"` must be on one line (StringValue)\n    '(\"(?:\"|[^\\\\r\\\\n]*?[^\\\\\\\\]\"))|' + // string\n    // Enums are simply names except for our literals (EnumValue)\n    '(' +\n    nameRe.source +\n    '))',\n  'y'\n);\n\n// NOTE: Each of the groups above end up in the RegExpExecArray at the specified indices (starting with 1)\nconst enum ValueGroup {\n  Const = 1,\n  Var,\n  Int,\n  Float,\n  BlockString,\n  String,\n  Enum,\n}\n\ntype ValueExec = RegExpExecArray & {\n  [Prop in ValueGroup]: string | undefined;\n};\n\nconst complexStringRe = /\\\\/g;\n\nfunction value(constant: true): ast.ConstValueNode;\nfunction value(constant: boolean): ast.ValueNode;\n\nfunction value(constant: boolean): ast.ValueNode {\n  let match: string | undefined;\n  let exec: ValueExec | null;\n  valueRe.lastIndex = idx;\n  if (input.charCodeAt(idx) === 91 /*'['*/) {\n    // Lists are checked ahead of time with `[` chars\n    idx++;\n    ignored();\n    const values: ast.ValueNode[] = [];\n    while (input.charCodeAt(idx) !== 93 /*']'*/) values.push(value(constant));\n    idx++;\n    ignored();\n    return {\n      kind: 'ListValue' as Kind.LIST,\n      values,\n    };\n  } else if (input.charCodeAt(idx) === 123 /*'{'*/) {\n    // Objects are checked ahead of time with `{` chars\n    idx++;\n    ignored();\n    const fields: ast.ObjectFieldNode[] = [];\n    while (input.charCodeAt(idx) !== 125 /*'}'*/) {\n      if ((match = advance(nameRe)) == null) throw error('ObjectField');\n      ignored();\n      if (input.charCodeAt(idx++) !== 58 /*':'*/) throw error('ObjectField');\n      ignored();\n      fields.push({\n        kind: 'ObjectField' as Kind.OBJECT_FIELD,\n        name: { kind: 'Name' as Kind.NAME, value: match },\n        value: value(constant),\n      });\n    }\n    idx++;\n    ignored();\n    return {\n      kind: 'ObjectValue' as Kind.OBJECT,\n      fields,\n    };\n  } else if ((exec = valueRe.exec(input) as ValueExec) != null) {\n    // Starting from here, the merged `valueRe` is used\n    idx = valueRe.lastIndex;\n    ignored();\n    if ((match = exec[ValueGroup.Const]) != null) {\n      return match === 'null'\n        ? { kind: 'NullValue' as Kind.NULL }\n        : {\n            kind: 'BooleanValue' as Kind.BOOLEAN,\n            value: match === 'true',\n          };\n    } else if ((match = exec[ValueGroup.Var]) != null) {\n      if (constant) {\n        throw error('Variable');\n      } else {\n        return {\n          kind: 'Variable' as Kind.VARIABLE,\n          name: {\n            kind: 'Name' as Kind.NAME,\n            value: match,\n          },\n        };\n      }\n    } else if ((match = exec[ValueGroup.Int]) != null) {\n      let floatPart: string | undefined;\n      if ((floatPart = exec[ValueGroup.Float]) != null) {\n        return {\n          kind: 'FloatValue' as Kind.FLOAT,\n          value: match + floatPart,\n        };\n      } else {\n        return {\n          kind: 'IntValue' as Kind.INT,\n          value: match,\n        };\n      }\n    } else if ((match = exec[ValueGroup.BlockString]) != null) {\n      return {\n        kind: 'StringValue' as Kind.STRING,\n        value: blockString(match.slice(3, -3)),\n        block: true,\n      };\n    } else if ((match = exec[ValueGroup.String]) != null) {\n      return {\n        kind: 'StringValue' as Kind.STRING,\n        // When strings don't contain escape codes, a simple slice will be enough, otherwise\n        // `JSON.parse` matches GraphQL's string parsing perfectly\n        value: complexStringRe.test(match) ? (JSON.parse(match) as string) : match.slice(1, -1),\n        block: false,\n      };\n    } else if ((match = exec[ValueGroup.Enum]) != null) {\n      return {\n        kind: 'EnumValue' as Kind.ENUM,\n        value: match,\n      };\n    }\n  }\n\n  throw error('Value');\n}\n\nfunction arguments_(constant: boolean): ast.ArgumentNode[] | undefined {\n  if (input.charCodeAt(idx) === 40 /*'('*/) {\n    const args: ast.ArgumentNode[] = [];\n    idx++;\n    ignored();\n    let _name: string | undefined;\n    do {\n      if ((_name = advance(nameRe)) == null) throw error('Argument');\n      ignored();\n      if (input.charCodeAt(idx++) !== 58 /*':'*/) throw error('Argument');\n      ignored();\n      args.push({\n        kind: 'Argument' as Kind.ARGUMENT,\n        name: { kind: 'Name' as Kind.NAME, value: _name },\n        value: value(constant),\n      });\n    } while (input.charCodeAt(idx) !== 41 /*')'*/);\n    idx++;\n    ignored();\n    return args;\n  }\n}\n\nfunction directives(constant: true): ast.ConstDirectiveNode[] | undefined;\nfunction directives(constant: boolean): ast.DirectiveNode[] | undefined;\n\nfunction directives(constant: boolean): ast.DirectiveNode[] | undefined {\n  if (input.charCodeAt(idx) === 64 /*'@'*/) {\n    const directives: ast.DirectiveNode[] = [];\n    let _name: string | undefined;\n    do {\n      idx++;\n      if ((_name = advance(nameRe)) == null) throw error('Directive');\n      ignored();\n      directives.push({\n        kind: 'Directive' as Kind.DIRECTIVE,\n        name: { kind: 'Name' as Kind.NAME, value: _name },\n        arguments: arguments_(constant),\n      });\n    } while (input.charCodeAt(idx) === 64 /*'@'*/);\n    return directives;\n  }\n}\n\nfunction type(): ast.TypeNode {\n  let match: string | undefined;\n  let lists = 0;\n  while (input.charCodeAt(idx) === 91 /*'['*/) {\n    lists++;\n    idx++;\n    ignored();\n  }\n  if ((match = advance(nameRe)) == null) throw error('NamedType');\n  ignored();\n  let type: ast.TypeNode = {\n    kind: 'NamedType' as Kind.NAMED_TYPE,\n    name: { kind: 'Name' as Kind.NAME, value: match },\n  };\n  do {\n    if (input.charCodeAt(idx) === 33 /*'!'*/) {\n      idx++;\n      ignored();\n      type = {\n        kind: 'NonNullType' as Kind.NON_NULL_TYPE,\n        type: type as ast.NamedTypeNode | ast.ListTypeNode,\n      } satisfies ast.NonNullTypeNode;\n    }\n    if (lists) {\n      if (input.charCodeAt(idx++) !== 93 /*']'*/) throw error('NamedType');\n      ignored();\n      type = {\n        kind: 'ListType' as Kind.LIST_TYPE,\n        type: type as ast.NamedTypeNode | ast.ListTypeNode,\n      } satisfies ast.ListTypeNode;\n    }\n  } while (lists--);\n  return type;\n}\n\n// NOTE: This should be compressed by our build step\n// This merges the two possible selection parsing branches into one regular expression\nconst selectionRe = new RegExp(\n  '(?:' +\n    // fragment spreads (FragmentSpread or InlineFragment nodes)\n    '(\\\\.{3})|' +\n    // field aliases or names (FieldNode)\n    '(' +\n    nameRe.source +\n    '))',\n  'y'\n);\n\n// NOTE: Each of the groups above end up in the RegExpExecArray at the indices 1&2\nconst enum SelectionGroup {\n  Spread = 1,\n  Name,\n}\n\ntype SelectionExec = RegExpExecArray & {\n  [Prop in SelectionGroup]: string | undefined;\n};\n\nfunction selectionSet(): ast.SelectionSetNode {\n  const selections: ast.SelectionNode[] = [];\n  let match: string | undefined;\n  let exec: SelectionExec | null;\n  do {\n    selectionRe.lastIndex = idx;\n    if ((exec = selectionRe.exec(input) as SelectionExec) != null) {\n      idx = selectionRe.lastIndex;\n      if (exec[SelectionGroup.Spread] != null) {\n        ignored();\n        let match = advance(nameRe);\n        if (match != null && match !== 'on') {\n          // A simple `...Name` spread with optional directives\n          ignored();\n          selections.push({\n            kind: 'FragmentSpread' as Kind.FRAGMENT_SPREAD,\n            name: { kind: 'Name' as Kind.NAME, value: match },\n            directives: directives(false),\n          });\n        } else {\n          ignored();\n          if (match === 'on') {\n            // An inline `... on Name` spread; if this doesn't match, the type condition has been omitted\n            if ((match = advance(nameRe)) == null) throw error('NamedType');\n            ignored();\n          }\n          const _directives = directives(false);\n          if (input.charCodeAt(idx++) !== 123 /*'{'*/) throw error('InlineFragment');\n          ignored();\n          selections.push({\n            kind: 'InlineFragment' as Kind.INLINE_FRAGMENT,\n            typeCondition: match\n              ? {\n                  kind: 'NamedType' as Kind.NAMED_TYPE,\n                  name: { kind: 'Name' as Kind.NAME, value: match },\n                }\n              : undefined,\n            directives: _directives,\n            selectionSet: selectionSet(),\n          });\n        }\n      } else if ((match = exec[SelectionGroup.Name]) != null) {\n        let _alias: string | undefined;\n        ignored();\n        // Parse the optional alias, by reassigning and then getting the name\n        if (input.charCodeAt(idx) === 58 /*':'*/) {\n          idx++;\n          ignored();\n          _alias = match;\n          if ((match = advance(nameRe)) == null) throw error('Field');\n          ignored();\n        }\n        const _arguments = arguments_(false);\n        ignored();\n        const _directives = directives(false);\n        let _selectionSet: ast.SelectionSetNode | undefined;\n        if (input.charCodeAt(idx) === 123 /*'{'*/) {\n          idx++;\n          ignored();\n          _selectionSet = selectionSet();\n        }\n        selections.push({\n          kind: 'Field' as Kind.FIELD,\n          alias: _alias ? { kind: 'Name' as Kind.NAME, value: _alias } : undefined,\n          name: { kind: 'Name' as Kind.NAME, value: match },\n          arguments: _arguments,\n          directives: _directives,\n          selectionSet: _selectionSet,\n        });\n      }\n    } else {\n      throw error('SelectionSet');\n    }\n  } while (input.charCodeAt(idx) !== 125 /*'}'*/);\n  idx++;\n  ignored();\n  return {\n    kind: 'SelectionSet' as Kind.SELECTION_SET,\n    selections,\n  };\n}\n\nfunction variableDefinitions(): ast.VariableDefinitionNode[] | undefined {\n  ignored();\n  if (input.charCodeAt(idx) === 40 /*'('*/) {\n    const vars: ast.VariableDefinitionNode[] = [];\n    idx++;\n    ignored();\n    let _name: string | undefined;\n    do {\n      if (input.charCodeAt(idx++) !== 36 /*'$'*/) throw error('Variable');\n      if ((_name = advance(nameRe)) == null) throw error('Variable');\n      ignored();\n      if (input.charCodeAt(idx++) !== 58 /*':'*/) throw error('VariableDefinition');\n      ignored();\n      const _type = type();\n      let _defaultValue: ast.ConstValueNode | undefined;\n      if (input.charCodeAt(idx) === 61 /*'='*/) {\n        idx++;\n        ignored();\n        _defaultValue = value(true);\n      }\n      ignored();\n      vars.push({\n        kind: 'VariableDefinition' as Kind.VARIABLE_DEFINITION,\n        variable: {\n          kind: 'Variable' as Kind.VARIABLE,\n          name: { kind: 'Name' as Kind.NAME, value: _name },\n        },\n        type: _type,\n        defaultValue: _defaultValue,\n        directives: directives(true),\n      });\n    } while (input.charCodeAt(idx) !== 41 /*')'*/);\n    idx++;\n    ignored();\n    return vars;\n  }\n}\n\nfunction fragmentDefinition(): ast.FragmentDefinitionNode {\n  let _name: string | undefined;\n  let _condition: string | undefined;\n  if ((_name = advance(nameRe)) == null) throw error('FragmentDefinition');\n  ignored();\n  if (advance(nameRe) !== 'on') throw error('FragmentDefinition');\n  ignored();\n  if ((_condition = advance(nameRe)) == null) throw error('FragmentDefinition');\n  ignored();\n  const _directives = directives(false);\n  if (input.charCodeAt(idx++) !== 123 /*'{'*/) throw error('FragmentDefinition');\n  ignored();\n  return {\n    kind: 'FragmentDefinition' as Kind.FRAGMENT_DEFINITION,\n    name: { kind: 'Name' as Kind.NAME, value: _name },\n    typeCondition: {\n      kind: 'NamedType' as Kind.NAMED_TYPE,\n      name: { kind: 'Name' as Kind.NAME, value: _condition },\n    },\n    directives: _directives,\n    selectionSet: selectionSet(),\n  };\n}\n\nconst definitionRe = /(?:query|mutation|subscription|fragment)/y;\n\nfunction operationDefinition(\n  operation: OperationTypeNode | undefined\n): ast.OperationDefinitionNode | undefined {\n  let _name: string | undefined;\n  let _variableDefinitions: ast.VariableDefinitionNode[] | undefined;\n  let _directives: ast.DirectiveNode[] | undefined;\n  if (operation) {\n    ignored();\n    _name = advance(nameRe);\n    _variableDefinitions = variableDefinitions();\n    _directives = directives(false);\n  }\n  if (input.charCodeAt(idx) === 123 /*'{'*/) {\n    idx++;\n    ignored();\n    return {\n      kind: 'OperationDefinition' as Kind.OPERATION_DEFINITION,\n      operation: operation || ('query' as OperationTypeNode.QUERY),\n      name: _name ? { kind: 'Name' as Kind.NAME, value: _name } : undefined,\n      variableDefinitions: _variableDefinitions,\n      directives: _directives,\n      selectionSet: selectionSet(),\n    };\n  }\n}\n\nfunction document(): ast.DocumentNode {\n  let match: string | undefined;\n  let definition: ast.OperationDefinitionNode | undefined;\n  ignored();\n  const definitions: ast.ExecutableDefinitionNode[] = [];\n  do {\n    if ((match = advance(definitionRe)) === 'fragment') {\n      ignored();\n      definitions.push(fragmentDefinition());\n    } else if ((definition = operationDefinition(match as OperationTypeNode)) != null) {\n      definitions.push(definition);\n    } else {\n      throw error('Document');\n    }\n  } while (idx < input.length);\n  return {\n    kind: 'Document' as Kind.DOCUMENT,\n    definitions,\n  };\n}\n\ntype ParseOptions = {\n  [option: string]: any;\n};\n\nexport function parse(\n  string: string | Source,\n  _options?: ParseOptions | undefined\n): ast.DocumentNode {\n  input = typeof string.body === 'string' ? string.body : string;\n  idx = 0;\n  return document();\n}\n\nexport function parseValue(\n  string: string | Source,\n  _options?: ParseOptions | undefined\n): ast.ValueNode {\n  input = typeof string.body === 'string' ? string.body : string;\n  idx = 0;\n  ignored();\n  return value(false);\n}\n\nexport function parseType(\n  string: string | Source,\n  _options?: ParseOptions | undefined\n): ast.TypeNode {\n  input = typeof string.body === 'string' ? string.body : string;\n  idx = 0;\n  return type();\n}\n", "import type { ASTNode } from './ast';\n\nexport const BREAK = {};\n\nexport function visit<N extends ASTNode>(root: N, visitor: ASTVisitor): N;\nexport function visit<R>(root: ASTNode, visitor: ASTReducer<R>): R;\n\nexport function visit(node: ASTNode, visitor: ASTVisitor | ASTReducer<any>) {\n  const ancestors: Array<ASTNode | ReadonlyArray<ASTNode>> = [];\n  const path: Array<string | number> = [];\n\n  function traverse(\n    node: ASTNode,\n    key?: string | number | undefined,\n    parent?: ASTNode | ReadonlyArray<ASTNode> | undefined\n  ) {\n    let hasEdited = false;\n\n    const enter =\n      (visitor[node.kind] && visitor[node.kind].enter) ||\n      visitor[node.kind] ||\n      (visitor as EnterLeaveVisitor<ASTNode>).enter;\n    const resultEnter = enter && enter.call(visitor, node, key, parent, path, ancestors);\n    if (resultEnter === false) {\n      return node;\n    } else if (resultEnter === null) {\n      return null;\n    } else if (resultEnter === BREAK) {\n      throw BREAK;\n    } else if (resultEnter && typeof resultEnter.kind === 'string') {\n      hasEdited = resultEnter !== node;\n      node = resultEnter;\n    }\n\n    if (parent) ancestors.push(parent);\n\n    let result: any;\n    const copy = { ...node };\n    for (const nodeKey in node) {\n      path.push(nodeKey);\n      let value = node[nodeKey];\n      if (Array.isArray(value)) {\n        const newValue: any[] = [];\n        for (let index = 0; index < value.length; index++) {\n          if (value[index] != null && typeof value[index].kind === 'string') {\n            ancestors.push(node);\n            path.push(index);\n            result = traverse(value[index], index, value);\n            path.pop();\n            ancestors.pop();\n            if (result == null) {\n              hasEdited = true;\n            } else {\n              hasEdited = hasEdited || result !== value[index];\n              newValue.push(result);\n            }\n          }\n        }\n        value = newValue;\n      } else if (value != null && typeof value.kind === 'string') {\n        result = traverse(value, nodeKey, node);\n        if (result !== undefined) {\n          hasEdited = hasEdited || value !== result;\n          value = result;\n        }\n      }\n\n      path.pop();\n      if (hasEdited) copy[nodeKey] = value;\n    }\n\n    if (parent) ancestors.pop();\n    const leave =\n      (visitor[node.kind] && visitor[node.kind].leave) ||\n      (visitor as EnterLeaveVisitor<ASTNode>).leave;\n    const resultLeave = leave && leave.call(visitor, node, key, parent, path, ancestors);\n    if (resultLeave === BREAK) {\n      throw BREAK;\n    } else if (resultLeave !== undefined) {\n      return resultLeave;\n    } else if (resultEnter !== undefined) {\n      return hasEdited ? copy : resultEnter;\n    } else {\n      return hasEdited ? copy : node;\n    }\n  }\n\n  try {\n    const result = traverse(node);\n    return result !== undefined && result !== false ? result : node;\n  } catch (error) {\n    if (error !== BREAK) throw error;\n    return node;\n  }\n}\n\nexport type ASTVisitor = EnterLeaveVisitor<ASTNode> | KindVisitor;\n\ntype KindVisitor = {\n  readonly [NodeT in ASTNode as NodeT['kind']]?: ASTVisitFn<NodeT> | EnterLeaveVisitor<NodeT>;\n};\n\ninterface EnterLeaveVisitor<TVisitedNode extends ASTNode> {\n  readonly enter?: ASTVisitFn<TVisitedNode> | undefined;\n  readonly leave?: ASTVisitFn<TVisitedNode> | undefined;\n}\n\nexport type ASTVisitFn<Node extends ASTNode> = (\n  node: Node,\n  key: string | number | undefined,\n  parent: ASTNode | ReadonlyArray<ASTNode> | undefined,\n  path: ReadonlyArray<string | number>,\n  ancestors: ReadonlyArray<ASTNode | ReadonlyArray<ASTNode>>\n) => any;\n\nexport type ASTReducer<R> = {\n  readonly [NodeT in ASTNode as NodeT['kind']]?: {\n    readonly enter?: ASTVisitFn<NodeT>;\n    readonly leave: ASTReducerFn<NodeT, R>;\n  };\n};\n\ntype ASTReducerFn<TReducedNode extends ASTNode, R> = (\n  node: { [K in keyof TReducedNode]: ReducedField<TReducedNode[K], R> },\n  key: string | number | undefined,\n  parent: ASTNode | ReadonlyArray<ASTNode> | undefined,\n  path: ReadonlyArray<string | number>,\n  ancestors: ReadonlyArray<ASTNode | ReadonlyArray<ASTNode>>\n) => R;\n\ntype ReducedField<T, R> = T extends null | undefined\n  ? T\n  : T extends ReadonlyArray<any>\n    ? ReadonlyArray<R>\n    : R;\n", "import type {\n  ASTNode,\n  NameNode,\n  DocumentNode,\n  VariableNode,\n  SelectionSetNode,\n  FieldNode,\n  ArgumentNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  NullValueNode,\n  EnumValueNode,\n  ListValueNode,\n  ObjectValueNode,\n  ObjectFieldNode,\n  DirectiveNode,\n  NamedTypeNode,\n  ListTypeNode,\n  NonNullTypeNode,\n} from './ast';\n\nfunction mapJoin<T>(value: readonly T[], joiner: string, mapper: (value: T) => string): string {\n  let out = '';\n  for (let index = 0; index < value.length; index++) {\n    if (index) out += joiner;\n    out += mapper(value[index]);\n  }\n  return out;\n}\n\nfunction printString(string: string) {\n  return JSON.stringify(string);\n}\n\nfunction printBlockString(string: string) {\n  return '\"\"\"\\n' + string.replace(/\"\"\"/g, '\\\\\"\"\"') + '\\n\"\"\"';\n}\n\nconst MAX_LINE_LENGTH = 80;\n\nlet LF = '\\n';\n\nconst nodes = {\n  OperationDefinition(node: OperationDefinitionNode): string {\n    let out: string = node.operation;\n    if (node.name) out += ' ' + node.name.value;\n    if (node.variableDefinitions && node.variableDefinitions.length) {\n      if (!node.name) out += ' ';\n      out += '(' + mapJoin(node.variableDefinitions, ', ', nodes.VariableDefinition) + ')';\n    }\n    if (node.directives && node.directives.length)\n      out += ' ' + mapJoin(node.directives, ' ', nodes.Directive);\n    return out !== 'query'\n      ? out + ' ' + nodes.SelectionSet(node.selectionSet)\n      : nodes.SelectionSet(node.selectionSet);\n  },\n  VariableDefinition(node: VariableDefinitionNode): string {\n    let out = nodes.Variable!(node.variable) + ': ' + _print(node.type);\n    if (node.defaultValue) out += ' = ' + _print(node.defaultValue);\n    if (node.directives && node.directives.length)\n      out += ' ' + mapJoin(node.directives, ' ', nodes.Directive);\n    return out;\n  },\n  Field(node: FieldNode): string {\n    let out = node.alias ? node.alias.value + ': ' + node.name.value : node.name.value;\n    if (node.arguments && node.arguments.length) {\n      const args = mapJoin(node.arguments, ', ', nodes.Argument);\n      if (out.length + args.length + 2 > MAX_LINE_LENGTH) {\n        out +=\n          '(' +\n          (LF += '  ') +\n          mapJoin(node.arguments, LF, nodes.Argument) +\n          (LF = LF.slice(0, -2)) +\n          ')';\n      } else {\n        out += '(' + args + ')';\n      }\n    }\n    if (node.directives && node.directives.length)\n      out += ' ' + mapJoin(node.directives, ' ', nodes.Directive);\n    if (node.selectionSet) out += ' ' + nodes.SelectionSet(node.selectionSet);\n    return out;\n  },\n  StringValue(node: StringValueNode): string {\n    if (node.block) {\n      return printBlockString(node.value).replace(/\\n/g, LF);\n    } else {\n      return printString(node.value);\n    }\n  },\n  BooleanValue(node: BooleanValueNode): string {\n    return '' + node.value;\n  },\n  NullValue(_node: NullValueNode): string {\n    return 'null';\n  },\n  IntValue(node: IntValueNode): string {\n    return node.value;\n  },\n  FloatValue(node: FloatValueNode): string {\n    return node.value;\n  },\n  EnumValue(node: EnumValueNode): string {\n    return node.value;\n  },\n  Name(node: NameNode): string {\n    return node.value;\n  },\n  Variable(node: VariableNode): string {\n    return '$' + node.name.value;\n  },\n  ListValue(node: ListValueNode): string {\n    return '[' + mapJoin(node.values, ', ', _print) + ']';\n  },\n  ObjectValue(node: ObjectValueNode): string {\n    return '{' + mapJoin(node.fields, ', ', nodes.ObjectField) + '}';\n  },\n  ObjectField(node: ObjectFieldNode): string {\n    return node.name.value + ': ' + _print(node.value);\n  },\n  Document(node: DocumentNode): string {\n    if (!node.definitions || !node.definitions.length) return '';\n    return mapJoin(node.definitions, '\\n\\n', _print);\n  },\n  SelectionSet(node: SelectionSetNode): string {\n    return '{' + (LF += '  ') + mapJoin(node.selections, LF, _print) + (LF = LF.slice(0, -2)) + '}';\n  },\n  Argument(node: ArgumentNode): string {\n    return node.name.value + ': ' + _print(node.value);\n  },\n  FragmentSpread(node: FragmentSpreadNode): string {\n    let out = '...' + node.name.value;\n    if (node.directives && node.directives.length)\n      out += ' ' + mapJoin(node.directives, ' ', nodes.Directive);\n    return out;\n  },\n  InlineFragment(node: InlineFragmentNode): string {\n    let out = '...';\n    if (node.typeCondition) out += ' on ' + node.typeCondition.name.value;\n    if (node.directives && node.directives.length)\n      out += ' ' + mapJoin(node.directives, ' ', nodes.Directive);\n    out += ' ' + nodes.SelectionSet(node.selectionSet);\n    return out;\n  },\n  FragmentDefinition(node: FragmentDefinitionNode): string {\n    let out = 'fragment ' + node.name.value;\n    out += ' on ' + node.typeCondition.name.value;\n    if (node.directives && node.directives.length)\n      out += ' ' + mapJoin(node.directives, ' ', nodes.Directive);\n    return out + ' ' + nodes.SelectionSet(node.selectionSet);\n  },\n  Directive(node: DirectiveNode): string {\n    let out = '@' + node.name.value;\n    if (node.arguments && node.arguments.length)\n      out += '(' + mapJoin(node.arguments, ', ', nodes.Argument) + ')';\n    return out;\n  },\n  NamedType(node: NamedTypeNode): string {\n    return node.name.value;\n  },\n  ListType(node: ListTypeNode): string {\n    return '[' + _print(node.type) + ']';\n  },\n  NonNullType(node: NonNullTypeNode): string {\n    return _print(node.type) + '!';\n  },\n} as const;\n\nconst _print = (node: ASTNode): string => nodes[node.kind](node);\n\nfunction print(node: ASTNode): string {\n  LF = '\\n';\n  return nodes[node.kind] ? nodes[node.kind](node) : '';\n}\n\nexport { print, printString, printBlockString };\n", "import type { TypeNode, ValueNode } from './ast';\nimport type { Maybe } from './types';\n\nexport function valueFromASTUntyped(\n  node: ValueNode,\n  variables?: Maybe<Record<string, any>>\n): unknown {\n  switch (node.kind) {\n    case 'NullValue':\n      return null;\n    case 'IntValue':\n      return parseInt(node.value, 10);\n    case 'FloatValue':\n      return parseFloat(node.value);\n    case 'StringValue':\n    case 'EnumValue':\n    case 'BooleanValue':\n      return node.value;\n    case 'ListValue': {\n      const values: unknown[] = [];\n      for (const value of node.values) values.push(valueFromASTUntyped(value, variables));\n      return values;\n    }\n    case 'ObjectValue': {\n      const obj = Object.create(null);\n      for (const field of node.fields)\n        obj[field.name.value] = valueFromASTUntyped(field.value, variables);\n      return obj;\n    }\n    case 'Variable':\n      return variables && variables[node.name.value];\n  }\n}\n\nexport function valueFromTypeNode(\n  node: ValueNode,\n  type: TypeNode,\n  variables?: Maybe<Record<string, any>>\n): unknown {\n  if (node.kind === 'Variable') {\n    const variableName = node.name.value;\n    return variables ? valueFromTypeNode(variables[variableName], type, variables) : undefined;\n  } else if (type.kind === 'NonNullType') {\n    return node.kind !== 'NullValue' ? valueFromTypeNode(node, type, variables) : undefined;\n  } else if (node.kind === 'NullValue') {\n    return null;\n  } else if (type.kind === 'ListType') {\n    if (node.kind === 'ListValue') {\n      const values: unknown[] = [];\n      for (const value of node.values) {\n        const coerced = valueFromTypeNode(value, type.type, variables);\n        if (coerced === undefined) {\n          return undefined;\n        } else {\n          values.push(coerced);\n        }\n      }\n      return values;\n    }\n  } else if (type.kind === 'NamedType') {\n    switch (type.name.value) {\n      case 'Int':\n      case 'Float':\n      case 'String':\n      case 'Bool':\n        return type.name.value + 'Value' === node.kind\n          ? valueFromASTUntyped(node, variables)\n          : undefined;\n      default:\n        return valueFromASTUntyped(node, variables);\n    }\n  }\n}\n", "var teardownPlaceholder = () => {};\n\nvar e = teardownPlaceholder;\n\nfunction start(e) {\n  return {\n    tag: 0,\n    0: e\n  };\n}\n\nfunction push(e) {\n  return {\n    tag: 1,\n    0: e\n  };\n}\n\nvar asyncIteratorSymbol = () => \"function\" == typeof Symbol && Symbol.asyncIterator || \"@@asyncIterator\";\n\nvar observableSymbol = () => \"function\" == typeof Symbol && Symbol.observable || \"@@observable\";\n\nvar identity = e => e;\n\nfunction buffer(r) {\n  return t => i => {\n    var a = [];\n    var f = e;\n    var n = e;\n    var s = !1;\n    var l = !1;\n    t((e => {\n      if (l) {} else if (0 === e) {\n        l = !0;\n        n(1);\n        if (a.length) {\n          i(push(a));\n        }\n        i(0);\n      } else if (0 === e.tag) {\n        f = e[0];\n        r((e => {\n          if (l) {} else if (0 === e) {\n            l = !0;\n            f(1);\n            if (a.length) {\n              i(push(a));\n            }\n            i(0);\n          } else if (0 === e.tag) {\n            n = e[0];\n          } else if (a.length) {\n            var r = push(a);\n            a = [];\n            i(r);\n          }\n        }));\n      } else {\n        a.push(e[0]);\n        if (!s) {\n          s = !0;\n          f(0);\n          n(0);\n        } else {\n          s = !1;\n        }\n      }\n    }));\n    i(start((e => {\n      if (1 === e && !l) {\n        l = !0;\n        f(1);\n        n(1);\n      } else if (!l && !s) {\n        s = !0;\n        f(0);\n        n(0);\n      }\n    })));\n  };\n}\n\nfunction concatMap(r) {\n  return t => i => {\n    var a = [];\n    var f = e;\n    var n = e;\n    var s = !1;\n    var l = !1;\n    var u = !1;\n    var o = !1;\n    function applyInnerSource(e) {\n      u = !0;\n      e((e => {\n        if (0 === e) {\n          if (u) {\n            u = !1;\n            if (a.length) {\n              applyInnerSource(r(a.shift()));\n            } else if (o) {\n              i(0);\n            } else if (!s) {\n              s = !0;\n              f(0);\n            }\n          }\n        } else if (0 === e.tag) {\n          l = !1;\n          (n = e[0])(0);\n        } else if (u) {\n          i(e);\n          if (l) {\n            l = !1;\n          } else {\n            n(0);\n          }\n        }\n      }));\n    }\n    t((e => {\n      if (o) {} else if (0 === e) {\n        o = !0;\n        if (!u && !a.length) {\n          i(0);\n        }\n      } else if (0 === e.tag) {\n        f = e[0];\n      } else {\n        s = !1;\n        if (u) {\n          a.push(e[0]);\n        } else {\n          applyInnerSource(r(e[0]));\n        }\n      }\n    }));\n    i(start((e => {\n      if (1 === e) {\n        if (!o) {\n          o = !0;\n          f(1);\n        }\n        if (u) {\n          u = !1;\n          n(1);\n        }\n      } else {\n        if (!o && !s) {\n          s = !0;\n          f(0);\n        }\n        if (u && !l) {\n          l = !0;\n          n(0);\n        }\n      }\n    })));\n  };\n}\n\nfunction concatAll(e) {\n  return concatMap(identity)(e);\n}\n\nfunction concat(e) {\n  return concatAll(r(e));\n}\n\nfunction filter(r) {\n  return t => i => {\n    var a = e;\n    t((e => {\n      if (0 === e) {\n        i(0);\n      } else if (0 === e.tag) {\n        a = e[0];\n        i(e);\n      } else if (!r(e[0])) {\n        a(0);\n      } else {\n        i(e);\n      }\n    }));\n  };\n}\n\nfunction map(e) {\n  return r => t => r((r => {\n    if (0 === r || 0 === r.tag) {\n      t(r);\n    } else {\n      t(push(e(r[0])));\n    }\n  }));\n}\n\nfunction mergeMap(r) {\n  return t => i => {\n    var a = [];\n    var f = e;\n    var n = !1;\n    var s = !1;\n    t((t => {\n      if (s) {} else if (0 === t) {\n        s = !0;\n        if (!a.length) {\n          i(0);\n        }\n      } else if (0 === t.tag) {\n        f = t[0];\n      } else {\n        n = !1;\n        !function applyInnerSource(r) {\n          var t = e;\n          r((e => {\n            if (0 === e) {\n              if (a.length) {\n                var r = a.indexOf(t);\n                if (r > -1) {\n                  (a = a.slice()).splice(r, 1);\n                }\n                if (!a.length) {\n                  if (s) {\n                    i(0);\n                  } else if (!n) {\n                    n = !0;\n                    f(0);\n                  }\n                }\n              }\n            } else if (0 === e.tag) {\n              a.push(t = e[0]);\n              t(0);\n            } else if (a.length) {\n              i(e);\n              t(0);\n            }\n          }));\n        }(r(t[0]));\n        if (!n) {\n          n = !0;\n          f(0);\n        }\n      }\n    }));\n    i(start((e => {\n      if (1 === e) {\n        if (!s) {\n          s = !0;\n          f(1);\n        }\n        for (var r = 0, t = a, i = a.length; r < i; r++) {\n          t[r](1);\n        }\n        a.length = 0;\n      } else {\n        if (!s && !n) {\n          n = !0;\n          f(0);\n        } else {\n          n = !1;\n        }\n        for (var l = 0, u = a, o = a.length; l < o; l++) {\n          u[l](0);\n        }\n      }\n    })));\n  };\n}\n\nfunction mergeAll(e) {\n  return mergeMap(identity)(e);\n}\n\nfunction merge(e) {\n  return mergeAll(r(e));\n}\n\nfunction onEnd(e) {\n  return r => t => {\n    var i = !1;\n    r((r => {\n      if (i) {} else if (0 === r) {\n        i = !0;\n        t(0);\n        e();\n      } else if (0 === r.tag) {\n        var a = r[0];\n        t(start((r => {\n          if (1 === r) {\n            i = !0;\n            a(1);\n            e();\n          } else {\n            a(r);\n          }\n        })));\n      } else {\n        t(r);\n      }\n    }));\n  };\n}\n\nfunction onPush(e) {\n  return r => t => {\n    var i = !1;\n    r((r => {\n      if (i) {} else if (0 === r) {\n        i = !0;\n        t(0);\n      } else if (0 === r.tag) {\n        var a = r[0];\n        t(start((e => {\n          if (1 === e) {\n            i = !0;\n          }\n          a(e);\n        })));\n      } else {\n        e(r[0]);\n        t(r);\n      }\n    }));\n  };\n}\n\nfunction onStart(e) {\n  return r => t => r((r => {\n    if (0 === r) {\n      t(0);\n    } else if (0 === r.tag) {\n      t(r);\n      e();\n    } else {\n      t(r);\n    }\n  }));\n}\n\nfunction sample(r) {\n  return t => i => {\n    var a = e;\n    var f = e;\n    var n;\n    var s = !1;\n    var l = !1;\n    t((e => {\n      if (l) {} else if (0 === e) {\n        l = !0;\n        f(1);\n        i(0);\n      } else if (0 === e.tag) {\n        a = e[0];\n      } else {\n        n = e[0];\n        if (!s) {\n          s = !0;\n          f(0);\n          a(0);\n        } else {\n          s = !1;\n        }\n      }\n    }));\n    r((e => {\n      if (l) {} else if (0 === e) {\n        l = !0;\n        a(1);\n        i(0);\n      } else if (0 === e.tag) {\n        f = e[0];\n      } else if (void 0 !== n) {\n        var r = push(n);\n        n = void 0;\n        i(r);\n      }\n    }));\n    i(start((e => {\n      if (1 === e && !l) {\n        l = !0;\n        a(1);\n        f(1);\n      } else if (!l && !s) {\n        s = !0;\n        a(0);\n        f(0);\n      }\n    })));\n  };\n}\n\nfunction scan(e, r) {\n  return t => i => {\n    var a = r;\n    t((r => {\n      if (0 === r) {\n        i(0);\n      } else if (0 === r.tag) {\n        i(r);\n      } else {\n        i(push(a = e(a, r[0])));\n      }\n    }));\n  };\n}\n\nfunction share(r) {\n  var t = [];\n  var i = e;\n  var a = !1;\n  return e => {\n    t.push(e);\n    if (1 === t.length) {\n      r((e => {\n        if (0 === e) {\n          for (var r = 0, f = t, n = t.length; r < n; r++) {\n            f[r](0);\n          }\n          t.length = 0;\n        } else if (0 === e.tag) {\n          i = e[0];\n        } else {\n          a = !1;\n          for (var s = 0, l = t, u = t.length; s < u; s++) {\n            l[s](e);\n          }\n        }\n      }));\n    }\n    e(start((r => {\n      if (1 === r) {\n        var f = t.indexOf(e);\n        if (f > -1) {\n          (t = t.slice()).splice(f, 1);\n        }\n        if (!t.length) {\n          i(1);\n        }\n      } else if (!a) {\n        a = !0;\n        i(0);\n      }\n    })));\n  };\n}\n\nfunction skip(r) {\n  return t => i => {\n    var a = e;\n    var f = r;\n    t((e => {\n      if (0 === e) {\n        i(0);\n      } else if (0 === e.tag) {\n        a = e[0];\n        i(e);\n      } else if (f-- > 0) {\n        a(0);\n      } else {\n        i(e);\n      }\n    }));\n  };\n}\n\nfunction skipUntil(r) {\n  return t => i => {\n    var a = e;\n    var f = e;\n    var n = !0;\n    var s = !1;\n    var l = !1;\n    t((e => {\n      if (l) {} else if (0 === e) {\n        l = !0;\n        if (n) {\n          f(1);\n        }\n        i(0);\n      } else if (0 === e.tag) {\n        a = e[0];\n        r((e => {\n          if (0 === e) {\n            if (n) {\n              l = !0;\n              a(1);\n            }\n          } else if (0 === e.tag) {\n            (f = e[0])(0);\n          } else {\n            n = !1;\n            f(1);\n          }\n        }));\n      } else if (!n) {\n        s = !1;\n        i(e);\n      } else if (!s) {\n        s = !0;\n        a(0);\n        f(0);\n      } else {\n        s = !1;\n      }\n    }));\n    i(start((e => {\n      if (1 === e && !l) {\n        l = !0;\n        a(1);\n        if (n) {\n          f(1);\n        }\n      } else if (!l && !s) {\n        s = !0;\n        if (n) {\n          f(0);\n        }\n        a(0);\n      }\n    })));\n  };\n}\n\nfunction skipWhile(r) {\n  return t => i => {\n    var a = e;\n    var f = !0;\n    t((e => {\n      if (0 === e) {\n        i(0);\n      } else if (0 === e.tag) {\n        a = e[0];\n        i(e);\n      } else if (f) {\n        if (r(e[0])) {\n          a(0);\n        } else {\n          f = !1;\n          i(e);\n        }\n      } else {\n        i(e);\n      }\n    }));\n  };\n}\n\nfunction switchMap(r) {\n  return t => i => {\n    var a = e;\n    var f = e;\n    var n = !1;\n    var s = !1;\n    var l = !1;\n    var u = !1;\n    t((t => {\n      if (u) {} else if (0 === t) {\n        u = !0;\n        if (!l) {\n          i(0);\n        }\n      } else if (0 === t.tag) {\n        a = t[0];\n      } else {\n        if (l) {\n          f(1);\n          f = e;\n        }\n        if (!n) {\n          n = !0;\n          a(0);\n        } else {\n          n = !1;\n        }\n        !function applyInnerSource(e) {\n          l = !0;\n          e((e => {\n            if (!l) {} else if (0 === e) {\n              l = !1;\n              if (u) {\n                i(0);\n              } else if (!n) {\n                n = !0;\n                a(0);\n              }\n            } else if (0 === e.tag) {\n              s = !1;\n              (f = e[0])(0);\n            } else {\n              i(e);\n              if (!s) {\n                f(0);\n              } else {\n                s = !1;\n              }\n            }\n          }));\n        }(r(t[0]));\n      }\n    }));\n    i(start((e => {\n      if (1 === e) {\n        if (!u) {\n          u = !0;\n          a(1);\n        }\n        if (l) {\n          l = !1;\n          f(1);\n        }\n      } else {\n        if (!u && !n) {\n          n = !0;\n          a(0);\n        }\n        if (l && !s) {\n          s = !0;\n          f(0);\n        }\n      }\n    })));\n  };\n}\n\nfunction switchAll(e) {\n  return switchMap(identity)(e);\n}\n\nfunction take(r) {\n  return t => i => {\n    var a = e;\n    var f = !1;\n    var n = 0;\n    t((e => {\n      if (f) {} else if (0 === e) {\n        f = !0;\n        i(0);\n      } else if (0 === e.tag) {\n        if (r <= 0) {\n          f = !0;\n          i(0);\n          e[0](1);\n        } else {\n          a = e[0];\n        }\n      } else if (n++ < r) {\n        i(e);\n        if (!f && n >= r) {\n          f = !0;\n          i(0);\n          a(1);\n        }\n      } else {\n        i(e);\n      }\n    }));\n    i(start((e => {\n      if (1 === e && !f) {\n        f = !0;\n        a(1);\n      } else if (0 === e && !f && n < r) {\n        a(0);\n      }\n    })));\n  };\n}\n\nfunction takeLast(t) {\n  return i => a => {\n    var f = [];\n    var n = e;\n    i((e => {\n      if (0 === e) {\n        r(f)(a);\n      } else if (0 === e.tag) {\n        if (t <= 0) {\n          e[0](1);\n          r(f)(a);\n        } else {\n          (n = e[0])(0);\n        }\n      } else {\n        if (f.length >= t && t) {\n          f.shift();\n        }\n        f.push(e[0]);\n        n(0);\n      }\n    }));\n  };\n}\n\nfunction takeUntil(r) {\n  return t => i => {\n    var a = e;\n    var f = e;\n    var n = !1;\n    t((e => {\n      if (n) {} else if (0 === e) {\n        n = !0;\n        f(1);\n        i(0);\n      } else if (0 === e.tag) {\n        a = e[0];\n        r((e => {\n          if (0 === e) {} else if (0 === e.tag) {\n            (f = e[0])(0);\n          } else {\n            n = !0;\n            f(1);\n            a(1);\n            i(0);\n          }\n        }));\n      } else {\n        i(e);\n      }\n    }));\n    i(start((e => {\n      if (1 === e && !n) {\n        n = !0;\n        a(1);\n        f(1);\n      } else if (!n) {\n        a(0);\n      }\n    })));\n  };\n}\n\nfunction takeWhile(r, t) {\n  return i => a => {\n    var f = e;\n    var n = !1;\n    i((e => {\n      if (n) {} else if (0 === e) {\n        n = !0;\n        a(0);\n      } else if (0 === e.tag) {\n        f = e[0];\n        a(e);\n      } else if (!r(e[0])) {\n        n = !0;\n        if (t) {\n          a(e);\n        }\n        a(0);\n        f(1);\n      } else {\n        a(e);\n      }\n    }));\n  };\n}\n\nfunction debounce(e) {\n  return r => t => {\n    var i;\n    var a = !1;\n    var f = !1;\n    r((r => {\n      if (f) {} else if (0 === r) {\n        f = !0;\n        if (i) {\n          a = !0;\n        } else {\n          t(0);\n        }\n      } else if (0 === r.tag) {\n        var n = r[0];\n        t(start((e => {\n          if (1 === e && !f) {\n            f = !0;\n            a = !1;\n            if (i) {\n              clearTimeout(i);\n            }\n            n(1);\n          } else if (!f) {\n            n(0);\n          }\n        })));\n      } else {\n        if (i) {\n          clearTimeout(i);\n        }\n        i = setTimeout((() => {\n          i = void 0;\n          t(r);\n          if (a) {\n            t(0);\n          }\n        }), e(r[0]));\n      }\n    }));\n  };\n}\n\nfunction delay(e) {\n  return r => t => {\n    var i = 0;\n    r((r => {\n      if (0 !== r && 0 === r.tag) {\n        t(r);\n      } else {\n        i++;\n        setTimeout((() => {\n          if (i) {\n            i--;\n            t(r);\n          }\n        }), e);\n      }\n    }));\n  };\n}\n\nfunction throttle(e) {\n  return r => t => {\n    var i = !1;\n    var a;\n    r((r => {\n      if (0 === r) {\n        if (a) {\n          clearTimeout(a);\n        }\n        t(0);\n      } else if (0 === r.tag) {\n        var f = r[0];\n        t(start((e => {\n          if (1 === e) {\n            if (a) {\n              clearTimeout(a);\n            }\n            f(1);\n          } else {\n            f(0);\n          }\n        })));\n      } else if (!i) {\n        i = !0;\n        if (a) {\n          clearTimeout(a);\n        }\n        a = setTimeout((() => {\n          a = void 0;\n          i = !1;\n        }), e(r[0]));\n        t(r);\n      }\n    }));\n  };\n}\n\nfunction lazy(e) {\n  return r => e()(r);\n}\n\nfunction fromAsyncIterable(e) {\n  return r => {\n    var t = e[asyncIteratorSymbol()] && e[asyncIteratorSymbol()]() || e;\n    var i = !1;\n    var a = !1;\n    var f = !1;\n    var n;\n    r(start((async e => {\n      if (1 === e) {\n        i = !0;\n        if (t.return) {\n          t.return();\n        }\n      } else if (a) {\n        f = !0;\n      } else {\n        for (f = a = !0; f && !i; ) {\n          if ((n = await t.next()).done) {\n            i = !0;\n            if (t.return) {\n              await t.return();\n            }\n            r(0);\n          } else {\n            try {\n              f = !1;\n              r(push(n.value));\n            } catch (e) {\n              if (t.throw) {\n                if (i = !!(await t.throw(e)).done) {\n                  r(0);\n                }\n              } else {\n                throw e;\n              }\n            }\n          }\n        }\n        a = !1;\n      }\n    })));\n  };\n}\n\nfunction fromIterable(e) {\n  if (e[Symbol.asyncIterator]) {\n    return fromAsyncIterable(e);\n  }\n  return r => {\n    var t = e[Symbol.iterator]();\n    var i = !1;\n    var a = !1;\n    var f = !1;\n    var n;\n    r(start((e => {\n      if (1 === e) {\n        i = !0;\n        if (t.return) {\n          t.return();\n        }\n      } else if (a) {\n        f = !0;\n      } else {\n        for (f = a = !0; f && !i; ) {\n          if ((n = t.next()).done) {\n            i = !0;\n            if (t.return) {\n              t.return();\n            }\n            r(0);\n          } else {\n            try {\n              f = !1;\n              r(push(n.value));\n            } catch (e) {\n              if (t.throw) {\n                if (i = !!t.throw(e).done) {\n                  r(0);\n                }\n              } else {\n                throw e;\n              }\n            }\n          }\n        }\n        a = !1;\n      }\n    })));\n  };\n}\n\nvar r = fromIterable;\n\nfunction fromValue(e) {\n  return r => {\n    var t = !1;\n    r(start((i => {\n      if (1 === i) {\n        t = !0;\n      } else if (!t) {\n        t = !0;\n        r(push(e));\n        r(0);\n      }\n    })));\n  };\n}\n\nfunction make(e) {\n  return r => {\n    var t = !1;\n    var i = e({\n      next(e) {\n        if (!t) {\n          r(push(e));\n        }\n      },\n      complete() {\n        if (!t) {\n          t = !0;\n          r(0);\n        }\n      }\n    });\n    r(start((e => {\n      if (1 === e && !t) {\n        t = !0;\n        i();\n      }\n    })));\n  };\n}\n\nfunction makeSubject() {\n  var e;\n  var r;\n  return {\n    source: share(make((t => {\n      e = t.next;\n      r = t.complete;\n      return teardownPlaceholder;\n    }))),\n    next(r) {\n      if (e) {\n        e(r);\n      }\n    },\n    complete() {\n      if (r) {\n        r();\n      }\n    }\n  };\n}\n\nvar empty = e => {\n  var r = !1;\n  e(start((t => {\n    if (1 === t) {\n      r = !0;\n    } else if (!r) {\n      r = !0;\n      e(0);\n    }\n  })));\n};\n\nvar never = r => {\n  r(start(e));\n};\n\nfunction interval(e) {\n  return make((r => {\n    var t = 0;\n    var i = setInterval((() => r.next(t++)), e);\n    return () => clearInterval(i);\n  }));\n}\n\nfunction fromDomEvent(e, r) {\n  return make((t => {\n    e.addEventListener(r, t.next);\n    return () => e.removeEventListener(r, t.next);\n  }));\n}\n\nfunction fromPromise(e) {\n  return make((r => {\n    e.then((e => {\n      Promise.resolve(e).then((() => {\n        r.next(e);\n        r.complete();\n      }));\n    }));\n    return teardownPlaceholder;\n  }));\n}\n\nfunction subscribe(r) {\n  return t => {\n    var i = e;\n    var a = !1;\n    t((e => {\n      if (0 === e) {\n        a = !0;\n      } else if (0 === e.tag) {\n        (i = e[0])(0);\n      } else if (!a) {\n        r(e[0]);\n        i(0);\n      }\n    }));\n    return {\n      unsubscribe() {\n        if (!a) {\n          a = !0;\n          i(1);\n        }\n      }\n    };\n  };\n}\n\nfunction forEach(e) {\n  return r => {\n    subscribe(e)(r);\n  };\n}\n\nfunction publish(e) {\n  subscribe((e => {}))(e);\n}\n\nvar t = {\n  done: !0\n};\n\nvar toAsyncIterable = r => {\n  var i = [];\n  var a = !1;\n  var f = !1;\n  var n = !1;\n  var s = e;\n  var l;\n  return {\n    async next() {\n      if (!f) {\n        f = !0;\n        r((e => {\n          if (a) {} else if (0 === e) {\n            if (l) {\n              l = l(t);\n            }\n            a = !0;\n          } else if (0 === e.tag) {\n            n = !0;\n            (s = e[0])(0);\n          } else {\n            n = !1;\n            if (l) {\n              l = l({\n                value: e[0],\n                done: !1\n              });\n            } else {\n              i.push(e[0]);\n            }\n          }\n        }));\n      }\n      if (a && !i.length) {\n        return t;\n      } else if (!a && !n && i.length <= 1) {\n        n = !0;\n        s(0);\n      }\n      return i.length ? {\n        value: i.shift(),\n        done: !1\n      } : new Promise((e => l = e));\n    },\n    async return() {\n      if (!a) {\n        l = s(1);\n      }\n      a = !0;\n      return t;\n    },\n    [asyncIteratorSymbol()]() {\n      return this;\n    }\n  };\n};\n\nfunction toArray(r) {\n  var t = [];\n  var i = e;\n  var a = !1;\n  r((e => {\n    if (0 === e) {\n      a = !0;\n    } else if (0 === e.tag) {\n      (i = e[0])(0);\n    } else {\n      t.push(e[0]);\n      i(0);\n    }\n  }));\n  if (!a) {\n    i(1);\n  }\n  return t;\n}\n\nfunction toPromise(r) {\n  return new Promise((t => {\n    var i = e;\n    var a;\n    r((e => {\n      if (0 === e) {\n        Promise.resolve(a).then(t);\n      } else if (0 === e.tag) {\n        (i = e[0])(0);\n      } else {\n        a = e[0];\n        i(0);\n      }\n    }));\n  }));\n}\n\nfunction zip(r) {\n  var t = Object.keys(r).length;\n  return i => {\n    var a = new Set;\n    var f = Array.isArray(r) ? new Array(t).fill(e) : {};\n    var n = Array.isArray(r) ? new Array(t) : {};\n    var s = !1;\n    var l = !1;\n    var u = !1;\n    var o = 0;\n    var loop = function(v) {\n      r[v]((c => {\n        if (0 === c) {\n          if (o >= t - 1) {\n            u = !0;\n            i(0);\n          } else {\n            o++;\n          }\n        } else if (0 === c.tag) {\n          f[v] = c[0];\n        } else if (!u) {\n          n[v] = c[0];\n          a.add(v);\n          if (!s && a.size < t) {\n            if (!l) {\n              for (var h in r) {\n                if (!a.has(h)) {\n                  (f[h] || e)(0);\n                }\n              }\n            } else {\n              l = !1;\n            }\n          } else {\n            s = !0;\n            l = !1;\n            i(push(Array.isArray(n) ? n.slice() : {\n              ...n\n            }));\n          }\n        }\n      }));\n    };\n    for (var v in r) {\n      loop(v);\n    }\n    i(start((e => {\n      if (u) {} else if (1 === e) {\n        u = !0;\n        for (var r in f) {\n          f[r](1);\n        }\n      } else if (!l) {\n        l = !0;\n        for (var t in f) {\n          f[t](0);\n        }\n      }\n    })));\n  };\n}\n\nfunction combine(...e) {\n  return zip(e);\n}\n\nfunction fromObservable(e) {\n  return r => {\n    var t = (e[observableSymbol()] ? e[observableSymbol()]() : e).subscribe({\n      next(e) {\n        r(push(e));\n      },\n      complete() {\n        r(0);\n      },\n      error(e) {\n        throw e;\n      }\n    });\n    r(start((e => {\n      if (1 === e) {\n        t.unsubscribe();\n      }\n    })));\n  };\n}\n\nfunction toObservable(r) {\n  return {\n    subscribe(t, i, a) {\n      var f = \"object\" == typeof t ? t : {\n        next: t,\n        error: i,\n        complete: a\n      };\n      var n = e;\n      var s = !1;\n      r((e => {\n        if (s) {} else if (0 === e) {\n          s = !0;\n          if (f.complete) {\n            f.complete();\n          }\n        } else if (0 === e.tag) {\n          (n = e[0])(0);\n        } else {\n          f.next(e[0]);\n          n(0);\n        }\n      }));\n      var l = {\n        closed: !1,\n        unsubscribe() {\n          l.closed = !0;\n          s = !0;\n          n(1);\n        }\n      };\n      return l;\n    },\n    [observableSymbol()]() {\n      return this;\n    }\n  };\n}\n\nfunction fromCallbag(e) {\n  return r => {\n    e(0, ((e, t) => {\n      if (0 === e) {\n        r(start((e => {\n          t(e + 1);\n        })));\n      } else if (1 === e) {\n        r(push(t));\n      } else {\n        r(0);\n      }\n    }));\n  };\n}\n\nfunction toCallbag(e) {\n  return (r, t) => {\n    if (0 === r) {\n      e((e => {\n        if (0 === e) {\n          t(2);\n        } else if (0 === e.tag) {\n          t(0, (r => {\n            if (r < 3) {\n              e[0](r - 1);\n            }\n          }));\n        } else {\n          t(1, e[0]);\n        }\n      }));\n    }\n  };\n}\n\nvar pipe = (...e) => {\n  var r = e[0];\n  for (var t = 1, i = e.length; t < i; t++) {\n    r = e[t](r);\n  }\n  return r;\n};\n\nexport { buffer, combine, concat, concatAll, concatMap, debounce, delay, empty, filter, mergeAll as flatten, forEach, r as fromArray, fromAsyncIterable, fromCallbag, fromDomEvent, fromIterable, fromObservable, fromPromise, fromValue, interval, lazy, make, makeSubject, map, merge, mergeAll, mergeMap, never, onEnd, onPush, onStart, pipe, publish, sample, scan, share, skip, skipUntil, skipWhile, subscribe, switchAll, switchMap, take, takeLast, takeUntil, takeWhile, onPush as tap, throttle, toArray, toAsyncIterable, toCallbag, toObservable, toPromise, zip };\n//# sourceMappingURL=wonka.mjs.map\n", "import { GraphQLError } from '@0no-co/graphql.web';\nimport type { ErrorLike } from '../types';\n\nconst generateErrorMessage = (\n  networkErr?: Error,\n  graphQlErrs?: GraphQLError[]\n) => {\n  let error = '';\n  if (networkErr) return `[Network] ${networkErr.message}`;\n  if (graphQlErrs) {\n    for (const err of graphQlErrs) {\n      if (error) error += '\\n';\n      error += `[GraphQL] ${err.message}`;\n    }\n  }\n  return error;\n};\n\nconst rehydrateGraphQlError = (error: any): GraphQLError => {\n  if (\n    error &&\n    error.message &&\n    (error.extensions || error.name === 'GraphQLError')\n  ) {\n    return error;\n  } else if (typeof error === 'object' && error.message) {\n    return new GraphQLError(\n      error.message,\n      error.nodes,\n      error.source,\n      error.positions,\n      error.path,\n      error,\n      error.extensions || {}\n    );\n  } else {\n    return new GraphQLError(error as any);\n  }\n};\n\n/** An abstracted `Error` that provides either a `networkError` or `graphQLErrors`.\n *\n * @remarks\n * During a GraphQL request, either the request can fail entirely, causing a network error,\n * or the GraphQL execution or fields can fail, which will cause an {@link ExecutionResult}\n * to contain an array of GraphQL errors.\n *\n * The `CombinedError` abstracts and normalizes both failure cases. When {@link OperationResult.error}\n * is set to this error, the `CombinedError` abstracts all errors, making it easier to handle only\n * a subset of error cases.\n *\n * @see {@link https://urql.dev/goto/docs/basics/errors} for more information on handling\n * GraphQL errors and the `CombinedError`.\n */\nexport class CombinedError extends Error {\n  public name: string;\n  public message: string;\n\n  /** A list of GraphQL errors rehydrated from a {@link ExecutionResult}.\n   *\n   * @remarks\n   * If an {@link ExecutionResult} received from the API contains a list of errors,\n   * the `CombinedError` will rehydrate them, normalize them to\n   * {@link GraphQLError | GraphQLErrors} and list them here.\n   * An empty list indicates that no GraphQL error has been sent by the API.\n   */\n  public graphQLErrors: GraphQLError[];\n\n  /** Set to an error, if a GraphQL request has failed outright.\n   *\n   * @remarks\n   * A GraphQL over HTTP request may fail and not reach the API. Any error that\n   * prevents a GraphQl request outright, will be considered a “network error” and\n   * set here.\n   */\n  public networkError?: Error;\n\n  /** Set to the {@link Response} object a fetch exchange received.\n   *\n   * @remarks\n   * If a built-in fetch {@link Exchange} is used in `urql`, this may\n   * be set to the {@link Response} object of the Fetch API response.\n   * However, since `urql` doesn’t assume that all users will use HTTP\n   * as the only or exclusive transport for GraphQL this property is\n   * neither typed nor guaranteed and may be re-used for other purposes\n   * by non-fetch exchanges.\n   *\n   * Hint: It can be useful to use `response.status` here, however, if\n   * you plan on relying on this being a {@link Response} in your app,\n   * which it is by default, then make sure you add some extra checks\n   * before blindly assuming so!\n   */\n  public response?: any;\n\n  constructor(input: {\n    networkError?: Error;\n    graphQLErrors?: Array<string | ErrorLike>;\n    response?: any;\n  }) {\n    const normalizedGraphQLErrors = (input.graphQLErrors || []).map(\n      rehydrateGraphQlError\n    );\n    const message = generateErrorMessage(\n      input.networkError,\n      normalizedGraphQLErrors\n    );\n\n    super(message);\n\n    this.name = 'CombinedError';\n    this.message = message;\n    this.graphQLErrors = normalizedGraphQLErrors;\n    this.networkError = input.networkError;\n    this.response = input.response;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n", "/** A hash value as computed by {@link phash}.\n *\n * @remarks\n * Typically `HashValue`s are used as hashes and keys of GraphQL documents,\n * variables, and combined, for GraphQL requests.\n */\nexport type HashValue = number & {\n  /** Marker to indicate that a `HashValue` may not be created by a user.\n   *\n   * @remarks\n   * `HashValue`s are created by {@link phash} and are marked as such to not mix them\n   * up with other numbers and prevent them from being created or used outside of this\n   * hashing function.\n   *\n   * @internal\n   */\n  readonly _opaque: unique symbol;\n};\n\n/** Computes a djb2 hash of the given string.\n *\n * @param x - the string to be hashed\n * @param seed - optionally a prior hash for progressive hashing\n * @returns a hash value, i.e. a number\n *\n * @remark\n * This is the hashing function used throughout `urql`, primarily to compute\n * {@link Operation.key}.\n *\n * @see {@link http://www.cse.yorku.ca/~oz/hash.html#djb2} for a further description of djb2.\n */\nexport const phash = (x: string, seed?: HashValue): HashValue => {\n  let h = (seed || 5381) | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++)\n    h = (h << 5) + h + x.charCodeAt(i);\n  return h as HashValue;\n};\n", "export type FileMap = Map<string, File | Blob>;\n\nconst seen = new Set();\nconst cache = new WeakMap();\n\nconst stringify = (x: any): string => {\n  if (x === null || seen.has(x)) {\n    return 'null';\n  } else if (typeof x !== 'object') {\n    return JSON.stringify(x) || '';\n  } else if (x.toJSON) {\n    return stringify(x.toJSON());\n  } else if (Array.isArray(x)) {\n    let out = '[';\n    for (const value of x) {\n      if (out.length > 1) out += ',';\n      out += stringify(value) || 'null';\n    }\n    out += ']';\n    return out;\n  } else if (\n    (FileConstructor !== NoopConstructor && x instanceof FileConstructor) ||\n    (BlobConstructor !== NoopConstructor && x instanceof BlobConstructor)\n  ) {\n    return 'null';\n  }\n\n  const keys = Object.keys(x).sort();\n  if (\n    !keys.length &&\n    x.constructor &&\n    Object.getPrototypeOf(x).constructor !== Object.prototype.constructor\n  ) {\n    const key = cache.get(x) || Math.random().toString(36).slice(2);\n    cache.set(x, key);\n    return stringify({ __key: key });\n  }\n\n  seen.add(x);\n  let out = '{';\n  for (const key of keys) {\n    const value = stringify(x[key]);\n    if (value) {\n      if (out.length > 1) out += ',';\n      out += stringify(key) + ':' + value;\n    }\n  }\n\n  seen.delete(x);\n  out += '}';\n  return out;\n};\n\nconst extract = (map: FileMap, path: string, x: any) => {\n  if (x == null || typeof x !== 'object' || x.toJSON || seen.has(x)) {\n    /*noop*/\n  } else if (Array.isArray(x)) {\n    for (let i = 0, l = x.length; i < l; i++)\n      extract(map, `${path}.${i}`, x[i]);\n  } else if (x instanceof FileConstructor || x instanceof BlobConstructor) {\n    map.set(path, x as File | Blob);\n  } else {\n    seen.add(x);\n    for (const key of Object.keys(x)) extract(map, `${path}.${key}`, x[key]);\n  }\n};\n\n/** A stable stringifier for GraphQL variables objects.\n *\n * @param x - any JSON-like data.\n * @return A JSON string.\n *\n * @remarks\n * This utility creates a stable JSON string from any passed data,\n * and protects itself from throwing.\n *\n * The JSON string is stable insofar as objects’ keys are sorted,\n * and instances of non-plain objects are replaced with random keys\n * replacing their values, which remain stable for the objects’\n * instance.\n */\nexport const stringifyVariables = (x: any): string => {\n  seen.clear();\n  return stringify(x);\n};\n\nclass NoopConstructor {}\nconst FileConstructor = typeof File !== 'undefined' ? File : NoopConstructor;\nconst BlobConstructor = typeof Blob !== 'undefined' ? Blob : NoopConstructor;\n\nexport const extractFiles = (x: any): FileMap => {\n  const map: FileMap = new Map();\n  if (\n    FileConstructor !== NoopConstructor ||\n    BlobConstructor !== NoopConstructor\n  ) {\n    seen.clear();\n    extract(map, 'variables', x);\n  }\n  return map;\n};\n", "import { Kind, parse, print } from '@0no-co/graphql.web';\nimport type { DocumentNode, DefinitionNode } from './graphql';\nimport type { HashValue } from './hash';\nimport { phash } from './hash';\nimport { stringifyVariables } from './variables';\n\nimport type {\n  DocumentInput,\n  TypedDocumentNode,\n  AnyVariables,\n  GraphQLRequest,\n  RequestExtensions,\n} from '../types';\n\n/** A `DocumentNode` annotated with its hashed key.\n * @internal\n */\nexport type KeyedDocumentNode = TypedDocumentNode & {\n  __key: HashValue;\n};\n\nconst SOURCE_NAME = 'gql';\nconst GRAPHQL_STRING_RE = /(\"{3}[\\s\\S]*\"{3}|\"(?:\\\\.|[^\"])*\")/g;\nconst REPLACE_CHAR_RE = /(?:#[^\\n\\r]+)?(?:[\\r\\n]+|$)/g;\n\nconst replaceOutsideStrings = (str: string, idx: number) =>\n  idx % 2 === 0 ? str.replace(REPLACE_CHAR_RE, '\\n') : str;\n\n/** Sanitizes a GraphQL document string by replacing comments and redundant newlines in it. */\nconst sanitizeDocument = (node: string): string =>\n  node.split(GRAPHQL_STRING_RE).map(replaceOutsideStrings).join('').trim();\n\nconst prints = new Map<DocumentNode | DefinitionNode, string>();\nconst docs = new Map<HashValue, KeyedDocumentNode>();\n\n/** A cached printing function for GraphQL documents.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A normalized printed string of the passed GraphQL document.\n *\n * @remarks\n * This function accepts a GraphQL query string or {@link DocumentNode},\n * then prints and sanitizes it. The sanitizer takes care of removing\n * comments, which otherwise alter the key of the document although the\n * document is otherwise equivalent to another.\n *\n * When a {@link DocumentNode} is passed to this function, it caches its\n * output by modifying the `loc.source.body` property on the GraphQL node.\n */\nexport const stringifyDocument = (\n  node: string | DefinitionNode | DocumentNode\n): string => {\n  let printed: string;\n  if (typeof node === 'string') {\n    printed = sanitizeDocument(node);\n  } else if (node.loc && docs.get((node as KeyedDocumentNode).__key) === node) {\n    printed = node.loc.source.body;\n  } else {\n    printed = prints.get(node) || sanitizeDocument(print(node));\n    prints.set(node, printed);\n  }\n\n  if (typeof node !== 'string' && !node.loc) {\n    (node as any).loc = {\n      start: 0,\n      end: printed.length,\n      source: {\n        body: printed,\n        name: SOURCE_NAME,\n        locationOffset: { line: 1, column: 1 },\n      },\n    };\n  }\n\n  return printed;\n};\n\n/** Computes the hash for a document's string using {@link stringifyDocument}'s output.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link HashValue}\n *\n * @privateRemarks\n * This function adds the operation name of the document to the hash, since sometimes\n * a merged document with multiple operations may be used. Although `urql` requires a\n * `DocumentNode` to only contain a single operation, when the cached `loc.source.body`\n * of a `DocumentNode` is used, this string may still contain multiple operations and\n * the resulting hash should account for only one at a time.\n */\nconst hashDocument = (\n  node: string | DefinitionNode | DocumentNode\n): HashValue => {\n  let key = phash(stringifyDocument(node));\n  // Add the operation name to the produced hash\n  if ((node as DocumentNode).definitions) {\n    const operationName = getOperationName(node as DocumentNode);\n    if (operationName) key = phash(`\\n# ${operationName}`, key);\n  }\n  return key;\n};\n\n/** Returns a canonical version of the passed `DocumentNode` with an added hash key.\n *\n * @param node - A string of a document or a {@link DocumentNode}\n * @returns A {@link KeyedDocumentNode}\n *\n * @remarks\n * `urql` will always avoid unnecessary work, no matter whether a user passes `DocumentNode`s\n * or strings of GraphQL documents to its APIs.\n *\n * This function will return a canonical version of a {@link KeyedDocumentNode} no matter\n * which kind of input is passed, avoiding parsing or hashing of passed data as needed.\n */\nexport const keyDocument = (node: string | DocumentNode): KeyedDocumentNode => {\n  let key: HashValue;\n  let query: DocumentNode;\n  if (typeof node === 'string') {\n    key = hashDocument(node);\n    query = docs.get(key) || parse(node, { noLocation: true });\n  } else {\n    key = (node as KeyedDocumentNode).__key || hashDocument(node);\n    query = docs.get(key) || node;\n  }\n\n  // Add location information if it's missing\n  if (!query.loc) stringifyDocument(query);\n\n  (query as KeyedDocumentNode).__key = key;\n  docs.set(key, query as KeyedDocumentNode);\n  return query as KeyedDocumentNode;\n};\n\n/** Creates a `GraphQLRequest` from the passed parameters.\n *\n * @param q - A string of a document or a {@link DocumentNode}\n * @param variables - A variables object for the defined GraphQL operation.\n * @returns A {@link GraphQLRequest}\n *\n * @remarks\n * `createRequest` creates a {@link GraphQLRequest} from the passed parameters,\n * while replacing the document as needed with a canonical version of itself,\n * to avoid parsing, printing, or hashing the same input multiple times.\n *\n * If no variables are passed, canonically it'll default to an empty object,\n * which is removed from the resulting hash key.\n */\nexport const createRequest = <\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(\n  _query: DocumentInput<Data, Variables>,\n  _variables: Variables,\n  extensions?: RequestExtensions | undefined\n): GraphQLRequest<Data, Variables> => {\n  const variables = _variables || ({} as Variables);\n  const query = keyDocument(_query);\n  const printedVars = stringifyVariables(variables);\n  let key = query.__key;\n  if (printedVars !== '{}') key = phash(printedVars, key);\n  return { key, query, variables, extensions };\n};\n\n/** Returns the name of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's name contained within the document, or `undefined`\n */\nexport const getOperationName = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.name ? node.name.value : undefined;\n    }\n  }\n};\n\n/** Returns the type of the `DocumentNode`'s operation, if any.\n * @param query - A {@link DocumentNode}\n * @returns the operation's type contained within the document, or `undefined`\n */\nexport const getOperationType = (query: DocumentNode): string | undefined => {\n  for (const node of query.definitions) {\n    if (node.kind === Kind.OPERATION_DEFINITION) {\n      return node.operation;\n    }\n  }\n};\n", "import type {\n  ExecutionResult,\n  Operation,\n  OperationResult,\n  IncrementalPayload,\n} from '../types';\nimport { CombinedError } from './error';\n\n/** Converts the `ExecutionResult` received for a given `Operation` to an `OperationResult`.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param result - The GraphQL API’s {@link ExecutionResult}.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n *\n * @throws\n * If no data, or errors are contained within the result, or the result is instead an incremental\n * response containing a `path` property, a “No Content” error is thrown.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const makeResult = (\n  operation: Operation,\n  result: ExecutionResult,\n  response?: any\n): OperationResult => {\n  if (\n    !('data' in result) &&\n    (!('errors' in result) || !Array.isArray(result.errors))\n  ) {\n    throw new Error('No Content');\n  }\n\n  const defaultHasNext = operation.kind === 'subscription';\n  return {\n    operation,\n    data: result.data,\n    error: Array.isArray(result.errors)\n      ? new CombinedError({\n          graphQLErrors: result.errors,\n          response,\n        })\n      : undefined,\n    extensions: result.extensions ? { ...result.extensions } : undefined,\n    hasNext: result.hasNext == null ? defaultHasNext : result.hasNext,\n    stale: false,\n  };\n};\n\nconst deepMerge = (target: any, source: any) => {\n  if (typeof target === 'object' && target != null) {\n    if (\n      !target.constructor ||\n      target.constructor === Object ||\n      Array.isArray(target)\n    ) {\n      target = Array.isArray(target) ? [...target] : { ...target };\n      for (const key of Object.keys(source))\n        target[key] = deepMerge(target[key], source[key]);\n      return target;\n    }\n  }\n  return source;\n};\n\n/** Merges an incrementally delivered `ExecutionResult` into a previous `OperationResult`.\n *\n * @param prevResult - The {@link OperationResult} that preceded this result.\n * @param path - The GraphQL API’s {@link ExecutionResult} that should be patching the `prevResult`.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns A new {@link OperationResult} patched with the incremental result.\n *\n * @remarks\n * This utility should be used to merge subsequent {@link ExecutionResult | ExecutionResults} of\n * incremental responses into a prior {@link OperationResult}.\n *\n * When directives like `@defer`, `@stream`, and `@live` are used, GraphQL may deliver new\n * results that modify previous results. In these cases, it'll set a `path` property to modify\n * the result it sent last. This utility is built to handle these cases and merge these payloads\n * into existing {@link OperationResult | OperationResults}.\n *\n * @see {@link ExecutionResult} for the type definition of GraphQL API results.\n */\nexport const mergeResultPatch = (\n  prevResult: OperationResult,\n  nextResult: ExecutionResult,\n  response?: any,\n  pending?: ExecutionResult['pending']\n): OperationResult => {\n  let errors = prevResult.error ? prevResult.error.graphQLErrors : [];\n  let hasExtensions =\n    !!prevResult.extensions || !!(nextResult.payload || nextResult).extensions;\n  const extensions = {\n    ...prevResult.extensions,\n    ...(nextResult.payload || nextResult).extensions,\n  };\n\n  let incremental = nextResult.incremental;\n\n  // NOTE: We handle the old version of the incremental delivery payloads as well\n  if ('path' in nextResult) {\n    incremental = [nextResult as IncrementalPayload];\n  }\n\n  const withData = { data: prevResult.data };\n  if (incremental) {\n    for (const patch of incremental) {\n      if (Array.isArray(patch.errors)) {\n        errors.push(...(patch.errors as any));\n      }\n\n      if (patch.extensions) {\n        Object.assign(extensions, patch.extensions);\n        hasExtensions = true;\n      }\n\n      let prop: string | number = 'data';\n      let part: Record<string, any> | Array<any> = withData;\n      let path: readonly (string | number)[] = [];\n      if (patch.path) {\n        path = patch.path;\n      } else if (pending) {\n        const res = pending.find(pendingRes => pendingRes.id === patch.id);\n        if (patch.subPath) {\n          path = [...res!.path, ...patch.subPath];\n        } else {\n          path = res!.path;\n        }\n      }\n\n      for (let i = 0, l = path.length; i < l; prop = path[i++]) {\n        part = part[prop] = Array.isArray(part[prop])\n          ? [...part[prop]]\n          : { ...part[prop] };\n      }\n\n      if (patch.items) {\n        const startIndex = +prop >= 0 ? (prop as number) : 0;\n        for (let i = 0, l = patch.items.length; i < l; i++)\n          part[startIndex + i] = deepMerge(\n            part[startIndex + i],\n            patch.items[i]\n          );\n      } else if (patch.data !== undefined) {\n        part[prop] = deepMerge(part[prop], patch.data);\n      }\n    }\n  } else {\n    withData.data = (nextResult.payload || nextResult).data || prevResult.data;\n    errors =\n      (nextResult.errors as any[]) ||\n      (nextResult.payload && nextResult.payload.errors) ||\n      errors;\n  }\n\n  return {\n    operation: prevResult.operation,\n    data: withData.data,\n    error: errors.length\n      ? new CombinedError({ graphQLErrors: errors, response })\n      : undefined,\n    extensions: hasExtensions ? extensions : undefined,\n    hasNext:\n      nextResult.hasNext != null ? nextResult.hasNext : prevResult.hasNext,\n    stale: false,\n  };\n};\n\n/** Creates an `OperationResult` containing a network error for requests that encountered unexpected errors.\n *\n * @param operation - The {@link Operation} for which the API’s result is for.\n * @param error - The network-like error that prevented an API result from being delivered.\n * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).\n * @returns An {@link OperationResult} containing only a {@link CombinedError}.\n *\n * @remarks\n * This utility can be used to create {@link OperationResult | OperationResults} in the shape\n * that `urql` expects and defines, and should be used rather than creating the results manually.\n * This function should be used for when the {@link CombinedError.networkError} property is\n * populated and no GraphQL execution actually occurred.\n */\nexport const makeErrorResult = (\n  operation: Operation,\n  error: Error,\n  response?: any\n): OperationResult => ({\n  operation,\n  data: undefined,\n  error: new CombinedError({\n    networkError: error,\n    response,\n  }),\n  extensions: undefined,\n  hasNext: false,\n  stale: false,\n});\n", "import {\n  stringifyDocument,\n  getOperationName,\n  stringifyVariables,\n  extractFiles,\n} from '../utils';\n\nimport type { AnyVariables, GraphQLRequest, Operation } from '../types';\n\n/** Abstract definition of the JSON data sent during GraphQL HTTP POST requests. */\nexport interface FetchBody {\n  query?: string;\n  documentId?: string;\n  operationName: string | undefined;\n  variables: undefined | Record<string, any>;\n  extensions: undefined | Record<string, any>;\n}\n\n/** Creates a GraphQL over HTTP compliant JSON request body.\n * @param request - An object containing a `query` document and `variables`.\n * @returns A {@link FetchBody}\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n */\nexport function makeFetchBody<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(request: Omit<GraphQLRequest<Data, Variables>, 'key'>): FetchBody {\n  const body: FetchBody = {\n    query: undefined,\n    documentId: undefined,\n    operationName: getOperationName(request.query),\n    variables: request.variables || undefined,\n    extensions: request.extensions,\n  };\n\n  if (\n    'documentId' in request.query &&\n    request.query.documentId &&\n    // NOTE: We have to check that the document will definitely be sent\n    // as a persisted document to avoid breaking changes\n    (!request.query.definitions || !request.query.definitions.length)\n  ) {\n    body.documentId = request.query.documentId;\n  } else if (\n    !request.extensions ||\n    !request.extensions.persistedQuery ||\n    !!request.extensions.persistedQuery.miss\n  ) {\n    body.query = stringifyDocument(request.query);\n  }\n\n  return body;\n}\n\n/** Creates a URL that will be called for a GraphQL HTTP request.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which may be replaced with a URL.\n *\n * @remarks\n * Creates the URL that’ll be called as part of a GraphQL HTTP request.\n * Built-in fetch exchanges support sending GET requests, even for\n * non-persisted full requests, which this function supports by being\n * able to serialize GraphQL requests into the URL.\n */\nexport const makeFetchURL = (\n  operation: Operation,\n  body?: FetchBody\n): string => {\n  const useGETMethod =\n    operation.kind === 'query' && operation.context.preferGetMethod;\n  if (!useGETMethod || !body) return operation.context.url;\n\n  const urlParts = splitOutSearchParams(operation.context.url);\n  for (const key in body) {\n    const value = body[key];\n    if (value) {\n      urlParts[1].set(\n        key,\n        typeof value === 'object' ? stringifyVariables(value) : value\n      );\n    }\n  }\n  const finalUrl = urlParts.join('?');\n  if (finalUrl.length > 2047 && useGETMethod !== 'force') {\n    operation.context.preferGetMethod = false;\n    return operation.context.url;\n  }\n\n  return finalUrl;\n};\n\nconst splitOutSearchParams = (\n  url: string\n): readonly [string, URLSearchParams] => {\n  const start = url.indexOf('?');\n  return start > -1\n    ? [url.slice(0, start), new URLSearchParams(url.slice(start + 1))]\n    : [url, new URLSearchParams()];\n};\n\n/** Serializes a {@link FetchBody} into a {@link RequestInit.body} format. */\nconst serializeBody = (\n  operation: Operation,\n  body?: FetchBody\n): FormData | string | undefined => {\n  const omitBody =\n    operation.kind === 'query' && !!operation.context.preferGetMethod;\n  if (body && !omitBody) {\n    const json = stringifyVariables(body);\n    const files = extractFiles(body.variables);\n    if (files.size) {\n      const form = new FormData();\n      form.append('operations', json);\n      form.append(\n        'map',\n        stringifyVariables({\n          ...[...files.keys()].map(value => [value]),\n        })\n      );\n      let index = 0;\n      for (const file of files.values()) form.append(`${index++}`, file);\n      return form;\n    }\n    return json;\n  }\n};\n\nconst isHeaders = (headers: HeadersInit): headers is Headers =>\n  'has' in headers && !Object.keys(headers).length;\n\n/** Creates a `RequestInit` object for a given `Operation`.\n *\n * @param operation - An {@link Operation} for which to make the request.\n * @param body - A {@link FetchBody} which is added to the options, if the request isn’t a GET request.\n *\n * @remarks\n * Creates the fetch options {@link RequestInit} object that’ll be passed to the Fetch API\n * as part of a GraphQL over HTTP request. It automatically sets a default `Content-Type`\n * header.\n *\n * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport const makeFetchOptions = (\n  operation: Operation,\n  body?: FetchBody\n): RequestInit => {\n  const headers: HeadersInit = {\n    accept:\n      operation.kind === 'subscription'\n        ? 'text/event-stream, multipart/mixed'\n        : 'application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed',\n  };\n  const extraOptions =\n    (typeof operation.context.fetchOptions === 'function'\n      ? operation.context.fetchOptions()\n      : operation.context.fetchOptions) || {};\n  if (extraOptions.headers) {\n    if (isHeaders(extraOptions.headers)) {\n      extraOptions.headers.forEach((value, key) => {\n        headers[key] = value;\n      });\n    } else if (Array.isArray(extraOptions.headers)) {\n      (extraOptions.headers as Array<[string, string]>).forEach(\n        (value, key) => {\n          if (Array.isArray(value)) {\n            if (headers[value[0]]) {\n              headers[value[0]] = `${headers[value[0]]},${value[1]}`;\n            } else {\n              headers[value[0]] = value[1];\n            }\n          } else {\n            headers[key] = value;\n          }\n        }\n      );\n    } else {\n      for (const key in extraOptions.headers) {\n        headers[key.toLowerCase()] = extraOptions.headers[key];\n      }\n    }\n  }\n\n  const serializedBody = serializeBody(operation, body);\n  if (typeof serializedBody === 'string' && !headers['content-type'])\n    headers['content-type'] = 'application/json';\n  return {\n    ...extraOptions,\n    method: serializedBody ? 'POST' : 'GET',\n    body: serializedBody,\n    headers,\n  };\n};\n", "/* Summary: This file handles the HTTP transport via GraphQL over HTTP\n * See: https://graphql.github.io/graphql-over-http/draft/\n *\n * `@urql/core`, by default, implements several RFC'd protocol extensions\n * on top of this. As such, this implementation supports:\n * - [Incremental Delivery](https://github.com/graphql/graphql-over-http/blob/main/rfcs/IncrementalDelivery.md)\n * - [GraphQL over SSE](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverSSE.md)\n *\n * This also supports the \"Defer Stream\" payload format.\n * See: https://github.com/graphql/graphql-wg/blob/main/rfcs/DeferStream.md\n * Implementation for this is located in `../utils/result.ts` in `mergeResultPatch`\n *\n * And; this also supports the GraphQL Multipart spec for file uploads.\n * See: https://github.com/jaydenseric/graphql-multipart-request-spec\n * Implementation for this is located in `../utils/variables.ts` in `extractFiles`,\n * and `./fetchOptions.ts` in `serializeBody`.\n *\n * And; this also supports GET requests (and hence; automatic persisted queries)\n * via the `@urql/exchange-persisted` package.\n *\n * This implementation DOES NOT support Batching.\n * See: https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md\n * Which is deemed out-of-scope, as it's sufficiently unnecessary given\n * modern handling of HTTP requests being in parallel.\n *\n * The implementation in this file needs to make certain accommodations for:\n * - The Web Fetch API\n * - Non-browser or polyfill Fetch APIs\n * - Node.js-like Fetch implementations (see `toString` below)\n *\n * GraphQL over SSE has a reference implementation, which supports non-HTTP/2\n * modes and is a faithful implementation of the spec.\n * See: https://github.com/enisdenjo/graphql-sse\n *\n * GraphQL Inremental Delivery (aka “GraphQL Multipart Responses”) has a\n * reference implementation, which a prior implementation of this file heavily\n * leaned on (See prior attribution comments)\n * See: https://github.com/maraisr/meros\n *\n * This file merges support for all three GraphQL over HTTP response formats\n * via async generators and Wonka’s `fromAsyncIterable`. As part of this, `streamBody`\n * and `split` are the common, cross-compatible base implementations.\n */\n\nimport type { Source } from 'wonka';\nimport { fromAsyncIterable, onEnd, filter, pipe } from 'wonka';\nimport type { Operation, OperationResult, ExecutionResult } from '../types';\nimport { makeResult, makeErrorResult, mergeResultPatch } from '../utils';\n\nconst decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder() : null;\nconst boundaryHeaderRe = /boundary=\"?([^=\";]+)\"?/i;\nconst eventStreamRe = /data: ?([^\\n]+)/;\n\ntype ChunkData = Buffer | Uint8Array;\n\n// NOTE: We're avoiding referencing the `Buffer` global here to prevent\n// auto-polyfilling in Webpack\nconst toString = (input: Buffer | ArrayBuffer): string =>\n  input.constructor.name === 'Buffer'\n    ? (input as Buffer).toString()\n    : decoder!.decode(input as ArrayBuffer);\n\nasync function* streamBody(response: Response): AsyncIterableIterator<string> {\n  if (response.body![Symbol.asyncIterator]) {\n    for await (const chunk of response.body! as any)\n      yield toString(chunk as ChunkData);\n  } else {\n    const reader = response.body!.getReader();\n    let result: ReadableStreamReadResult<ChunkData>;\n    try {\n      while (!(result = await reader.read()).done) yield toString(result.value);\n    } finally {\n      reader.cancel();\n    }\n  }\n}\n\nasync function* split(\n  chunks: AsyncIterableIterator<string>,\n  boundary: string\n): AsyncIterableIterator<string> {\n  let buffer = '';\n  let boundaryIndex: number;\n  for await (const chunk of chunks) {\n    buffer += chunk;\n    while ((boundaryIndex = buffer.indexOf(boundary)) > -1) {\n      yield buffer.slice(0, boundaryIndex);\n      buffer = buffer.slice(boundaryIndex + boundary.length);\n    }\n  }\n}\n\nasync function* parseJSON(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  yield JSON.parse(await response.text());\n}\n\nasync function* parseEventStream(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  let payload: any;\n  for await (const chunk of split(streamBody(response), '\\n\\n')) {\n    const match = chunk.match(eventStreamRe);\n    if (match) {\n      const chunk = match[1];\n      try {\n        yield (payload = JSON.parse(chunk));\n      } catch (error) {\n        if (!payload) throw error;\n      }\n      if (payload && payload.hasNext === false) break;\n    }\n  }\n  if (payload && payload.hasNext !== false) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* parseMultipartMixed(\n  contentType: string,\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  const boundaryHeader = contentType.match(boundaryHeaderRe);\n  const boundary = '--' + (boundaryHeader ? boundaryHeader[1] : '-');\n  let isPreamble = true;\n  let payload: any;\n  for await (let chunk of split(streamBody(response), '\\r\\n' + boundary)) {\n    if (isPreamble) {\n      isPreamble = false;\n      const preambleIndex = chunk.indexOf(boundary);\n      if (preambleIndex > -1) {\n        chunk = chunk.slice(preambleIndex + boundary.length);\n      } else {\n        continue;\n      }\n    }\n    try {\n      yield (payload = JSON.parse(chunk.slice(chunk.indexOf('\\r\\n\\r\\n') + 4)));\n    } catch (error) {\n      if (!payload) throw error;\n    }\n    if (payload && payload.hasNext === false) break;\n  }\n  if (payload && payload.hasNext !== false) {\n    yield { hasNext: false };\n  }\n}\n\nasync function* parseMaybeJSON(\n  response: Response\n): AsyncIterableIterator<ExecutionResult> {\n  const text = await response.text();\n  try {\n    const result = JSON.parse(text);\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        `Found response with content-type \"text/plain\" but it had a valid \"application/json\" response.`\n      );\n    }\n    yield result;\n  } catch (e) {\n    throw new Error(text);\n  }\n}\n\nasync function* fetchOperation(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n) {\n  let networkMode = true;\n  let result: OperationResult | null = null;\n  let response: Response | undefined;\n\n  try {\n    // Delay for a tick to give the Client a chance to cancel the request\n    // if a teardown comes in immediately\n    yield await Promise.resolve();\n\n    response = await (operation.context.fetch || fetch)(url, fetchOptions);\n    const contentType = response.headers.get('Content-Type') || '';\n\n    let results: AsyncIterable<ExecutionResult>;\n    if (/multipart\\/mixed/i.test(contentType)) {\n      results = parseMultipartMixed(contentType, response);\n    } else if (/text\\/event-stream/i.test(contentType)) {\n      results = parseEventStream(response);\n    } else if (!/text\\//i.test(contentType)) {\n      results = parseJSON(response);\n    } else {\n      results = parseMaybeJSON(response);\n    }\n\n    let pending: ExecutionResult['pending'];\n    for await (const payload of results) {\n      if (payload.pending && !result) {\n        pending = payload.pending;\n      } else if (payload.pending) {\n        pending = [...pending!, ...payload.pending];\n      }\n      result = result\n        ? mergeResultPatch(result, payload, response, pending)\n        : makeResult(operation, payload, response);\n      networkMode = false;\n      yield result;\n      networkMode = true;\n    }\n\n    if (!result) {\n      yield (result = makeResult(operation, {}, response));\n    }\n  } catch (error: any) {\n    if (!networkMode) {\n      throw error;\n    }\n\n    yield makeErrorResult(\n      operation,\n      response &&\n        (response.status < 200 || response.status >= 300) &&\n        response.statusText\n        ? new Error(response.statusText)\n        : error,\n      response\n    );\n  }\n}\n\n/** Makes a GraphQL HTTP request to a given API by wrapping around the Fetch API.\n *\n * @param operation - The {@link Operation} that should be sent via GraphQL over HTTP.\n * @param url - The endpoint URL for the GraphQL HTTP API.\n * @param fetchOptions - The {@link RequestInit} fetch options for the request.\n * @returns A Wonka {@link Source} of {@link OperationResult | OperationResults}.\n *\n * @remarks\n * This utility defines how all built-in fetch exchanges make GraphQL HTTP requests,\n * supporting multipart incremental responses, cancellation and other smaller\n * implementation details.\n *\n * If you’re implementing a modified fetch exchange for a GraphQL over HTTP API\n * it’s recommended you use this utility.\n *\n * Hint: This function does not use the passed `operation` to create or modify the\n * `fetchOptions` and instead expects that the options have already been created\n * using {@link makeFetchOptions} and modified as needed.\n *\n * @throws\n * If the `fetch` polyfill or globally available `fetch` function doesn’t support\n * streamed multipart responses while trying to handle a `multipart/mixed` GraphQL response,\n * the source will throw “Streaming requests unsupported”.\n * This shouldn’t happen in modern browsers and Node.js.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n */\nexport function makeFetchSource(\n  operation: Operation,\n  url: string,\n  fetchOptions: RequestInit\n): Source<OperationResult> {\n  let abortController: AbortController | void;\n  if (typeof AbortController !== 'undefined') {\n    fetchOptions.signal = (abortController = new AbortController()).signal;\n  }\n  return pipe(\n    fromAsyncIterable(fetchOperation(operation, url, fetchOptions)),\n    filter((result): result is OperationResult => !!result),\n    onEnd(() => {\n      if (abortController) abortController.abort();\n    })\n  );\n}\n", "interface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (obj: EntityLike | EntityLike[], types: Set<string>) => {\n  if (Array.isArray(obj)) {\n    for (const item of obj) collectTypes(item, types);\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (key === '__typename' && typeof obj[key] === 'string') {\n        types.add(obj[key] as string);\n      } else {\n        collectTypes(obj[key], types);\n      }\n    }\n  }\n\n  return types;\n};\n\n/** Finds and returns a list of `__typename` fields found in response data.\n *\n * @privateRemarks\n * This is used by `@urql/core`’s document `cacheExchange` to find typenames\n * in a given GraphQL response’s data.\n */\nexport const collectTypenames = (response: object): string[] => [\n  ...collectTypes(response as EntityLike, new Set()),\n];\n", "import type {\n  FieldNode,\n  SelectionNode,\n  DefinitionNode,\n  DirectiveNode,\n} from '@0no-co/graphql.web';\nimport { Kind } from '@0no-co/graphql.web';\nimport type { KeyedDocumentNode } from './request';\nimport { keyDocument } from './request';\nimport type { FormattedNode, TypedDocumentNode } from '../types';\n\nconst formatNode = <\n  T extends SelectionNode | DefinitionNode | TypedDocumentNode<any, any>,\n>(\n  node: T\n): FormattedNode<T> => {\n  if ('definitions' in node) {\n    const definitions: FormattedNode<DefinitionNode>[] = [];\n    for (const definition of node.definitions) {\n      const newDefinition = formatNode(definition);\n      definitions.push(newDefinition);\n    }\n\n    return { ...node, definitions } as FormattedNode<T>;\n  }\n\n  if ('directives' in node && node.directives && node.directives.length) {\n    const directives: DirectiveNode[] = [];\n    const _directives = {};\n    for (const directive of node.directives) {\n      let name = directive.name.value;\n      if (name[0] !== '_') {\n        directives.push(directive);\n      } else {\n        name = name.slice(1);\n      }\n      _directives[name] = directive;\n    }\n    node = { ...node, directives, _directives };\n  }\n\n  if ('selectionSet' in node) {\n    const selections: FormattedNode<SelectionNode>[] = [];\n    let hasTypename = node.kind === Kind.OPERATION_DEFINITION;\n    if (node.selectionSet) {\n      for (const selection of node.selectionSet.selections || []) {\n        hasTypename =\n          hasTypename ||\n          (selection.kind === Kind.FIELD &&\n            selection.name.value === '__typename' &&\n            !selection.alias);\n        const newSelection = formatNode(selection);\n        selections.push(newSelection);\n      }\n\n      if (!hasTypename) {\n        selections.push({\n          kind: Kind.FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: '__typename',\n          },\n          _generated: true,\n        } as FormattedNode<FieldNode>);\n      }\n\n      return {\n        ...node,\n        selectionSet: { ...node.selectionSet, selections },\n      } as FormattedNode<T>;\n    }\n  }\n\n  return node as FormattedNode<T>;\n};\n\nconst formattedDocs = new Map<number, KeyedDocumentNode>();\n\n/** Formats a GraphQL document to add `__typename` fields and process client-side directives.\n *\n * @param node - a {@link DocumentNode}.\n * @returns a {@link FormattedDocument}\n *\n * @remarks\n * Cache {@link Exchange | Exchanges} will require typename introspection to\n * recognize types in a GraphQL response. To retrieve these typenames,\n * this function is used to add the `__typename` fields to non-root\n * selection sets of a GraphQL document.\n *\n * Additionally, this utility will process directives, filter out client-side\n * directives starting with an `_` underscore, and place a `_directives` dictionary\n * on selection nodes.\n *\n * This utility also preserves the internally computed key of the\n * document as created by {@link createRequest} to avoid any\n * formatting from being duplicated.\n *\n * @see {@link https://spec.graphql.org/October2021/#sec-Type-Name-Introspection} for more information\n * on typename introspection via the `__typename` field.\n */\nexport const formatDocument = <T extends TypedDocumentNode<any, any>>(\n  node: T\n): FormattedNode<T> => {\n  const query = keyDocument(node);\n\n  let result = formattedDocs.get(query.__key);\n  if (!result) {\n    formattedDocs.set(\n      query.__key,\n      (result = formatNode(query) as KeyedDocumentNode)\n    );\n    // Ensure that the hash of the resulting document won't suddenly change\n    // we are marking __key as non-enumerable so when external exchanges use visit\n    // to manipulate a document we won't restore the previous query due to the __key\n    // property.\n    Object.defineProperty(result, '__key', {\n      value: query.__key,\n      enumerable: false,\n    });\n  }\n\n  return result as FormattedNode<T>;\n};\n", "import type { Sink, Source } from 'wonka';\nimport { subscribe, take, filter, toPromise, pipe } from 'wonka';\nimport type { OperationResult, OperationResultSource } from '../types';\n\n/** Patches a `toPromise` method onto the `Source` passed to it.\n * @param source$ - the Wonka {@link Source} to patch.\n * @returns The passed `source$` with a patched `toPromise` method as a {@link PromisifiedSource}.\n * @internal\n */\nexport function withPromise<T extends OperationResult>(\n  _source$: Source<T>\n): OperationResultSource<T> {\n  const source$ = ((sink: Sink<T>) =>\n    _source$(sink)) as OperationResultSource<T>;\n  source$.toPromise = () =>\n    pipe(\n      source$,\n      filter(result => !result.stale && !result.hasNext),\n      take(1),\n      toPromise\n    );\n  source$.then = (onResolve, onReject) =>\n    source$.toPromise().then(onResolve, onReject);\n  source$.subscribe = onResult => subscribe(onResult)(source$);\n  return source$;\n}\n", "import type {\n  AnyVariables,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationType,\n} from '../types';\n\n/** Creates a {@link Operation} from the given parameters.\n *\n * @param kind - The {@link OperationType} of GraphQL operation, i.e. `query`, `mutation`, or `subscription`.\n * @param request - The {@link GraphQLRequest} or {@link Operation} used as a template for the new `Operation`.\n * @param context - The {@link OperationContext} `context` data for the `Operation`.\n * @returns A new {@link Operation}.\n *\n * @remarks\n * This method is both used to create new {@link Operation | Operations} as well as copy and modify existing\n * operations. While it’s not required to use this function to copy an `Operation`, it is recommended, in case\n * additional dynamic logic is added to them in the future.\n *\n * Hint: When an {@link Operation} is passed to the `request` argument, the `context` argument does not have to be\n * a complete {@link OperationContext} and will instead be combined with passed {@link Operation.context}.\n *\n * @example\n * An example of copying an existing `Operation` to modify its `context`:\n *\n * ```ts\n * makeOperation(\n *   operation.kind,\n *   operation,\n *   { requestPolicy: 'cache-first' },\n * );\n * ```\n */\nfunction makeOperation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(\n  kind: OperationType,\n  request: GraphQLRequest<Data, Variables>,\n  context: OperationContext\n): Operation<Data, Variables>;\n\nfunction makeOperation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(\n  kind: OperationType,\n  request: Operation<Data, Variables>,\n  context?: Partial<OperationContext>\n): Operation<Data, Variables>;\n\nfunction makeOperation(kind, request, context) {\n  return {\n    ...request,\n    kind,\n    context: request.context\n      ? {\n          ...request.context,\n          ...context,\n        }\n      : context || request.context,\n  };\n}\n\nexport { makeOperation };\n\n/** Adds additional metadata to an `Operation`'s `context.meta` property while copying it.\n * @see {@link OperationDebugMeta} for more information on the {@link OperationContext.meta} property.\n */\nexport const addMetadata = (\n  operation: Operation,\n  meta: OperationContext['meta']\n) => {\n  return makeOperation(operation.kind, operation, {\n    meta: {\n      ...operation.context.meta,\n      ...meta,\n    },\n  });\n};\n", "export * from './error';\nexport * from './request';\nexport * from './result';\nexport * from './variables';\nexport * from './collectTypenames';\nexport * from './formatDocument';\nexport * from './streamUtils';\nexport * from './operation';\n\nexport const noop = () => {\n  /* noop */\n};\n", "/* eslint-disable prefer-rest-params */\nimport { Kind } from '@0no-co/graphql.web';\nimport type { DocumentNode, DefinitionNode } from './utils/graphql';\nimport type { AnyVariables, TypedDocumentNode } from './types';\nimport { keyDocument, stringifyDocument } from './utils';\n\n/** A GraphQL parse function, which may be called as a tagged template literal, returning a parsed {@link DocumentNode}.\n *\n * @remarks\n * The `gql` tag or function is used to parse a GraphQL query document into a {@link DocumentNode}.\n *\n * When used as a tagged template, `gql` will automatically merge fragment definitions into the resulting\n * document and deduplicate them.\n *\n * It enforces that all fragments have a unique name. When fragments with different definitions share a name,\n * it will log a warning in development.\n *\n * Hint: It’s recommended to use this `gql` function over other GraphQL parse functions, since it puts the parsed\n * results directly into `@urql/core`’s internal caches and prevents further unnecessary work.\n *\n * @example\n * ```ts\n * const AuthorFragment = gql`\n *   fragment AuthorDisplayComponent on Author {\n *     id\n *     name\n *   }\n * `;\n *\n * const BookFragment = gql`\n *   fragment ListBookComponent on Book {\n *     id\n *     title\n *     author {\n *       ...AuthorDisplayComponent\n *     }\n *   }\n *\n *   ${AuthorFragment}\n * `;\n *\n * const BookQuery = gql`\n *   query Book($id: ID!) {\n *     book(id: $id) {\n *       ...BookFragment\n *     }\n *   }\n *\n *   ${BookFragment}\n * `;\n * ```\n */\nfunction gql<Data = any, Variables extends AnyVariables = AnyVariables>(\n  strings: TemplateStringsArray,\n  ...interpolations: Array<TypedDocumentNode | DocumentNode | string>\n): TypedDocumentNode<Data, Variables>;\n\nfunction gql<Data = any, Variables extends AnyVariables = AnyVariables>(\n  string: string\n): TypedDocumentNode<Data, Variables>;\n\nfunction gql(parts: string | TemplateStringsArray /* arguments */) {\n  const fragmentNames = new Map<string, string>();\n  const definitions: DefinitionNode[] = [];\n  const source: DocumentNode[] = [];\n\n  // Apply the entire tagged template body's definitions\n  let body: string = Array.isArray(parts) ? parts[0] : parts || '';\n  for (let i = 1; i < arguments.length; i++) {\n    const value = arguments[i];\n    if (value && value.definitions) {\n      source.push(value);\n    } else {\n      body += value;\n    }\n\n    body += arguments[0][i];\n  }\n\n  source.unshift(keyDocument(body));\n  for (const document of source) {\n    for (const definition of document.definitions) {\n      if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n        const name = definition.name.value;\n        const value = stringifyDocument(definition);\n        // Fragments will be deduplicated according to this Map\n        if (!fragmentNames.has(name)) {\n          fragmentNames.set(name, value);\n          definitions.push(definition);\n        } else if (\n          process.env.NODE_ENV !== 'production' &&\n          fragmentNames.get(name) !== value\n        ) {\n          // Fragments with the same names is expected to have the same contents\n          console.warn(\n            '[WARNING: Duplicate Fragment] A fragment with name `' +\n              name +\n              '` already exists in this document.\\n' +\n              'While fragment names may not be unique across your source, each name must be unique per document.'\n          );\n        }\n      } else {\n        definitions.push(definition);\n      }\n    }\n  }\n\n  return keyDocument({\n    kind: Kind.DOCUMENT,\n    definitions,\n  });\n}\n\nexport { gql };\n", "/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, tap } from 'wonka';\n\nimport type { Client } from '../client';\nimport type { Exchange, Operation, OperationResult } from '../types';\n\nimport {\n  makeOperation,\n  addMetadata,\n  collectTypenames,\n  formatDocument,\n  makeResult,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\ntype OperationCache = Map<string, Set<number>>;\n\nconst shouldSkip = ({ kind }: Operation) =>\n  kind !== 'mutation' && kind !== 'query';\n\n/** Adds unique typenames to query (for invalidating cache entries) */\nexport const mapTypeNames = (operation: Operation): Operation => {\n  const query = formatDocument(operation.query);\n  if (query !== operation.query) {\n    const formattedOperation = makeOperation(operation.kind, operation);\n    formattedOperation.query = query;\n    return formattedOperation;\n  } else {\n    return operation;\n  }\n};\n\n/** Default document cache exchange.\n *\n * @remarks\n * The default document cache in `urql` avoids sending the same GraphQL request\n * multiple times by caching it using the {@link Operation.key}. It will invalidate\n * query results automatically whenever it sees a mutation responses with matching\n * `__typename`s in their responses.\n *\n * The document cache will get the introspected `__typename` fields by modifying\n * your GraphQL operation documents using the {@link formatDocument} utility.\n *\n * This automatic invalidation strategy can fail if your query or mutation don’t\n * contain matching typenames, for instance, because the query contained an\n * empty list.\n * You can manually add hints for this exchange by specifying a list of\n * {@link OperationContext.additionalTypenames} for queries and mutations that\n * should invalidate one another.\n *\n * @see {@link https://urql.dev/goto/docs/basics/document-caching} for more information on this cache.\n */\nexport const cacheExchange: Exchange = ({ forward, client, dispatchDebug }) => {\n  const resultCache: ResultCache = new Map();\n  const operationCache: OperationCache = new Map();\n\n  const isOperationCached = (operation: Operation) =>\n    operation.kind === 'query' &&\n    operation.context.requestPolicy !== 'network-only' &&\n    (operation.context.requestPolicy === 'cache-only' ||\n      resultCache.has(operation.key));\n\n  return ops$ => {\n    const cachedOps$ = pipe(\n      ops$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const cachedResult = resultCache.get(operation.key);\n\n        dispatchDebug({\n          operation,\n          ...(cachedResult\n            ? {\n                type: 'cacheHit',\n                message: 'The result was successfully retried from the cache',\n              }\n            : {\n                type: 'cacheMiss',\n                message: 'The result could not be retrieved from the cache',\n              }),\n        });\n\n        let result: OperationResult =\n          cachedResult ||\n          makeResult(operation, {\n            data: null,\n          });\n\n        result = {\n          ...result,\n          operation: addMetadata(operation, {\n            cacheOutcome: cachedResult ? 'hit' : 'miss',\n          }),\n        };\n\n        if (operation.context.requestPolicy === 'cache-and-network') {\n          result.stale = true;\n          reexecuteOperation(client, operation);\n        }\n\n        return result;\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          ops$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          ops$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      filter(\n        op => op.kind !== 'query' || op.context.requestPolicy !== 'cache-only'\n      ),\n      forward,\n      tap(response => {\n        let { operation } = response;\n        if (!operation) return;\n\n        let typenames = operation.context.additionalTypenames || [];\n        // NOTE: For now, we only respect `additionalTypenames` from subscriptions to\n        // avoid unexpected breaking changes\n        // We'd expect live queries or other update mechanisms to be more suitable rather\n        // than using subscriptions as “signals” to reexecute queries. However, if they’re\n        // just used as signals, it’s intuitive to hook them up using `additionalTypenames`\n        if (response.operation.kind !== 'subscription') {\n          typenames = collectTypenames(response.data).concat(typenames);\n        }\n\n        // Invalidates the cache given a mutation's response\n        if (\n          response.operation.kind === 'mutation' ||\n          response.operation.kind === 'subscription'\n        ) {\n          const pendingOperations = new Set<number>();\n\n          dispatchDebug({\n            type: 'cacheInvalidation',\n            message: `The following typenames have been invalidated: ${typenames}`,\n            operation,\n            data: { typenames, response },\n          });\n\n          for (let i = 0; i < typenames.length; i++) {\n            const typeName = typenames[i];\n            let operations = operationCache.get(typeName);\n            if (!operations)\n              operationCache.set(typeName, (operations = new Set()));\n            for (const key of operations.values()) pendingOperations.add(key);\n            operations.clear();\n          }\n\n          for (const key of pendingOperations.values()) {\n            if (resultCache.has(key)) {\n              operation = (resultCache.get(key) as OperationResult).operation;\n              resultCache.delete(key);\n              reexecuteOperation(client, operation);\n            }\n          }\n        } else if (operation.kind === 'query' && response.data) {\n          resultCache.set(operation.key, response);\n          for (let i = 0; i < typenames.length; i++) {\n            const typeName = typenames[i];\n            let operations = operationCache.get(typeName);\n            if (!operations)\n              operationCache.set(typeName, (operations = new Set()));\n            operations.add(operation.key);\n          }\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n/** Reexecutes an `Operation` with the `network-only` request policy.\n * @internal\n */\nexport const reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation(\n    makeOperation(operation.kind, operation, {\n      requestPolicy: 'network-only',\n    })\n  );\n};\n", "import type { GraphQLError } from '../utils/graphql';\nimport { pipe, filter, merge, map, tap } from 'wonka';\nimport type { Exchange, OperationResult, Operation } from '../types';\nimport { addMetadata, CombinedError } from '../utils';\nimport { reexecuteOperation, mapTypeNames } from './cache';\n\n/** A serialized version of an {@link OperationResult}.\n *\n * @remarks\n * All properties are serialized separately as JSON strings, except for the\n * {@link CombinedError} to speed up JS parsing speed, even if a result doesn’t\n * end up being used.\n *\n * @internal\n */\nexport interface SerializedResult {\n  hasNext?: boolean;\n  /** JSON-serialized version of {@link OperationResult.data}. */\n  data?: string | undefined; // JSON string of data\n  /** JSON-serialized version of {@link OperationResult.extensions}. */\n  extensions?: string | undefined;\n  /** JSON version of {@link CombinedError}. */\n  error?: {\n    graphQLErrors: Array<Partial<GraphQLError> | string>;\n    networkError?: string;\n  };\n}\n\n/** A dictionary of {@link Operation.key} keys to serializable {@link SerializedResult} objects.\n *\n * @remarks\n * It’s not recommended to modify the serialized data manually, however, multiple payloads of\n * this dictionary may safely be merged and combined.\n */\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\n/** Options for the `ssrExchange` allowing it to either operate on the server- or client-side. */\nexport interface SSRExchangeParams {\n  /** Indicates to the {@link SSRExchange} whether it's currently in server-side or client-side mode.\n   *\n   * @remarks\n   * Depending on this option, the {@link SSRExchange} will either capture or replay results.\n   * When `true`, it’s in client-side mode and results will be serialized. When `false`, it’ll\n   * use its deserialized data and replay results from it.\n   */\n  isClient?: boolean;\n  /** May be used on the client-side to pass the {@link SSRExchange} serialized data from the server-side.\n   *\n   * @remarks\n   * Alternatively, {@link SSRExchange.restoreData} may be called to imperatively add serialized data to\n   * the exchange.\n   *\n   * Hint: This method also works on the server-side to add to the initial serialized data, which enables\n   * you to combine multiple {@link SSRExchange} results, as needed.\n   */\n  initialState?: SSRData;\n  /** Forces a new API request to be sent in the background after replaying the deserialized result.\n   *\n   * @remarks\n   * Similarly to the `cache-and-network` {@link RequestPolicy}, this option tells the {@link SSRExchange}\n   * to send a new API request for the {@link Operation} after replaying a serialized result.\n   *\n   * Hint: This is useful when you're caching SSR results and need the client-side to update itself after\n   * rendering the initial serialized SSR results.\n   */\n  staleWhileRevalidate?: boolean;\n  /** Forces {@link OperationResult.extensions} to be serialized alongside the rest of a result.\n   *\n   * @remarks\n   * Entries in the `extension` object of a GraphQL result are often non-standard metdata, and many\n   * APIs use it for data that changes between every request. As such, the {@link SSRExchange} will\n   * not serialize this data by default, unless this flag is set.\n   */\n  includeExtensions?: boolean;\n}\n\n/** An `SSRExchange` either in server-side mode, serializing results, or client-side mode, deserializing and replaying results..\n *\n * @remarks\n * This same {@link Exchange} is used in your code both for the client-side and server-side as it’s “universal”\n * and can be put into either client-side or server-side mode using the {@link SSRExchangeParams.isClient} flag.\n *\n * In server-side mode, the `ssrExchange` will “record” results it sees from your API and provide them for you\n * to send to the client-side using the {@link SSRExchange.extractData} method.\n *\n * In client-side mode, the `ssrExchange` will use these serialized results, rehydrated either using\n * {@link SSRExchange.restoreData} or {@link SSRexchangeParams.initialState}, to replay results the\n * server-side has seen and sent before.\n *\n * Each serialized result will only be replayed once, as it’s assumed that your cache exchange will have the\n * results cached afterwards.\n */\nexport interface SSRExchange extends Exchange {\n  /** Client-side method to add serialized results to the {@link SSRExchange}.\n   * @param data - {@link SSRData},\n   */\n  restoreData(data: SSRData): void;\n  /** Server-side method to get all serialized results the {@link SSRExchange} has captured.\n   * @returns an {@link SSRData} dictionary.\n   */\n  extractData(): SSRData;\n}\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = (\n  result: OperationResult,\n  includeExtensions: boolean\n): SerializedResult => {\n  const serialized: SerializedResult = {\n    data: JSON.stringify(result.data),\n    hasNext: result.hasNext,\n  };\n\n  if (result.data !== undefined) {\n    serialized.data = JSON.stringify(result.data);\n  }\n\n  if (includeExtensions && result.extensions !== undefined) {\n    serialized.extensions = JSON.stringify(result.extensions);\n  }\n\n  if (result.error) {\n    serialized.error = {\n      graphQLErrors: result.error.graphQLErrors.map(error => {\n        if (!error.path && !error.extensions) return error.message;\n\n        return {\n          message: error.message,\n          path: error.path,\n          extensions: error.extensions,\n        };\n      }),\n    };\n\n    if (result.error.networkError) {\n      serialized.error.networkError = '' + result.error.networkError;\n    }\n  }\n\n  return serialized;\n};\n\n/** Deserialize plain JSON to an OperationResult\n * @internal\n */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult,\n  includeExtensions: boolean\n): OperationResult => ({\n  operation,\n  data: result.data ? JSON.parse(result.data) : undefined,\n  extensions:\n    includeExtensions && result.extensions\n      ? JSON.parse(result.extensions)\n      : undefined,\n  error: result.error\n    ? new CombinedError({\n        networkError: result.error.networkError\n          ? new Error(result.error.networkError)\n          : undefined,\n        graphQLErrors: result.error.graphQLErrors,\n      })\n    : undefined,\n  stale: false,\n  hasNext: !!result.hasNext,\n});\n\nconst revalidated = new Set<number>();\n\n/** Creates a server-side rendering `Exchange` that either captures responses on the server-side or replays them on the client-side.\n *\n * @param params - An {@link SSRExchangeParams} configuration object.\n * @returns the created {@link SSRExchange}\n *\n * @remarks\n * When dealing with server-side rendering, we essentially have two {@link Client | Clients} making requests,\n * the server-side client, and the client-side one. The `ssrExchange` helps implementing a tiny cache on both\n * sides that:\n *\n * - captures results on the server-side which it can serialize,\n * - replays results on the client-side that it deserialized from the server-side.\n *\n * Hint: The `ssrExchange` is basically an exchange that acts like a replacement for any fetch exchange\n * temporarily. As such, you should place it after your cache exchange but in front of any fetch exchange.\n */\nexport const ssrExchange = (params: SSRExchangeParams = {}): SSRExchange => {\n  const staleWhileRevalidate = !!params.staleWhileRevalidate;\n  const includeExtensions = !!params.includeExtensions;\n  const data: Record<string, SerializedResult | null> = {};\n\n  // On the client-side, we delete results from the cache as they're resolved\n  // this is delayed so that concurrent queries don't delete each other's data\n  const invalidateQueue: number[] = [];\n  const invalidate = (result: OperationResult) => {\n    invalidateQueue.push(result.operation.key);\n    if (invalidateQueue.length === 1) {\n      Promise.resolve().then(() => {\n        let key: number | void;\n        while ((key = invalidateQueue.shift())) {\n          data[key] = null;\n        }\n      });\n    }\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange =\n    ({ client, forward }) =>\n    ops$ => {\n      // params.isClient tells us whether we're on the client-side\n      // By default we assume that we're on the client if suspense-mode is disabled\n      const isClient =\n        params && typeof params.isClient === 'boolean'\n          ? !!params.isClient\n          : !client.suspense;\n\n      let forwardedOps$ = pipe(\n        ops$,\n        filter(\n          operation =>\n            operation.kind === 'teardown' ||\n            !data[operation.key] ||\n            !!data[operation.key]!.hasNext ||\n            operation.context.requestPolicy === 'network-only'\n        ),\n        map(mapTypeNames),\n        forward\n      );\n\n      // NOTE: Since below we might delete the cached entry after accessing\n      // it once, cachedOps$ needs to be merged after forwardedOps$\n      let cachedOps$ = pipe(\n        ops$,\n        filter(\n          operation =>\n            operation.kind !== 'teardown' &&\n            !!data[operation.key] &&\n            operation.context.requestPolicy !== 'network-only'\n        ),\n        map(op => {\n          const serialized = data[op.key]!;\n          const cachedResult = deserializeResult(\n            op,\n            serialized,\n            includeExtensions\n          );\n\n          if (staleWhileRevalidate && !revalidated.has(op.key)) {\n            cachedResult.stale = true;\n            revalidated.add(op.key);\n            reexecuteOperation(client, op);\n          }\n\n          const result: OperationResult = {\n            ...cachedResult,\n            operation: addMetadata(op, {\n              cacheOutcome: 'hit',\n            }),\n          };\n          return result;\n        })\n      );\n\n      if (!isClient) {\n        // On the server we cache results in the cache as they're resolved\n        forwardedOps$ = pipe(\n          forwardedOps$,\n          tap((result: OperationResult) => {\n            const { operation } = result;\n            if (operation.kind !== 'mutation') {\n              const serialized = serializeResult(result, includeExtensions);\n              data[operation.key] = serialized;\n            }\n          })\n        );\n      } else {\n        // On the client we delete results from the cache as they're resolved\n        cachedOps$ = pipe(cachedOps$, tap(invalidate));\n      }\n\n      return merge([forwardedOps$, cachedOps$]);\n    };\n\n  ssr.restoreData = (restore: SSRData) => {\n    for (const key in restore) {\n      // We only restore data that hasn't been previously invalidated\n      if (data[key] !== null) {\n        data[key] = restore[key];\n      }\n    }\n  };\n\n  ssr.extractData = () => {\n    const result: SSRData = {};\n    for (const key in data) if (data[key] != null) result[key] = data[key]!;\n    return result;\n  };\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n", "import type { Subscription, Source } from 'wonka';\nimport { filter, make, merge, mergeMap, pipe, takeUntil } from 'wonka';\n\nimport {\n  makeResult,\n  mergeResultPatch,\n  makeErrorResult,\n  makeOperation,\n} from '../utils';\n\nimport type {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationResult,\n} from '../types';\n\nimport type { FetchBody } from '../internal';\nimport { makeFetchBody } from '../internal';\n\n/** An abstract observer-like interface.\n *\n * @remarks\n * Observer-like interfaces are passed to {@link ObservableLike.subscribe} to provide them\n * with callbacks for their events.\n *\n * @see {@link https://github.com/tc39/proposal-observable} for the full TC39 Observable proposal.\n */\nexport interface ObserverLike<T> {\n  /** Callback for values an {@link ObservableLike} emits. */\n  next: (value: T) => void;\n  /** Callback for an error an {@link ObservableLike} emits, which ends the subscription. */\n  error: (err: any) => void;\n  /** Callback for the completion of an {@link ObservableLike}, which ends the subscription. */\n  complete: () => void;\n}\n\n/** An abstract observable-like interface.\n *\n * @remarks\n * Observable, or Observable-like interfaces, are often used by GraphQL transports to abstract\n * how they send {@link ExecutionResult | ExecutionResults} to consumers. These generally contain\n * a `subscribe` method accepting an {@link ObserverLike} structure.\n *\n * @see {@link https://github.com/tc39/proposal-observable} for the full TC39 Observable proposal.\n */\nexport interface ObservableLike<T> {\n  /** Start the Observable-like subscription and returns a subscription handle.\n   *\n   * @param observer - an {@link ObserverLike} object with result, error, and completion callbacks.\n   * @returns a subscription handle providing an `unsubscribe` method to stop the subscription.\n   */\n  subscribe(observer: ObserverLike<T>): {\n    unsubscribe: () => void;\n  };\n}\n\n/** A more cross-compatible version of the {@link GraphQLRequest} structure.\n * {@link FetchBody} for more details\n */\nexport type SubscriptionOperation = FetchBody;\n\n/** A subscription forwarding function, which must accept a {@link SubscriptionOperation}.\n *\n * @param operation - A {@link SubscriptionOperation}\n * @returns An {@link ObservableLike} object issuing {@link ExecutionResult | ExecutionResults}.\n */\nexport type SubscriptionForwarder = (\n  request: FetchBody,\n  operation: Operation\n) => ObservableLike<ExecutionResult>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  /** A subscription forwarding function, which must accept a {@link SubscriptionOperation}.\n   *\n   * @param operation - A {@link SubscriptionOperation}\n   * @returns An {@link ObservableLike} object issuing {@link ExecutionResult | ExecutionResults}.\n   *\n   * @remarks\n   * This callback is called for each {@link Operation} that this `subscriptionExchange` will\n   * handle. It receives the {@link SubscriptionOperation}, which is a more compatible version\n   * of the raw {@link Operation} objects and must return an {@link ObservableLike} of results.\n   */\n  forwardSubscription: SubscriptionForwarder;\n\n  /** Flag to enable this exchange to handle all types of GraphQL operations.\n   *\n   * @remarks\n   * When you aren’t using fetch exchanges and GraphQL over HTTP as a transport for your GraphQL requests,\n   * or you have a third-party GraphQL transport implementation, which must also be used for queries and\n   * mutations, this flag may be used to allow this exchange to handle all kinds of GraphQL operations.\n   *\n   * By default, this flag is `false` and the exchange will only handle GraphQL subscription operations.\n   */\n  enableAllOperations?: boolean;\n\n  /** A predicate function that causes an operation to be handled by this `subscriptionExchange` if `true` is returned.\n   *\n   * @param operation - an {@link Operation}\n   * @returns true when the operation is handled by this exchange.\n   *\n   * @remarks\n   * In some cases, a `subscriptionExchange` will be used to only handle some {@link Operation | Operations},\n   * e.g. all that contain `@live` directive. For these cases, this function may be passed to precisely\n   * determine which `Operation`s this exchange should handle, instead of forwarding.\n   *\n   * When specified, the {@link SubscriptionExchangeOpts.enableAllOperations} flag is disregarded.\n   */\n  isSubscriptionOperation?: (operation: Operation) => boolean;\n}\n\n/** Generic subscription exchange factory used to either create an exchange handling just subscriptions or all operation kinds.\n *\n * @remarks\n * `subscriptionExchange` can be used to create an {@link Exchange} that either\n * handles just GraphQL subscription operations, or optionally all operations,\n * when the {@link SubscriptionExchangeOpts.enableAllOperations} flag is passed.\n *\n * The {@link SubscriptionExchangeOpts.forwardSubscription} function must\n * be provided and provides a generic input that's based on {@link Operation}\n * but is compatible with many libraries implementing GraphQL request or\n * subscription interfaces.\n */\nexport const subscriptionExchange =\n  ({\n    forwardSubscription,\n    enableAllOperations,\n    isSubscriptionOperation,\n  }: SubscriptionExchangeOpts): Exchange =>\n  ({ client, forward }) => {\n    const createSubscriptionSource = (\n      operation: Operation\n    ): Source<OperationResult> => {\n      const observableish = forwardSubscription(\n        makeFetchBody(operation),\n        operation\n      );\n\n      return make<OperationResult>(observer => {\n        let isComplete = false;\n        let sub: Subscription | void;\n        let result: OperationResult | void;\n\n        function nextResult(value: ExecutionResult) {\n          observer.next(\n            (result = result\n              ? mergeResultPatch(result, value)\n              : makeResult(operation, value))\n          );\n        }\n\n        Promise.resolve().then(() => {\n          if (isComplete) return;\n\n          sub = observableish.subscribe({\n            next: nextResult,\n            error(error) {\n              if (Array.isArray(error)) {\n                // NOTE: This is an exception for transports that deliver `GraphQLError[]`, as part\n                // of the observer’s error callback (may happen as part of `graphql-ws`).\n                // We only check for arrays here, as this is an extremely “unexpected” case as the\n                // shape of `ExecutionResult` is instead strictly defined.\n                nextResult({ errors: error });\n              } else {\n                observer.next(makeErrorResult(operation, error));\n              }\n              observer.complete();\n            },\n            complete() {\n              if (!isComplete) {\n                isComplete = true;\n                if (operation.kind === 'subscription') {\n                  client.reexecuteOperation(\n                    makeOperation('teardown', operation, operation.context)\n                  );\n                }\n                if (result && result.hasNext) {\n                  nextResult({ hasNext: false });\n                }\n                observer.complete();\n              }\n            },\n          });\n        });\n\n        return () => {\n          isComplete = true;\n          if (sub) sub.unsubscribe();\n        };\n      });\n    };\n\n    const isSubscriptionOperationFn =\n      isSubscriptionOperation ||\n      (operation =>\n        operation.kind === 'subscription' ||\n        (!!enableAllOperations &&\n          (operation.kind === 'query' || operation.kind === 'mutation')));\n\n    return ops$ => {\n      const subscriptionResults$ = pipe(\n        ops$,\n        filter(\n          operation =>\n            operation.kind !== 'teardown' &&\n            isSubscriptionOperationFn(operation)\n        ),\n        mergeMap(operation => {\n          const { key } = operation;\n          const teardown$ = pipe(\n            ops$,\n            filter(op => op.kind === 'teardown' && op.key === key)\n          );\n\n          return pipe(\n            createSubscriptionSource(operation),\n            takeUntil(teardown$)\n          );\n        })\n      );\n\n      const forward$ = pipe(\n        ops$,\n        filter(\n          operation =>\n            operation.kind === 'teardown' ||\n            !isSubscriptionOperationFn(operation)\n        ),\n        forward\n      );\n\n      return merge([subscriptionResults$, forward$]);\n    };\n  };\n", "import { pipe, tap } from 'wonka';\nimport type { Exchange } from '../types';\n\n/** Simple log debugger exchange.\n *\n * @remarks\n * An exchange that logs incoming {@link Operation | Operations} and\n * {@link OperationResult | OperationResults} in development.\n *\n * This exchange is a no-op in production and often used in issue reporting\n * to understand certain usage patterns of `urql` without having access to\n * the original source code.\n *\n * Hint: When you report an issue you’re having with `urql`, adding\n * this as your first exchange and posting its output can speed up\n * issue triaging a lot!\n */\nexport const debugExchange: Exchange = ({ forward }) => {\n  if (process.env.NODE_ENV === 'production') {\n    return ops$ => forward(ops$);\n  } else {\n    return ops$ =>\n      pipe(\n        ops$,\n        // eslint-disable-next-line no-console\n        tap(op => console.log('[Exchange debug]: Incoming operation: ', op)),\n        forward,\n        tap(result =>\n          // eslint-disable-next-line no-console\n          console.log('[Exchange debug]: Completed operation: ', result)\n        )\n      );\n  }\n};\n", "/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, merge, mergeMap, pipe, takeUntil, onPush } from 'wonka';\n\nimport type { Exchange } from '../types';\nimport {\n  makeFetchBody,\n  makeFetchURL,\n  makeFetchOptions,\n  makeFetchSource,\n} from '../internal';\n\n/** Default GraphQL over HTTP fetch exchange.\n *\n * @remarks\n * The default fetch exchange in `urql` supports sending GraphQL over HTTP\n * requests, can optionally send GraphQL queries as GET requests, and\n * handles incremental multipart responses.\n *\n * This exchange does not handle persisted queries or multipart uploads.\n * Support for the former can be added using `@urql/exchange-persisted-fetch`\n * and the latter using `@urql/exchange-multipart-fetch`.\n *\n * Hint: The `fetchExchange` and the two other exchanges all use the built-in fetch\n * utilities in `@urql/core/internal`, which you can also use to implement\n * a customized fetch exchange.\n *\n * @see {@link makeFetchSource} for the shared utility calling the Fetch API.\n */\nexport const fetchExchange: Exchange = ({ forward, dispatchDebug }) => {\n  return ops$ => {\n    const fetchResults$ = pipe(\n      ops$,\n      filter(operation => {\n        return (\n          operation.kind !== 'teardown' &&\n          (operation.kind !== 'subscription' ||\n            !!operation.context.fetchSubscriptions)\n        );\n      }),\n      mergeMap(operation => {\n        const body = makeFetchBody(operation);\n        const url = makeFetchURL(operation, body);\n        const fetchOptions = makeFetchOptions(operation, body);\n\n        dispatchDebug({\n          type: 'fetchRequest',\n          message: 'A fetch request is being executed.',\n          operation,\n          data: {\n            url,\n            fetchOptions,\n          },\n        });\n\n        const source = pipe(\n          makeFetchSource(operation, url, fetchOptions),\n          takeUntil(\n            pipe(\n              ops$,\n              filter(op => op.kind === 'teardown' && op.key === operation.key)\n            )\n          )\n        );\n\n        if (process.env.NODE_ENV !== 'production') {\n          return pipe(\n            source,\n            onPush(result => {\n              const error = !result.data ? result.error : undefined;\n\n              dispatchDebug({\n                type: error ? 'fetchError' : 'fetchSuccess',\n                message: `A ${\n                  error ? 'failed' : 'successful'\n                } fetch response has been returned.`,\n                operation,\n                data: {\n                  url,\n                  fetchOptions,\n                  value: error || result,\n                },\n              });\n            })\n          );\n        }\n\n        return source;\n      })\n    );\n\n    const forward$ = pipe(\n      ops$,\n      filter(operation => {\n        return (\n          operation.kind === 'teardown' ||\n          (operation.kind === 'subscription' &&\n            !operation.context.fetchSubscriptions)\n        );\n      }),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n", "import { share } from 'wonka';\nimport type { ExchangeIO, Exchange, ExchangeInput } from '../types';\n\n/** Composes an array of Exchanges into a single one.\n *\n * @param exchanges - An array of {@link Exchange | Exchanges}.\n * @returns - A composed {@link Exchange}.\n *\n * @remarks\n * `composeExchanges` returns an {@link Exchange} that when instantiated\n * composes the array of passed `Exchange`s into one, calling them from\n * right to left, with the prior `Exchange`’s {@link ExchangeIO} function\n * as the {@link ExchangeInput.forward} input.\n *\n * This simply merges all exchanges into one and is used by the {@link Client}\n * to merge the `exchanges` option it receives.\n *\n * @throws\n * In development, if {@link ExchangeInput.forward} is called repeatedly\n * by an {@link Exchange} an error is thrown, since `forward()` must only\n * be called once per `Exchange`.\n */\nexport const composeExchanges =\n  (exchanges: Exchange[]): Exchange =>\n  ({ client, forward, dispatchDebug }: ExchangeInput): ExchangeIO =>\n    exchanges.reduceRight((forward, exchange) => {\n      let forwarded = false;\n      return exchange({\n        client,\n        forward(operations$) {\n          if (process.env.NODE_ENV !== 'production') {\n            if (forwarded)\n              throw new Error(\n                'forward() must only be called once in each Exchange.'\n              );\n            forwarded = true;\n          }\n          return share(forward(share(operations$)));\n        },\n        dispatchDebug(event) {\n          dispatchDebug({\n            timestamp: Date.now(),\n            source: exchange.name,\n            ...event,\n          });\n        },\n      });\n    }, forward);\n", "import { mergeMap, fromValue, fromPromise, pipe } from 'wonka';\nimport type { Operation, OperationResult, Exchange } from '../types';\nimport type { CombinedError } from '../utils';\n\n/** Options for the `mapExchange` allowing it to react to incoming operations, results, or errors. */\nexport interface MapExchangeOpts {\n  /** Accepts a callback for incoming `Operation`s.\n   *\n   * @param operation - An {@link Operation} that the {@link mapExchange} received.\n   * @returns optionally a new {@link Operation} replacing the original.\n   *\n   * @remarks\n   * You may return new {@link Operation | Operations} from this function replacing\n   * the original that the {@link mapExchange} received.\n   * It’s recommended that you use the {@link makeOperation} utility to create a copy\n   * of the original when you do this. (However, this isn’t required)\n   *\n   * Hint: The callback may also be promisified and return a new {@link Operation} asynchronously,\n   * provided you place your {@link mapExchange} after all synchronous {@link Exchange | Exchanges},\n   * like after your `cacheExchange`.\n   */\n  onOperation?(operation: Operation): Promise<Operation> | Operation | void;\n  /** Accepts a callback for incoming `OperationResult`s.\n   *\n   * @param result - An {@link OperationResult} that the {@link mapExchange} received.\n   * @returns optionally a new {@link OperationResult} replacing the original.\n   *\n   * @remarks\n   * This callback may optionally return a new {@link OperationResult} that replaces the original,\n   * which you can use to modify incoming API results.\n   *\n   * Hint: The callback may also be promisified and return a new {@link Operation} asynchronously,\n   * provided you place your {@link mapExchange} after all synchronous {@link Exchange | Exchanges},\n   * like after your `cacheExchange`.\n   */\n  onResult?(\n    result: OperationResult\n  ): Promise<OperationResult> | OperationResult | void;\n  /** Accepts a callback for incoming `CombinedError`s.\n   *\n   * @param error - A {@link CombinedError} that an incoming {@link OperationResult} contained.\n   * @param operation - The {@link Operation} of the incoming {@link OperationResult}.\n   *\n   * @remarks\n   * The callback may also be promisified and return a new {@link Operation} asynchronously,\n   * provided you place your {@link mapExchange} after all synchronous {@link Exchange | Exchanges},\n   * like after your `cacheExchange`.\n   */\n  onError?(error: CombinedError, operation: Operation): void;\n}\n\n/** Creates an `Exchange` mapping over incoming operations, results, and/or errors.\n *\n * @param opts - A {@link MapExchangeOpts} configuration object, containing the callbacks the `mapExchange` will use.\n * @returns the created {@link Exchange}\n *\n * @remarks\n * The `mapExchange` may be used to react to or modify incoming {@link Operation | Operations}\n * and {@link OperationResult | OperationResults}. Optionally, it can also modify these\n * asynchronously, when a promise is returned from the callbacks.\n *\n * This is useful to, for instance, add an authentication token to a given request, when\n * the `@urql/exchange-auth` package would be overkill.\n *\n * It can also accept an `onError` callback, which can be used to react to incoming\n * {@link CombinedError | CombinedErrors} on results, and trigger side-effects.\n *\n */\nexport const mapExchange = ({\n  onOperation,\n  onResult,\n  onError,\n}: MapExchangeOpts): Exchange => {\n  return ({ forward }) =>\n    ops$ => {\n      return pipe(\n        pipe(\n          ops$,\n          mergeMap(operation => {\n            const newOperation =\n              (onOperation && onOperation(operation)) || operation;\n            return 'then' in newOperation\n              ? fromPromise(newOperation)\n              : fromValue(newOperation);\n          })\n        ),\n        forward,\n        mergeMap(result => {\n          if (onError && result.error) onError(result.error, result.operation);\n          const newResult = (onResult && onResult(result)) || result;\n          return 'then' in newResult\n            ? fromPromise(newResult)\n            : fromValue(newResult);\n        })\n      );\n    };\n};\n", "import { filter, pipe, tap } from 'wonka';\nimport type { ExchangeIO, ExchangeInput } from '../types';\n\n/** Used by the `Client` as the last exchange to warn about unhandled operations.\n *\n * @remarks\n * In a normal setup, some operations may go unhandled when a {@link Client} isn’t set up\n * with the right exchanges.\n * For instance, a `Client` may be missing a fetch exchange, or an exchange handling subscriptions.\n * This {@link Exchange} is added by the `Client` automatically to log warnings about unhandled\n * {@link Operaiton | Operations} in development.\n */\nexport const fallbackExchange: ({\n  dispatchDebug,\n}: Pick<ExchangeInput, 'dispatchDebug'>) => ExchangeIO =\n  ({ dispatchDebug }) =>\n  ops$ => {\n    if (process.env.NODE_ENV !== 'production') {\n      ops$ = pipe(\n        ops$,\n        tap(operation => {\n          if (\n            operation.kind !== 'teardown' &&\n            process.env.NODE_ENV !== 'production'\n          ) {\n            const message = `No exchange has handled operations of kind \"${operation.kind}\". Check whether you've added an exchange responsible for these operations.`;\n\n            dispatchDebug({\n              type: 'fallbackCatch',\n              message,\n              operation,\n            });\n            console.warn(message);\n          }\n        })\n      );\n    }\n\n    // All operations that skipped through the entire exchange chain should be filtered from the output\n    return filter((_x): _x is never => false)(ops$);\n  };\n", "/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport type { Source, Subscription } from 'wonka';\nimport {\n  lazy,\n  filter,\n  makeSubject,\n  onEnd,\n  onPush,\n  onStart,\n  pipe,\n  share,\n  take,\n  takeUntil,\n  takeWhile,\n  publish,\n  subscribe,\n  switchMap,\n  fromValue,\n  merge,\n  map,\n} from 'wonka';\n\nimport { composeExchanges } from './exchanges';\nimport { fallbackExchange } from './exchanges/fallback';\n\nimport type {\n  DocumentInput,\n  AnyVariables,\n  Exchange,\n  ExchangeInput,\n  GraphQLRequest,\n  Operation,\n  OperationInstance,\n  OperationContext,\n  OperationResult,\n  OperationResultSource,\n  OperationType,\n  RequestPolicy,\n  DebugEvent,\n} from './types';\n\nimport {\n  createRequest,\n  withPromise,\n  noop,\n  makeOperation,\n  getOperationType,\n} from './utils';\n\n/** Configuration options passed when creating a new {@link Client}.\n *\n * @remarks\n * The `ClientOptions` are passed when creating a new {@link Client}, and\n * are used to instantiate the pipeline of {@link Exchange | Exchanges}, configure\n * options used to initialize {@link OperationContext | OperationContexts}, or to\n * change the general behaviour of the {@link Client}.\n */\nexport interface ClientOptions {\n  /** Target URL used by fetch exchanges to make GraphQL API requests to.\n   *\n   * @remarks\n   * This is the URL that fetch exchanges will call to make GraphQL API requests.\n   * This value is copied to {@link OperationContext.url}.\n   */\n  url: string;\n  /** Additional options used by fetch exchanges that'll be passed to the `fetch` call on API requests.\n   *\n   * @remarks\n   * The options in this object or an object returned by a callback function will be merged into the\n   * {@link RequestInit} options passed to the `fetch` call.\n   *\n   * Hint: If you're trying to implement more complex changes per {@link Operation}, it's worth considering\n   * to use the {@link mapExchange} instead, which allows you to change `Operation`s and `OperationResult`s.\n   *\n   * Hint: If you're trying to use this as a function for authentication, consider checking out\n   * `@urql/exchange-auth` instead, which allows you to handle refresh auth flows, and more\n   * complex auth flows.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch} for a description of this object.\n   */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** A `fetch` function polyfill used by fetch exchanges to make API calls.\n   *\n   * @remarks\n   * This is the fetch polyfill used by any fetch exchange to make an API request. By default, when this\n   * option isn't set, any fetch exchange will attempt to use the globally available `fetch` function\n   * to make a request instead.\n   *\n   * It's recommended to only pass a polyfill, if any of the environments you're running the {@link Client}\n   * in don't support the Fetch API natively.\n   *\n   * Hint: If you're using the \"Incremental Delivery\" multipart spec, for instance with `@defer` directives,\n   * you're better off using the native `fetch` function, or must ensure that your polyfill supports streamed\n   * results. However, a \"Streaming requests unsupported\" error will be thrown, to let you know that your `fetch`\n   * API doesn't support incrementally streamed responses, if this mode is used.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.\n   */\n  fetch?: typeof fetch;\n  /** Allows a subscription to be executed using a `fetch` API request.\n   *\n   * @remarks\n   * If your API supports the `text/event-stream` and/or `multipart/mixed` response protocol, and you use\n   * this protocol to handle subscriptions, then you may switch this flag to `true`.\n   *\n   * This means you won’t have to create a {@link subscriptionExchange} to handle subscriptions with an\n   * external transport, and will instead be able to use GraphQL over HTTP transports.\n   */\n  fetchSubscriptions?: boolean;\n  /** A list of `Exchange`s that will be used to create the `Client`'s execution pipeline.\n   *\n   * @remarks\n   * The {@link Client} accepts and composes a list of {@link Exchange | Exchanges} into an “exchange pipeline”\n   * which receive a stream of {@link Operation | Operations} the `Client` wishes to execute, and return a stream\n   * of {@link OperationResult | OperationResults}.\n   *\n   * This is the basis for how `urql` handles GraphQL operations, and exchanges handle the creation, execution,\n   * and control flow of exchanges for the `Client`.\n   *\n   * To easily get started you should consider using the {@link cacheExchange} and {@link fetchExchange}\n   * these are all exported from the core package.\n   *\n   * @see {@link https://urql.dev/goto/docs/architecture/#the-client-and-exchanges} for more information\n   * on what `Exchange`s are and how they work.\n   */\n  exchanges: Exchange[];\n  /** A configuration flag indicating whether support for \"Suspense\" is activated.\n   *\n   * @remarks\n   * This configuration flag is only relevant for using `urql` with the React or Preact bindings.\n   * When activated it allows `useQuery` to \"suspend\" instead of returning a loading state, which\n   * will stop updates in a querying component and instead cascade\n   * to a higher suspense boundary for a loading state.\n   *\n   * Hint: While, when this option is enabled, by default all `useQuery` hooks will suspense, you can\n   * disable Suspense selectively for each hook.\n   *\n   * @see {@link https://beta.reactjs.org/blog/2022/03/29/react-v18#new-suspense-features} for more information on React Suspense.\n   */\n  suspense?: boolean;\n  /** The request and caching strategy that all `Operation`s on this `Client` will use by default.\n   *\n   * @remarks\n   * The {@link RequestPolicy} instructs cache exchanges how to use and treat their cached results.\n   * By default `cache-first` is set and used, which will use cache results, and only make an API request\n   * on a cache miss.\n   *\n   * The `requestPolicy` can be overriden per operation, since it's added to the {@link OperationContext},\n   * which allows you to change the policy per `Operation`, rather than changing it by default here.\n   *\n   * Hint: We don’t recommend changing this from the default `cache-first` option, unless you know what\n   * you‘re doing. Setting this to `cache-and-network` is not recommend and may not lead to the behaviour\n   * you expect. If you’re looking to always update your cache frequently, use `@urql/exchange-request-policy`\n   * instead.\n   */\n  requestPolicy?: RequestPolicy;\n  /** Instructs fetch exchanges to use a GET request.\n   *\n   * @remarks\n   * This changes the {@link OperationContext.preferGetMethod} option, which tells fetch exchanges\n   * to use GET requests for queries instead of POST requests.\n   *\n   * When set to `true` or `'within-url-limit'`, built-in fetch exchanges will always attempt to send query\n   * operations as GET requests, unless the resulting URL exceeds a length of 2,048 characters.\n   * If you want to bypass this restriction, set this option to `'force'` instead, to always send GET.\n   * requests for queries.\n   */\n  preferGetMethod?: boolean | 'force' | 'within-url-limit';\n}\n\n/** The `Client` is the central hub for your GraphQL operations and holds `urql`'s state.\n *\n * @remarks\n * The `Client` manages your active GraphQL operations and their state, and contains the\n * {@link Exchange} pipeline to execute your GraphQL operations.\n *\n * It contains methods that allow you to execute GraphQL operations manually, but the `Client`\n * is also interacted with by bindings (for React, Preact, Vue, Svelte, etc) to execute GraphQL\n * operations.\n *\n * While {@link Exchange | Exchanges} are ultimately responsible for the control flow of operations,\n * sending API requests, and caching, the `Client` still has the important responsibility for\n * creating operations, managing consumers of active operations, sharing results for operations,\n * and more tasks as a “central hub”.\n *\n * @see {@link https://urql.dev/goto/docs/architecture/#requests-and-operations-on-the-client} for more information\n * on what the `Client` is and does.\n */\nexport interface Client {\n  new (options: ClientOptions): Client;\n\n  /** Exposes the stream of `Operation`s that is passed to the `Exchange` pipeline.\n   *\n   * @remarks\n   * This is a Wonka {@link Source} that issues the {@link Operation | Operations} going into\n   * the exchange pipeline.\n   * @internal\n   */\n  operations$: Source<Operation>;\n\n  /** Flag indicating whether support for “Suspense” is activated.\n   *\n   * @remarks\n   * This flag indicates whether support for “Suspense” has been activated via the\n   * {@link ClientOptions.suspense} flag.\n   *\n   * When this is enabled, the {@link Client} itself doesn’t function any differently, and the flag\n   * only serves as an instructions for the React/Preact bindings to change their behaviour.\n   *\n   * @see {@link ClientOptions.suspense} for more information.\n   * @internal\n   */\n  suspense: boolean;\n\n  /** Dispatches an `Operation` to the `Exchange` pipeline, if this `Operation` is active.\n   *\n   * @remarks\n   * This method is frequently used in {@link Exchange | Exchanges}, for instance caches, to reexecute\n   * an operation. It’s often either called because an `Operation` will need to be queried against the\n   * cache again, if a cache result has changed or been invalidated, or it’s called with an {@link Operation}'s\n   * {@link RequestPolicy} set to `network-only` to issue a network request.\n   *\n   * This method will only dispatch an {@link Operation} if it has active consumers, meaning,\n   * active subscribers to the sources of {@link OperationResult}. For instance, if no bindings\n   * (e.g. `useQuery`) is subscribed to the `Operation`, then `reexecuteOperation` will do nothing.\n   *\n   * All operations are put onto a queue and executed after a micro-tick. The queue of operations is\n   * emptied eagerly and synchronously, similar to a trampoline scheduler.\n   */\n  reexecuteOperation(operation: Operation): void;\n\n  /** Subscribe method to add an event listener to debug events.\n   *\n   * @param onEvent - A callback called with new debug events, each time an `Exchange` issues them.\n   * @returns A Wonka {@link Subscription} which is used to optionally terminate the event listener.\n   *\n   * @remarks\n   * This is a method that's only available in development, and allows the `urql-devtools` to receive\n   * to debug events that are issued by exchanges, giving the devtools more information about the flow\n   * and execution of {@link Operation | Operations}.\n   *\n   * @see {@link DebugEventTypes} for a description of all debug events.\n   * @internal\n   */\n  subscribeToDebugTarget?(onEvent: (event: DebugEvent) => void): Subscription;\n\n  /** Creates an `Operation` from a `GraphQLRequest` and optionally, overriding `OperationContext` options.\n   *\n   * @param kind - The {@link OperationType} of GraphQL operation, i.e. `query`, `mutation`, or `subscription`.\n   * @param request - A {@link GraphQLRequest} created prior to calling this method.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns An {@link Operation} created from the parameters.\n   *\n   * @remarks\n   * This method is expected to be called with a `kind` set to the `OperationType` of the GraphQL operation.\n   * In development, this is enforced by checking that the GraphQL document's operation matches this `kind`.\n   *\n   * Hint: While bindings will use this method combined with {@link Client.executeRequestOperation}, if\n   * you’re executing operations manually, you can use one of the other convenience methods instead.\n   *\n   * @see {@link Client.executeRequestOperation} for the method used to execute operations.\n   * @see {@link createRequest} which creates a `GraphQLRequest` from a `DocumentNode` and variables.\n   */\n  createRequestOperation<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables,\n  >(\n    kind: OperationType,\n    request: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Operation<Data, Variables>;\n\n  /** Creates a `Source` that executes the `Operation` and issues `OperationResult`s for this `Operation`.\n   *\n   * @param operation - {@link Operation} that will be executed.\n   * @returns A Wonka {@link Source} of {@link OperationResult | OperationResults} for the passed `Operation`.\n   *\n   * @remarks\n   * The {@link Operation} will be dispatched to the pipeline of {@link Exchange | Exchanges} when\n   * subscribing to the returned {@link Source}, which issues {@link OperationResult | OperationResults}\n   * belonging to this `Operation`.\n   *\n   * Internally, {@link OperationResult | OperationResults} are filtered and deliverd to this source by\n   * comparing the {@link Operation.key} on the operation and the {@link OperationResult.operation}.\n   * For mutations, the {@link OperationContext._instance | `OperationContext._instance`} will additionally be compared, since two mutations\n   * with, even given the same variables, will have two distinct results and will be executed separately.\n   *\n   * The {@link Client} dispatches the {@link Operation} when we subscribe to the returned {@link Source}\n   * and will from then on consider the `Operation` as “active” until we unsubscribe. When all consumers unsubscribe\n   * from an `Operation` and it becomes “inactive” a `teardown` signal will be dispatched to the\n   * {@link Exchange | Exchanges}.\n   *\n   * Hint: While bindings will use this method, if you’re executing operations manually, you can use one\n   * of the other convenience methods instead, like {@link Client.executeQuery} et al.\n   */\n  executeRequestOperation<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables,\n  >(\n    operation: Operation<Data, Variables>\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL query operation created from the passed parameters.\n   *\n   * @param query - a GraphQL document containing the query operation that will be executed.\n   * @param variables - the variables used to execute the operation.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link OperationResultSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.query` method is useful to programmatically create and issue a GraphQL query operation.\n   * It automatically calls {@link createRequest}, {@link client.createRequestOperation}, and\n   * {@link client.executeRequestOperation} for you, and is a convenience method.\n   *\n   * Since it returns a {@link OperationResultSource} it may be chained with a `toPromise()` call to only\n   * await a single result in an async function.\n   *\n   * Hint: This is the recommended way to create queries programmatically when not using the bindings,\n   * or when you’re trying to get a single, promisified result.\n   *\n   * @example\n   * ```ts\n   * const getBookQuery = gql`\n   *   query GetBook($id: ID!) {\n   *     book(id: $id) {\n   *       id\n   *       name\n   *       author {\n   *         name\n   *       }\n   *     }\n   *   }\n   * `;\n   *\n   * async function getBook(id) {\n   *   const result = await client.query(getBookQuery, { id }).toPromise();\n   *   if (result.error) {\n   *     throw result.error;\n   *   }\n   *\n   *   return result.data.book;\n   * }\n   * ```\n   */\n  query<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Returns the first synchronous result a `Client` provides for a given operation.\n   *\n   * @param query - a GraphQL document containing the query operation that will be executed.\n   * @param variables - the variables used to execute the operation.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns An {@link OperationResult} if one became available synchronously or `null`.\n   *\n   * @remarks\n   * The `Client.readQuery` method returns a result synchronously or defaults to `null`. This is useful\n   * as it limits the result for a query operation to whatever the cache {@link Exchange} of a {@link Client}\n   * had stored and available at that moment.\n   *\n   * In `urql`, it's expected that cache exchanges return their results synchronously. The bindings\n   * and this method exploit this by using synchronous results, like these, to check what data is already\n   * in the cache.\n   *\n   * This method is similar to what all bindings do to synchronously provide the initial state for queries,\n   * regardless of whether effects afterwards that subscribe to the query operation update this state synchronously\n   * or asynchronously.\n   */\n  readQuery<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResult<Data, Variables> | null;\n\n  /** Creates a `Source` that executes the GraphQL query operation for the passed `GraphQLRequest`.\n   *\n   * @param query - a {@link GraphQLRequest}\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link PromisifiedSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.executeQuery` method is used to programmatically issue a GraphQL query operation.\n   * It automatically calls {@link client.createRequestOperation} and {@link client.executeRequestOperation} for you,\n   * but requires you to create a {@link GraphQLRequest} using {@link createRequest} yourself first.\n   *\n   * @see {@link Client.query} for a method that doesn't require calling {@link createRequest} yourself.\n   */\n  executeQuery<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL subscription operation created from the passed parameters.\n   *\n   * @param query - a GraphQL document containing the subscription operation that will be executed.\n   * @param variables - the variables used to execute the operation.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A Wonka {@link Source} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.subscription` method is useful to programmatically create and issue a GraphQL subscription operation.\n   * It automatically calls {@link createRequest}, {@link client.createRequestOperation}, and\n   * {@link client.executeRequestOperation} for you, and is a convenience method.\n   *\n   * Hint: This is the recommended way to create subscriptions programmatically when not using the bindings.\n   *\n   * @example\n   * ```ts\n   * import { pipe, subscribe } from 'wonka';\n   *\n   * const getNewsSubscription = gql`\n   *   subscription GetNews {\n   *     breakingNews {\n   *       id\n   *       text\n   *       createdAt\n   *     }\n   *   }\n   * `;\n   *\n   * function subscribeToBreakingNews() {\n   *   const subscription = pipe(\n   *     client.subscription(getNewsSubscription, {}),\n   *     subscribe(result => {\n   *       if (result.data) {\n   *         console.log(result.data.breakingNews.text);\n   *       }\n   *     })\n   *   );\n   *\n   *   return subscription.unsubscribe;\n   * }\n   * ```\n   */\n  subscription<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL subscription operation for the passed `GraphQLRequest`.\n   *\n   * @param query - a {@link GraphQLRequest}\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link PromisifiedSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.executeSubscription` method is used to programmatically issue a GraphQL subscription operation.\n   * It automatically calls {@link client.createRequestOperation} and {@link client.executeRequestOperation} for you,\n   * but requires you to create a {@link GraphQLRequest} using {@link createRequest} yourself first.\n   *\n   * @see {@link Client.subscription} for a method that doesn't require calling {@link createRequest} yourself.\n   */\n  executeSubscription<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables,\n  >(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL mutation operation created from the passed parameters.\n   *\n   * @param query - a GraphQL document containing the mutation operation that will be executed.\n   * @param variables - the variables used to execute the operation.\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link PromisifiedSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.mutation` method is useful to programmatically create and issue a GraphQL mutation operation.\n   * It automatically calls {@link createRequest}, {@link client.createRequestOperation}, and\n   * {@link client.executeRequestOperation} for you, and is a convenience method.\n   *\n   * Since it returns a {@link PromisifiedSource} it may be chained with a `toPromise()` call to only\n   * await a single result in an async function. Since mutations will only typically issue one result,\n   * using this method is recommended.\n   *\n   * Hint: This is the recommended way to create mutations programmatically when not using the bindings,\n   * or when you’re trying to get a single, promisified result.\n   *\n   * @example\n   * ```ts\n   * const createPostMutation = gql`\n   *   mutation CreatePost($text: String!) {\n   *     createPost(text: $text) {\n   *       id\n   *       text\n   *     }\n   *   }\n   * `;\n   *\n   * async function createPost(text) {\n   *   const result = await client.mutation(createPostMutation, {\n   *     text,\n   *   }).toPromise();\n   *   if (result.error) {\n   *     throw result.error;\n   *   }\n   *\n   *   return result.data.createPost;\n   * }\n   * ```\n   */\n  mutation<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentInput<Data, Variables>,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n\n  /** Creates a `Source` that executes the GraphQL mutation operation for the passed `GraphQLRequest`.\n   *\n   * @param query - a {@link GraphQLRequest}\n   * @param opts - {@link OperationContext} options that'll override and be merged with options from the {@link ClientOptions}.\n   * @returns A {@link PromisifiedSource} issuing the {@link OperationResult | OperationResults} for the GraphQL operation.\n   *\n   * @remarks\n   * The `Client.executeMutation` method is used to programmatically issue a GraphQL mutation operation.\n   * It automatically calls {@link client.createRequestOperation} and {@link client.executeRequestOperation} for you,\n   * but requires you to create a {@link GraphQLRequest} using {@link createRequest} yourself first.\n   *\n   * @see {@link Client.mutation} for a method that doesn't require calling {@link createRequest} yourself.\n   */\n  executeMutation<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): OperationResultSource<OperationResult<Data, Variables>>;\n}\n\nexport const Client: new (opts: ClientOptions) => Client = function Client(\n  this: Client | {},\n  opts: ClientOptions\n) {\n  if (process.env.NODE_ENV !== 'production' && !opts.url) {\n    throw new Error('You are creating an urql-client without a url.');\n  }\n\n  let ids = 0;\n\n  const replays = new Map<number, OperationResult>();\n  const active: Map<number, Source<OperationResult>> = new Map();\n  const dispatched = new Set<number>();\n  const queue: Operation[] = [];\n\n  const baseOpts = {\n    url: opts.url,\n    fetchSubscriptions: opts.fetchSubscriptions,\n    fetchOptions: opts.fetchOptions,\n    fetch: opts.fetch,\n    preferGetMethod: opts.preferGetMethod,\n    requestPolicy: opts.requestPolicy || 'cache-first',\n  };\n\n  // This subject forms the input of operations; executeOperation may be\n  // called to dispatch a new operation on the subject\n  const operations = makeSubject<Operation>();\n\n  function nextOperation(operation: Operation) {\n    if (\n      operation.kind === 'mutation' ||\n      operation.kind === 'teardown' ||\n      !dispatched.has(operation.key)\n    ) {\n      if (operation.kind === 'teardown') {\n        dispatched.delete(operation.key);\n      } else if (operation.kind !== 'mutation') {\n        dispatched.add(operation.key);\n      }\n      operations.next(operation);\n    }\n  }\n\n  // We define a queued dispatcher on the subject, which empties the queue when it's\n  // activated to allow `reexecuteOperation` to be trampoline-scheduled\n  let isOperationBatchActive = false;\n  function dispatchOperation(operation?: Operation | void) {\n    if (operation) nextOperation(operation);\n\n    if (!isOperationBatchActive) {\n      isOperationBatchActive = true;\n      while (isOperationBatchActive && (operation = queue.shift()))\n        nextOperation(operation);\n      isOperationBatchActive = false;\n    }\n  }\n\n  /** Defines how result streams are created */\n  const makeResultSource = (operation: Operation) => {\n    let result$ = pipe(\n      results$,\n      // Filter by matching key (or _instance if it’s set)\n      filter(\n        (res: OperationResult) =>\n          res.operation.kind === operation.kind &&\n          res.operation.key === operation.key &&\n          (!res.operation.context._instance ||\n            res.operation.context._instance === operation.context._instance)\n      ),\n      // End the results stream when an active teardown event is sent\n      takeUntil(\n        pipe(\n          operations.source,\n          filter(op => op.kind === 'teardown' && op.key === operation.key)\n        )\n      )\n    );\n\n    if (operation.kind !== 'query') {\n      // Interrupt subscriptions and mutations when they have no more results\n      result$ = pipe(\n        result$,\n        takeWhile(result => !!result.hasNext, true)\n      );\n    } else {\n      result$ = pipe(\n        result$,\n        // Add `stale: true` flag when a new operation is sent for queries\n        switchMap(result => {\n          const value$ = fromValue(result);\n          return result.stale || result.hasNext\n            ? value$\n            : merge([\n                value$,\n                pipe(\n                  operations.source,\n                  filter(op => op.key === operation.key),\n                  take(1),\n                  map(() => {\n                    result.stale = true;\n                    return result;\n                  })\n                ),\n              ]);\n        })\n      );\n    }\n\n    if (operation.kind !== 'mutation') {\n      result$ = pipe(\n        result$,\n        // Store replay result\n        onPush(result => {\n          if (result.stale) {\n            // If the current result has queued up an operation of the same\n            // key, then `stale` refers to it\n            for (const operation of queue) {\n              if (operation.key === result.operation.key) {\n                dispatched.delete(operation.key);\n                break;\n              }\n            }\n          } else if (!result.hasNext) {\n            dispatched.delete(operation.key);\n          }\n          replays.set(operation.key, result);\n        }),\n        // Cleanup active states on end of source\n        onEnd(() => {\n          // Delete the active operation handle\n          dispatched.delete(operation.key);\n          replays.delete(operation.key);\n          active.delete(operation.key);\n          // Interrupt active queue\n          isOperationBatchActive = false;\n          // Delete all queued up operations of the same key on end\n          for (let i = queue.length - 1; i >= 0; i--)\n            if (queue[i].key === operation.key) queue.splice(i, 1);\n          // Dispatch a teardown signal for the stopped operation\n          nextOperation(\n            makeOperation('teardown', operation, operation.context)\n          );\n        })\n      );\n    } else {\n      result$ = pipe(\n        result$,\n        // Send mutation operation on start\n        onStart(() => {\n          nextOperation(operation);\n        })\n      );\n    }\n\n    return share(result$);\n  };\n\n  const instance: Client =\n    this instanceof Client ? this : Object.create(Client.prototype);\n  const client: Client = Object.assign(instance, {\n    suspense: !!opts.suspense,\n    operations$: operations.source,\n\n    reexecuteOperation(operation: Operation) {\n      // Reexecute operation only if any subscribers are still subscribed to the\n      // operation's exchange results\n      if (operation.kind === 'teardown') {\n        dispatchOperation(operation);\n      } else if (operation.kind === 'mutation' || active.has(operation.key)) {\n        let queued = false;\n        for (let i = 0; i < queue.length; i++)\n          queued = queued || queue[i].key === operation.key;\n        if (!queued) dispatched.delete(operation.key);\n        queue.push(operation);\n        Promise.resolve().then(dispatchOperation);\n      }\n    },\n\n    createRequestOperation(kind, request, opts) {\n      if (!opts) opts = {};\n\n      let requestOperationType: string | undefined;\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        kind !== 'teardown' &&\n        (requestOperationType = getOperationType(request.query)) !== kind\n      ) {\n        throw new Error(\n          `Expected operation of type \"${kind}\" but found \"${requestOperationType}\"`\n        );\n      }\n\n      return makeOperation(kind, request, {\n        _instance:\n          kind === 'mutation'\n            ? ((ids = (ids + 1) | 0) as OperationInstance)\n            : undefined,\n        ...baseOpts,\n        ...opts,\n        requestPolicy: opts.requestPolicy || baseOpts.requestPolicy,\n        suspense: opts.suspense || (opts.suspense !== false && client.suspense),\n      });\n    },\n\n    executeRequestOperation(operation) {\n      if (operation.kind === 'mutation') {\n        return withPromise(makeResultSource(operation));\n      }\n\n      return withPromise(\n        lazy<OperationResult>(() => {\n          let source = active.get(operation.key);\n          if (!source) {\n            active.set(operation.key, (source = makeResultSource(operation)));\n          }\n\n          source = pipe(\n            source,\n            onStart(() => {\n              dispatchOperation(operation);\n            })\n          );\n\n          const replay = replays.get(operation.key);\n          if (\n            operation.kind === 'query' &&\n            replay &&\n            (replay.stale || replay.hasNext)\n          ) {\n            return pipe(\n              merge([\n                source,\n                pipe(\n                  fromValue(replay),\n                  filter(replay => replay === replays.get(operation.key))\n                ),\n              ]),\n              switchMap(fromValue)\n            );\n          } else {\n            return source;\n          }\n        })\n      );\n    },\n\n    executeQuery(query, opts) {\n      const operation = client.createRequestOperation('query', query, opts);\n      return client.executeRequestOperation(operation);\n    },\n\n    executeSubscription(query, opts) {\n      const operation = client.createRequestOperation(\n        'subscription',\n        query,\n        opts\n      );\n      return client.executeRequestOperation(operation);\n    },\n\n    executeMutation(query, opts) {\n      const operation = client.createRequestOperation('mutation', query, opts);\n      return client.executeRequestOperation(operation);\n    },\n\n    readQuery(query, variables, context) {\n      let result: OperationResult | null = null;\n\n      pipe(\n        client.query(query, variables, context),\n        subscribe(res => {\n          result = res;\n        })\n      ).unsubscribe();\n\n      return result;\n    },\n\n    query(query, variables, context) {\n      return client.executeQuery(createRequest(query, variables), context);\n    },\n\n    subscription(query, variables, context) {\n      return client.executeSubscription(\n        createRequest(query, variables),\n        context\n      );\n    },\n\n    mutation(query, variables, context) {\n      return client.executeMutation(createRequest(query, variables), context);\n    },\n  } as Client);\n\n  let dispatchDebug: ExchangeInput['dispatchDebug'] = noop;\n  if (process.env.NODE_ENV !== 'production') {\n    const { next, source } = makeSubject<DebugEvent>();\n    client.subscribeToDebugTarget = (onEvent: (e: DebugEvent) => void) =>\n      pipe(source, subscribe(onEvent));\n    dispatchDebug = next as ExchangeInput['dispatchDebug'];\n  }\n\n  // All exchange are composed into a single one and are called using the constructed client\n  // and the fallback exchange stream\n  const composedExchange = composeExchanges(opts.exchanges);\n\n  // All exchanges receive inputs using which they can forward operations to the next exchange\n  // and receive a stream of results in return, access the client, or dispatch debugging events\n  // All operations then run through the Exchange IOs in a pipeline-like fashion\n  const results$ = share(\n    composedExchange({\n      client,\n      dispatchDebug,\n      forward: fallbackExchange({ dispatchDebug }),\n    })(operations.source)\n  );\n\n  // Prevent the `results$` exchange pipeline from being closed by active\n  // cancellations cascading up from components\n  pipe(results$, publish);\n\n  return client;\n} as any;\n\n/** Accepts `ClientOptions` and creates a `Client`.\n * @param opts - A {@link ClientOptions} objects with options for the `Client`.\n * @returns A {@link Client} instantiated with `opts`.\n */\nexport const createClient = Client as any as (opts: ClientOptions) => Client;\n", "import * as React from 'react';\nimport type { Client } from '@urql/core';\n\nconst OBJ = {};\n\n/** `urql`'s React Context.\n *\n * @remarks\n * The React Context that `urql`’s {@link Client} will be provided with.\n * You may use the reexported {@link Provider} to provide a `Client` as well.\n */\nexport const Context: import('react').Context<Client | object> =\n  React.createContext(OBJ);\n\n/** Provider for `urql`'s {@link Client} to GraphQL hooks.\n *\n * @remarks\n * `Provider` accepts a {@link Client} and provides it to all GraphQL hooks,\n * and {@link useClient}.\n *\n * You should make sure to create a {@link Client} and provide it with the\n * `Provider` to parts of your component tree that use GraphQL hooks.\n *\n * @example\n * ```tsx\n * import { Provider } from 'urql';\n * // All of `@urql/core` is also re-exported by `urql`:\n * import { Client, cacheExchange, fetchExchange } from '@urql/core';\n *\n * const client = new Client({\n *   url: 'https://API',\n *   exchanges: [cacheExchange, fetchExchange],\n * });\n *\n * const App = () => (\n *   <Provider value={client}>\n *     <Component />\n *   </Provider>\n * );\n * ```\n */\nexport const Provider: React.Provider<Client | object> = Context.Provider;\n\n/** React Consumer component, providing the {@link Client} provided on a parent component.\n * @remarks\n * This is an alias for {@link Context.Consumer}.\n */\nexport const Consumer: React.Consumer<Client | object> = Context.Consumer;\n\nContext.displayName = 'UrqlContext';\n\n/** Hook returning a {@link Client} from {@link Context}.\n *\n * @remarks\n * `useClient` is a convenience hook, which accesses `urql`'s {@link Context}\n * and returns the {@link Client} defined on it.\n *\n * This will be the {@link Client} you passed to a {@link Provider}\n * you wrapped your elements containing this hook with.\n *\n * @throws\n * In development, if the component you call `useClient()` in is\n * not wrapped in a {@link Provider}, an error is thrown.\n */\nexport const useClient = (): Client => {\n  const client = React.useContext(Context);\n\n  if (client === OBJ && process.env.NODE_ENV !== 'production') {\n    const error =\n      \"No client has been specified using urql's Provider. please create a client and add a Provider.\";\n\n    console.error(error);\n    throw new Error(error);\n  }\n\n  return client as Client;\n};\n", "import * as React from 'react';\n\nexport const initialState = {\n  fetching: false,\n  stale: false,\n  error: undefined,\n  data: undefined,\n  extensions: undefined,\n  operation: undefined,\n};\n\n// Two operations are considered equal if they have the same key\nconst areOperationsEqual = (\n  a: { key: number } | undefined,\n  b: { key: number } | undefined\n) => {\n  return a === b || !!(a && b && a.key === b.key);\n};\n\n/**\n * Checks if two objects are shallowly different with a special case for\n * 'operation' where it compares the key if they are not the otherwise equal\n */\nconst isShallowDifferent = <T extends Record<string, any>>(a: T, b: T) => {\n  for (const key in a) if (!(key in b)) return true;\n  for (const key in b) {\n    if (\n      key === 'operation'\n        ? !areOperationsEqual(a[key], b[key])\n        : a[key] !== b[key]\n    ) {\n      return true;\n    }\n  }\n  return false;\n};\n\ninterface Stateish {\n  data?: any;\n  error?: any;\n  fetching: boolean;\n  stale: boolean;\n}\n\nexport const computeNextState = <T extends Stateish>(\n  prevState: T,\n  result: Partial<T>\n): T => {\n  const newState: T = {\n    ...prevState,\n    ...result,\n    data:\n      result.data !== undefined || result.error ? result.data : prevState.data,\n    fetching: !!result.fetching,\n    stale: !!result.stale,\n  };\n\n  return isShallowDifferent(prevState, newState) ? newState : prevState;\n};\n\nexport const hasDepsChanged = <T extends { length: number }>(a: T, b: T) => {\n  for (let i = 0, l = b.length; i < l; i++) if (a[i] !== b[i]) return true;\n  return false;\n};\n\nconst reactSharedInternals = (React as any)\n  .__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport function deferDispatch<Dispatch extends React.Dispatch<any>>(\n  setState: Dispatch,\n  value: Dispatch extends React.Dispatch<infer State> ? State : void\n) {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    !!reactSharedInternals &&\n    !!reactSharedInternals.ReactCurrentOwner &&\n    !!reactSharedInternals.ReactCurrentOwner.current\n  ) {\n    Promise.resolve(value).then(setState);\n  } else {\n    setState(value);\n  }\n}\n", "import * as React from 'react';\nimport { pipe, onPush, filter, toPromise, take } from 'wonka';\n\nimport type {\n  AnyVariables,\n  DocumentInput,\n  OperationResult,\n  OperationContext,\n  CombinedError,\n  Operation,\n} from '@urql/core';\nimport { createRequest } from '@urql/core';\n\nimport { useClient } from '../context';\nimport { deferDispatch, initialState } from './state';\n\n/** State of the last mutation executed by your {@link useMutation} hook.\n *\n * @remarks\n * `UseMutationState` is returned (in a tuple) by {@link useMutation} and\n * gives you the {@link OperationResult} of the last mutation executed\n * with {@link UseMutationExecute}.\n *\n * Even if the mutation document passed to {@link useMutation} changes,\n * the state isn’t reset, so you can keep displaying the previous result.\n */\nexport interface UseMutationState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> {\n  /** Indicates whether `useMutation` is currently executing a mutation. */\n  fetching: boolean;\n  /** Indicates that the mutation result is not fresh.\n   *\n   * @remarks\n   * The `stale` flag is set to `true` when a new result for the mutation\n   * is expected.\n   * This is mostly unused for mutations and will rarely affect you, and\n   * is more relevant for queries.\n   *\n   * @see {@link OperationResult.stale} for the source of this value.\n   */\n  stale: boolean;\n  /** The {@link OperationResult.data} for the executed mutation. */\n  data?: Data;\n  /** The {@link OperationResult.error} for the executed mutation. */\n  error?: CombinedError;\n  /** The {@link OperationResult.extensions} for the executed mutation. */\n  extensions?: Record<string, any>;\n  /** The {@link Operation} that the current state is for.\n   *\n   * @remarks\n   * This is the mutation {@link Operation} that has last been executed.\n   * When {@link UseQueryState.fetching} is `true`, this is the\n   * last `Operation` that the current state was for.\n   */\n  operation?: Operation<Data, Variables>;\n}\n\n/** Triggers {@link useMutation} to execute its GraphQL mutation operation.\n *\n * @param variables - variables using which the mutation will be executed.\n * @param context - optionally, context options that will be merged with the hook's\n * {@link UseQueryArgs.context} options and the `Client`’s options.\n * @returns the {@link OperationResult} of the mutation.\n *\n * @remarks\n * When called, {@link useMutation} will start the GraphQL mutation\n * it currently holds and use the `variables` passed to it.\n *\n * Once the mutation response comes back from the API, its\n * returned promise will resolve to the mutation’s {@link OperationResult}\n * and the {@link UseMutationState} will be updated with the result.\n *\n * @example\n * ```ts\n * const [result, executeMutation] = useMutation(UpdateTodo);\n * const start = async ({ id, title }) => {\n *   const result = await executeMutation({ id, title });\n * };\n */\nexport type UseMutationExecute<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> = (\n  variables: Variables,\n  context?: Partial<OperationContext>\n) => Promise<OperationResult<Data, Variables>>;\n\n/** Result tuple returned by the {@link useMutation} hook.\n *\n * @remarks\n * Similarly to a `useState` hook’s return value,\n * the first element is the {@link useMutation}’s state, updated\n * as mutations are executed with the second value, which is\n * used to start mutations and is a {@link UseMutationExecute}\n * function.\n */\nexport type UseMutationResponse<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> = [UseMutationState<Data, Variables>, UseMutationExecute<Data, Variables>];\n\n/** Hook to create a GraphQL mutation, run by passing variables to the returned execute function.\n *\n * @param query - a GraphQL mutation document which `useMutation` will execute.\n * @returns a {@link UseMutationResponse} tuple of a {@link UseMutationState} result,\n * and an execute function to start the mutation.\n *\n * @remarks\n * `useMutation` allows GraphQL mutations to be defined and keeps its state\n * after the mutation is started with the returned execute function.\n *\n * Given a GraphQL mutation document it returns state to keep track of the\n * mutation state and a {@link UseMutationExecute} function, which accepts\n * variables for the mutation to be executed.\n * Once called, the mutation executes and the state will be updated with\n * the mutation’s result.\n *\n * @see {@link https://urql.dev/goto/urql/docs/basics/react-preact/#mutations} for `useMutation` docs.\n *\n * @example\n * ```ts\n * import { gql, useMutation } from 'urql';\n *\n * const UpdateTodo = gql`\n *   mutation ($id: ID!, $title: String!) {\n *     updateTodo(id: $id, title: $title) {\n *       id, title\n *     }\n *   }\n * `;\n *\n * const UpdateTodo = () => {\n *   const [result, executeMutation] = useMutation(UpdateTodo);\n *   const start = async ({ id, title }) => {\n *     const result = await executeMutation({ id, title });\n *   };\n *   // ...\n * };\n * ```\n */\nexport function useMutation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(query: DocumentInput<Data, Variables>): UseMutationResponse<Data, Variables> {\n  const isMounted = React.useRef(true);\n  const client = useClient();\n\n  const [state, setState] =\n    React.useState<UseMutationState<Data, Variables>>(initialState);\n\n  const executeMutation = React.useCallback(\n    (variables: Variables, context?: Partial<OperationContext>) => {\n      deferDispatch(setState, { ...initialState, fetching: true });\n      return pipe(\n        client.executeMutation<Data, Variables>(\n          createRequest<Data, Variables>(query, variables),\n          context || {}\n        ),\n        onPush(result => {\n          if (isMounted.current) {\n            deferDispatch(setState, {\n              fetching: false,\n              stale: result.stale,\n              data: result.data,\n              error: result.error,\n              extensions: result.extensions,\n              operation: result.operation,\n            });\n          }\n        }),\n        filter(result => !result.hasNext),\n        take(1),\n        toPromise\n      );\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [client, query, setState]\n  );\n\n  React.useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [state, executeMutation];\n}\n", "import * as React from 'react';\nimport type { AnyVariables, DocumentInput, GraphQLRequest } from '@urql/core';\nimport { createRequest } from '@urql/core';\n\n/** Creates a request from a query and variables but preserves reference equality if the key isn't changing\n * @internal\n */\nexport function useRequest<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(\n  query: DocumentInput<Data, Variables>,\n  variables: Variables\n): GraphQLRequest<Data, Variables> {\n  const prev = React.useRef<undefined | GraphQLRequest<Data, Variables>>(\n    undefined\n  );\n\n  return React.useMemo(() => {\n    const request = createRequest<Data, Variables>(query, variables);\n    // We manually ensure reference equality if the key hasn't changed\n    if (prev.current !== undefined && prev.current.key === request.key) {\n      return prev.current;\n    } else {\n      prev.current = request;\n      return request;\n    }\n  }, [query, variables]);\n}\n", "import { pipe, subscribe } from 'wonka';\nimport type { Client, OperationResult } from '@urql/core';\n\ntype CacheEntry = OperationResult | Promise<unknown> | undefined;\n\ninterface Cache {\n  get(key: number): CacheEntry;\n  set(key: number, value: CacheEntry): void;\n  dispose(key: number): void;\n}\n\ninterface ClientWithCache extends Client {\n  _react?: Cache;\n}\n\nexport const getCacheForClient = (client: Client): Cache => {\n  if (!(client as ClientWithCache)._react) {\n    const reclaim = new Set();\n    const map = new Map<number, CacheEntry>();\n\n    if (client.operations$ /* not available in mocks */) {\n      pipe(\n        client.operations$,\n        subscribe(operation => {\n          if (operation.kind === 'teardown' && reclaim.has(operation.key)) {\n            reclaim.delete(operation.key);\n            map.delete(operation.key);\n          }\n        })\n      );\n    }\n\n    (client as ClientWithCache)._react = {\n      get(key) {\n        return map.get(key);\n      },\n      set(key, value) {\n        reclaim.delete(key);\n        map.set(key, value);\n      },\n      dispose(key) {\n        reclaim.add(key);\n      },\n    };\n  }\n\n  return (client as ClientWithCache)._react!;\n};\n", "/* eslint-disable react-hooks/exhaustive-deps */\n\nimport type { Source } from 'wonka';\nimport { pipe, subscribe, onEnd, onPush, takeWhile } from 'wonka';\nimport * as React from 'react';\n\nimport type {\n  GraphQLRequestParams,\n  AnyVariables,\n  Client,\n  CombinedError,\n  OperationContext,\n  RequestPolicy,\n  OperationResult,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { useRequest } from './useRequest';\nimport { getCacheForClient } from './cache';\n\nimport {\n  deferDispatch,\n  initialState,\n  computeNextState,\n  hasDepsChanged,\n} from './state';\n\n/** Input arguments for the {@link useQuery} hook.\n *\n * @param query - The GraphQL query that `useQuery` executes.\n * @param variables - The variables for the GraphQL query that `useQuery` executes.\n */\nexport type UseQueryArgs<\n  Variables extends AnyVariables = AnyVariables,\n  Data = any,\n> = {\n  /** Updates the {@link RequestPolicy} for the executed GraphQL query operation.\n   *\n   * @remarks\n   * `requestPolicy` modifies the {@link RequestPolicy} of the GraphQL query operation\n   * that `useQuery` executes, and indicates a caching strategy for cache exchanges.\n   *\n   * For example, when set to `'cache-and-network'`, {@link useQuery} will\n   * receive a cached result with `stale: true` and an API request will be\n   * sent in the background.\n   *\n   * @see {@link OperationContext.requestPolicy} for where this value is set.\n   */\n  requestPolicy?: RequestPolicy;\n  /** Updates the {@link OperationContext} for the executed GraphQL query operation.\n   *\n   * @remarks\n   * `context` may be passed to {@link useQuery}, to update the {@link OperationContext}\n   * of a query operation. This may be used to update the `context` that exchanges\n   * will receive for a single hook.\n   *\n   * Hint: This should be wrapped in a `useMemo` hook, to make sure that your\n   * component doesn’t infinitely update.\n   *\n   * @example\n   * ```ts\n   * const [result, reexecute] = useQuery({\n   *   query,\n   *   context: useMemo(() => ({\n   *     additionalTypenames: ['Item'],\n   *   }), [])\n   * });\n   * ```\n   */\n  context?: Partial<OperationContext>;\n  /** Prevents {@link useQuery} from automatically executing GraphQL query operations.\n   *\n   * @remarks\n   * `pause` may be set to `true` to stop {@link useQuery} from executing\n   * automatically. The hook will stop receiving updates from the {@link Client}\n   * and won’t execute the query operation, until either it’s set to `false`\n   * or the {@link UseQueryExecute} function is called.\n   *\n   * @see {@link https://urql.dev/goto/docs/basics/react-preact/#pausing-usequery} for\n   * documentation on the `pause` option.\n   */\n  pause?: boolean;\n} & GraphQLRequestParams<Data, Variables>;\n\n/** State of the current query, your {@link useQuery} hook is executing.\n *\n * @remarks\n * `UseQueryState` is returned (in a tuple) by {@link useQuery} and\n * gives you the updating {@link OperationResult} of GraphQL queries.\n *\n * Even when the query and variables passed to {@link useQuery} change,\n * this state preserves the prior state and sets the `fetching` flag to\n * `true`.\n * This allows you to display the previous state, while implementing\n * a separate loading indicator separately.\n */\nexport interface UseQueryState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> {\n  /** Indicates whether `useQuery` is waiting for a new result.\n   *\n   * @remarks\n   * When `useQuery` is passed a new query and/or variables, it will\n   * start executing the new query operation and `fetching` is set to\n   * `true` until a result arrives.\n   *\n   * Hint: This is subtly different than whether the query is actually\n   * fetching, and doesn’t indicate whether a query is being re-executed\n   * in the background. For this, see {@link UseQueryState.stale}.\n   */\n  fetching: boolean;\n  /** Indicates that the state is not fresh and a new result will follow.\n   *\n   * @remarks\n   * The `stale` flag is set to `true` when a new result for the query\n   * is expected and `useQuery` is waiting for it. This may indicate that\n   * a new request is being requested in the background.\n   *\n   * @see {@link OperationResult.stale} for the source of this value.\n   */\n  stale: boolean;\n  /** The {@link OperationResult.data} for the executed query. */\n  data?: Data;\n  /** The {@link OperationResult.error} for the executed query. */\n  error?: CombinedError;\n  /** The {@link OperationResult.extensions} for the executed query. */\n  extensions?: Record<string, any>;\n  /** The {@link Operation} that the current state is for.\n   *\n   * @remarks\n   * This is the {@link Operation} that is currently being executed.\n   * When {@link UseQueryState.fetching} is `true`, this is the\n   * last `Operation` that the current state was for.\n   */\n  operation?: Operation<Data, Variables>;\n}\n\n/** Triggers {@link useQuery} to execute a new GraphQL query operation.\n *\n * @param opts - optionally, context options that will be merged with the hook's\n * {@link UseQueryArgs.context} options and the `Client`’s options.\n *\n * @remarks\n * When called, {@link useQuery} will re-execute the GraphQL query operation\n * it currently holds, even if {@link UseQueryArgs.pause} is set to `true`.\n *\n * This is useful for executing a paused query or re-executing a query\n * and get a new network result, by passing a new request policy.\n *\n * ```ts\n * const [result, reexecuteQuery] = useQuery({ query });\n *\n * const refresh = () => {\n *   // Re-execute the query with a network-only policy, skipping the cache\n *   reexecuteQuery({ requestPolicy: 'network-only' });\n * };\n * ```\n */\nexport type UseQueryExecute = (opts?: Partial<OperationContext>) => void;\n\n/** Result tuple returned by the {@link useQuery} hook.\n *\n * @remarks\n * Similarly to a `useState` hook’s return value,\n * the first element is the {@link useQuery}’s result and state,\n * a {@link UseQueryState} object,\n * and the second is used to imperatively re-execute the query\n * via a {@link UseQueryExecute} function.\n */\nexport type UseQueryResponse<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> = [UseQueryState<Data, Variables>, UseQueryExecute];\n\nconst isSuspense = (client: Client, context?: Partial<OperationContext>) =>\n  context && context.suspense !== undefined\n    ? !!context.suspense\n    : client.suspense;\n\n/** Hook to run a GraphQL query and get updated GraphQL results.\n *\n * @param args - a {@link UseQueryArgs} object, to pass a `query`, `variables`, and options.\n * @returns a {@link UseQueryResponse} tuple of a {@link UseQueryState} result, and re-execute function.\n *\n * @remarks\n * `useQuery` allows GraphQL queries to be defined and executed.\n * Given {@link UseQueryArgs.query}, it executes the GraphQL query with the\n * context’s {@link Client}.\n *\n * The returned result updates when the `Client` has new results\n * for the query, and changes when your input `args` change.\n *\n * Additionally, if the `suspense` option is enabled on the `Client`,\n * the `useQuery` hook will suspend instead of indicating that it’s\n * waiting for a result via {@link UseQueryState.fetching}.\n *\n * @see {@link https://urql.dev/goto/urql/docs/basics/react-preact/#queries} for `useQuery` docs.\n *\n * @example\n * ```ts\n * import { gql, useQuery } from 'urql';\n *\n * const TodosQuery = gql`\n *   query { todos { id, title } }\n * `;\n *\n * const Todos = () => {\n *   const [result, reexecuteQuery] = useQuery({\n *     query: TodosQuery,\n *     variables: {},\n *   });\n *   // ...\n * };\n * ```\n */\nexport function useQuery<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(args: UseQueryArgs<Variables, Data>): UseQueryResponse<Data, Variables> {\n  const client = useClient();\n  const cache = getCacheForClient(client);\n  const suspense = isSuspense(client, args.context);\n  const request = useRequest(args.query, args.variables as Variables);\n\n  const source = React.useMemo(() => {\n    if (args.pause) return null;\n\n    const source = client.executeQuery(request, {\n      requestPolicy: args.requestPolicy,\n      ...args.context,\n    });\n\n    return suspense\n      ? pipe(\n          source,\n          onPush(result => {\n            cache.set(request.key, result);\n          })\n        )\n      : source;\n  }, [\n    cache,\n    client,\n    request,\n    suspense,\n    args.pause,\n    args.requestPolicy,\n    args.context,\n  ]);\n\n  const getSnapshot = React.useCallback(\n    (\n      source: Source<OperationResult<Data, Variables>> | null,\n      suspense: boolean\n    ): Partial<UseQueryState<Data, Variables>> => {\n      if (!source) return { fetching: false };\n\n      let result = cache.get(request.key);\n      if (!result) {\n        let resolve: (value: unknown) => void;\n\n        const subscription = pipe(\n          source,\n          takeWhile(() => (suspense && !resolve) || !result),\n          subscribe(_result => {\n            result = _result;\n            if (resolve) resolve(result);\n          })\n        );\n\n        if (result == null && suspense) {\n          const promise = new Promise(_resolve => {\n            resolve = _resolve;\n          });\n\n          cache.set(request.key, promise);\n          throw promise;\n        } else {\n          subscription.unsubscribe();\n        }\n      } else if (suspense && result != null && 'then' in result) {\n        throw result;\n      }\n\n      return (result as OperationResult<Data, Variables>) || { fetching: true };\n    },\n    [cache, request]\n  );\n\n  const deps = [\n    client,\n    request,\n    args.requestPolicy,\n    args.context,\n    args.pause,\n  ] as const;\n\n  const [state, setState] = React.useState(\n    () =>\n      [\n        source,\n        computeNextState(initialState, getSnapshot(source, suspense)),\n        deps,\n      ] as const\n  );\n\n  let currentResult = state[1];\n  if (source !== state[0] && hasDepsChanged(state[2], deps)) {\n    setState([\n      source,\n      (currentResult = computeNextState(\n        state[1],\n        getSnapshot(source, suspense)\n      )),\n      deps,\n    ]);\n  }\n\n  React.useEffect(() => {\n    const source = state[0];\n    const request = state[2][1];\n\n    let hasResult = false;\n\n    const updateResult = (result: Partial<UseQueryState<Data, Variables>>) => {\n      hasResult = true;\n      deferDispatch(setState, state => {\n        const nextResult = computeNextState(state[1], result);\n        return state[1] !== nextResult\n          ? [state[0], nextResult, state[2]]\n          : state;\n      });\n    };\n\n    if (source) {\n      const subscription = pipe(\n        source,\n        onEnd(() => {\n          updateResult({ fetching: false });\n        }),\n        subscribe(updateResult)\n      );\n\n      if (!hasResult) updateResult({ fetching: true });\n\n      return () => {\n        cache.dispose(request.key);\n        subscription.unsubscribe();\n      };\n    } else {\n      updateResult({ fetching: false });\n    }\n  }, [cache, state[0], state[2][1]]);\n\n  const executeQuery = React.useCallback(\n    (opts?: Partial<OperationContext>) => {\n      const context = {\n        requestPolicy: args.requestPolicy,\n        ...args.context,\n        ...opts,\n      };\n\n      deferDispatch(setState, state => {\n        const source = suspense\n          ? pipe(\n              client.executeQuery(request, context),\n              onPush(result => {\n                cache.set(request.key, result);\n              })\n            )\n          : client.executeQuery(request, context);\n        return [source, state[1], deps];\n      });\n    },\n    [\n      client,\n      cache,\n      request,\n      suspense,\n      args.requestPolicy,\n      args.context,\n      args.pause,\n    ]\n  );\n\n  return [currentResult, executeQuery];\n}\n", "/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { pipe, subscribe, onEnd } from 'wonka';\nimport * as React from 'react';\n\nimport type {\n  GraphQLRequestParams,\n  AnyVariables,\n  CombinedError,\n  OperationContext,\n  Operation,\n} from '@urql/core';\n\nimport { useClient } from '../context';\nimport { useRequest } from './useRequest';\n\nimport {\n  deferDispatch,\n  initialState,\n  computeNextState,\n  hasDepsChanged,\n} from './state';\n\n/** Input arguments for the {@link useSubscription} hook.\n *\n * @param query - The GraphQL subscription document that `useSubscription` executes.\n * @param variables - The variables for the GraphQL subscription that `useSubscription` executes.\n */\nexport type UseSubscriptionArgs<\n  Variables extends AnyVariables = AnyVariables,\n  Data = any,\n> = {\n  /** Prevents {@link useSubscription} from automatically starting GraphQL subscriptions.\n   *\n   * @remarks\n   * `pause` may be set to `true` to stop {@link useSubscription} from starting its subscription\n   * automatically. The hook will stop receiving updates from the {@link Client}\n   * and won’t start the subscription operation, until either it’s set to `false`\n   * or the {@link UseSubscriptionExecute} function is called.\n   */\n  pause?: boolean;\n  /** Updates the {@link OperationContext} for the executed GraphQL subscription operation.\n   *\n   * @remarks\n   * `context` may be passed to {@link useSubscription}, to update the {@link OperationContext}\n   * of a subscription operation. This may be used to update the `context` that exchanges\n   * will receive for a single hook.\n   *\n   * Hint: This should be wrapped in a `useMemo` hook, to make sure that your\n   * component doesn’t infinitely update.\n   *\n   * @example\n   * ```ts\n   * const [result, reexecute] = useSubscription({\n   *   query,\n   *   context: useMemo(() => ({\n   *     additionalTypenames: ['Item'],\n   *   }), [])\n   * });\n   * ```\n   */\n  context?: Partial<OperationContext>;\n} & GraphQLRequestParams<Data, Variables>;\n\n/** Combines previous data with an incoming subscription result’s data.\n *\n * @remarks\n * A `SubscriptionHandler` may be passed to {@link useSubscription} to\n * aggregate subscription results into a combined {@link UseSubscriptionState.data}\n * value.\n *\n * This is useful when a subscription event delivers a single item, while\n * you’d like to display a list of events.\n *\n * @example\n * ```ts\n * const NotificationsSubscription = gql`\n *   subscription { newNotification { id, text } }\n * `;\n *\n * const combineNotifications = (notifications = [], data) => {\n *   return [...notifications, data.newNotification];\n * };\n *\n * const [result, executeSubscription] = useSubscription(\n *   { query: NotificationsSubscription },\n *   combineNotifications,\n * );\n * ```\n */\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\n\n/** State of the current subscription, your {@link useSubscription} hook is executing.\n *\n * @remarks\n * `UseSubscriptionState` is returned (in a tuple) by {@link useSubscription} and\n * gives you the updating {@link OperationResult} of GraphQL subscriptions.\n *\n * If a {@link SubscriptionHandler} has been passed to `useSubscription` then\n * {@link UseSubscriptionState.data} is instead the updated data as returned\n * by the handler, otherwise it’s the latest result’s data.\n *\n * Hint: Even when the query and variables passed to {@link useSubscription} change,\n * this state preserves the prior state.\n */\nexport interface UseSubscriptionState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> {\n  /** Indicates whether `useSubscription`’s subscription is active.\n   *\n   * @remarks\n   * When `useSubscription` starts a subscription, the `fetching` flag\n   * is set to `true` and will remain `true` until the subscription\n   * completes on the API, or the {@link UseSubscriptionArgs.pause}\n   * flag is set to `true`.\n   */\n  fetching: boolean;\n  /** Indicates that the subscription result is not fresh.\n   *\n   * @remarks\n   * This is mostly unused for subscriptions and will rarely affect you, and\n   * is more relevant for queries.\n   *\n   * @see {@link OperationResult.stale} for the source of this value.\n   */\n  stale: boolean;\n  /** The {@link OperationResult.data} for the executed subscription, or data returned by a handler.\n   *\n   * @remarks\n   * `data` will be set to the last {@link OperationResult.data} value\n   * received for the subscription.\n   *\n   * It will instead be set to the values that {@link SubscriptionHandler}\n   * returned, if a handler has been passed to {@link useSubscription}.\n   */\n  data?: Data;\n  /** The {@link OperationResult.error} for the executed subscription. */\n  error?: CombinedError;\n  /** The {@link OperationResult.extensions} for the executed mutation. */\n  extensions?: Record<string, any>;\n  /** The {@link Operation} that the current state is for.\n   *\n   * @remarks\n   * This is the subscription {@link Operation} that is currently active.\n   * When {@link UseSubscriptionState.fetching} is `true`, this is the\n   * last `Operation` that the current state was for.\n   */\n  operation?: Operation<Data, Variables>;\n}\n\n/** Triggers {@link useSubscription} to reexecute a GraphQL subscription operation.\n *\n * @param opts - optionally, context options that will be merged with the hook's\n * {@link UseSubscriptionArgs.context} options and the `Client`’s options.\n *\n * @remarks\n * When called, {@link useSubscription} will restart the GraphQL subscription\n * operation it currently holds. If {@link UseSubscriptionArgs.pause} is set\n * to `true`, it will start executing the subscription.\n *\n * ```ts\n * const [result, executeSubscription] = useSubscription({\n *   query,\n *   pause: true,\n * });\n *\n * const start = () => {\n *   executeSubscription();\n * };\n * ```\n */\nexport type UseSubscriptionExecute = (opts?: Partial<OperationContext>) => void;\n\n/** Result tuple returned by the {@link useSubscription} hook.\n *\n * @remarks\n * Similarly to a `useState` hook’s return value,\n * the first element is the {@link useSubscription}’s state,\n * a {@link UseSubscriptionState} object,\n * and the second is used to imperatively re-execute or start the subscription\n * via a {@link UseMutationExecute} function.\n */\nexport type UseSubscriptionResponse<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> = [UseSubscriptionState<Data, Variables>, UseSubscriptionExecute];\n\n/** Hook to run a GraphQL subscription and get updated GraphQL results.\n *\n * @param args - a {@link UseSubscriptionArgs} object, to pass a `query`, `variables`, and options.\n * @param handler - optionally, a {@link SubscriptionHandler} function to combine multiple subscription results.\n * @returns a {@link UseSubscriptionResponse} tuple of a {@link UseSubscriptionState} result, and an execute function.\n *\n * @remarks\n * `useSubscription` allows GraphQL subscriptions to be defined and executed.\n * Given {@link UseSubscriptionArgs.query}, it executes the GraphQL subscription with the\n * context’s {@link Client}.\n *\n * The returned result updates when the `Client` has new results\n * for the subscription, and `data` is updated with the result’s data\n * or with the `data` that a `handler` returns.\n *\n * @example\n * ```ts\n * import { gql, useSubscription } from 'urql';\n *\n * const NotificationsSubscription = gql`\n *   subscription { newNotification { id, text } }\n * `;\n *\n * const combineNotifications = (notifications = [], data) => {\n *   return [...notifications, data.newNotification];\n * };\n *\n * const Notifications = () => {\n *   const [result, executeSubscription] = useSubscription(\n *     { query: NotificationsSubscription },\n *     combineNotifications,\n *   );\n *   // ...\n * };\n * ```\n */\nexport function useSubscription<\n  Data = any,\n  Result = Data,\n  Variables extends AnyVariables = AnyVariables,\n>(\n  args: UseSubscriptionArgs<Variables, Data>,\n  handler?: SubscriptionHandler<Data, Result>\n): UseSubscriptionResponse<Result, Variables> {\n  const client = useClient();\n  const request = useRequest(args.query, args.variables as Variables);\n\n  const handlerRef = React.useRef<\n    SubscriptionHandler<Data, Result> | undefined\n  >(handler);\n  handlerRef.current = handler;\n\n  const source = React.useMemo(\n    () =>\n      !args.pause ? client.executeSubscription(request, args.context) : null,\n    [client, request, args.pause, args.context]\n  );\n\n  const deps = [client, request, args.context, args.pause] as const;\n\n  const [state, setState] = React.useState(\n    () => [source, { ...initialState, fetching: !!source }, deps] as const\n  );\n\n  let currentResult = state[1];\n  if (source !== state[0] && hasDepsChanged(state[2], deps)) {\n    setState([\n      source,\n      (currentResult = computeNextState(state[1], { fetching: !!source })),\n      deps,\n    ]);\n  }\n\n  React.useEffect(() => {\n    const updateResult = (\n      result: Partial<UseSubscriptionState<Data, Variables>>\n    ) => {\n      deferDispatch(setState, state => {\n        const nextResult = computeNextState(state[1], result);\n        if (state[1] === nextResult) return state;\n        if (handlerRef.current && state[1].data !== nextResult.data) {\n          nextResult.data = handlerRef.current(\n            state[1].data,\n            nextResult.data!\n          ) as any;\n        }\n\n        return [state[0], nextResult as any, state[2]];\n      });\n    };\n\n    if (state[0]) {\n      return pipe(\n        state[0],\n        onEnd(() => {\n          updateResult({ fetching: !!source });\n        }),\n        subscribe(updateResult)\n      ).unsubscribe;\n    } else {\n      updateResult({ fetching: false });\n    }\n  }, [state[0]]);\n\n  // This is the imperative execute function passed to the user\n  const executeSubscription = React.useCallback(\n    (opts?: Partial<OperationContext>) => {\n      const source = client.executeSubscription(request, {\n        ...args.context,\n        ...opts,\n      });\n\n      deferDispatch(setState, state => [source, state[1], deps]);\n    },\n    [client, request, args.context, args.pause]\n  );\n\n  return [currentResult, executeSubscription];\n}\n", "import type { ReactElement } from 'react';\nimport type { AnyVariables, DocumentInput } from '@urql/core';\n\nimport type { UseMutationState, UseMutationExecute } from '../hooks';\nimport { useMutation } from '../hooks';\n\n/** Props accepted by {@link Mutation}.\n *\n * @remarks\n * `MutationProps` are the props accepted by the {@link Mutation} component.\n *\n * The result, the {@link MutationState} object, will be passed to\n * a {@link MutationProps.children} function, passed as children\n * to the `Mutation` component.\n */\nexport interface MutationProps<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> {\n  /* The GraphQL mutation document that {@link useMutation} will execute. */\n  query: DocumentInput<Data, Variables>;\n  children(arg: MutationState<Data, Variables>): ReactElement<any>;\n}\n\n/** Object that {@link MutationProps.children} is called with.\n *\n * @remarks\n * This is an extented {@link UseMutationstate} with an added\n * {@link MutationState.executeMutation} method, which is usually\n * part of a tuple returned by {@link useMutation}.\n */\nexport interface MutationState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> extends UseMutationState<Data, Variables> {\n  /** Alias to {@link useMutation}’s `executeMutation` function. */\n  executeMutation: UseMutationExecute<Data, Variables>;\n}\n\n/** Component Wrapper around {@link useMutation} to run a GraphQL query.\n *\n * @remarks\n * `Mutation` is a component wrapper around the {@link useMutation} hook\n * that calls the {@link MutationProps.children} prop, as a function,\n * with the {@link MutationState} object.\n */\nexport function Mutation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(props: MutationProps<Data, Variables>): ReactElement<any> {\n  const mutation = useMutation<Data, Variables>(props.query);\n  return props.children({ ...mutation[0], executeMutation: mutation[1] });\n}\n", "import type { ReactElement } from 'react';\nimport type { AnyVariables } from '@urql/core';\n\nimport type { UseQueryArgs, UseQueryState, UseQueryExecute } from '../hooks';\nimport { useQuery } from '../hooks';\n\n/** Props accepted by {@link Query}.\n *\n * @remarks\n * `QueryProps` are the props accepted by the {@link Query} component,\n * which is identical to {@link UseQueryArgs}.\n *\n * The result, the {@link QueryState} object, will be passed to\n * a {@link QueryProps.children} function, passed as children\n * to the `Query` component.\n */\nexport type QueryProps<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> = UseQueryArgs<Variables, Data> & {\n  children(arg: QueryState<Data, Variables>): ReactElement<any>;\n};\n\n/** Object that {@link QueryProps.children} is called with.\n *\n * @remarks\n * This is an extented {@link UseQueryState} with an added\n * {@link QueryState.executeQuery} method, which is usually\n * part of a tuple returned by {@link useQuery}.\n */\nexport interface QueryState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> extends UseQueryState<Data, Variables> {\n  /** Alias to {@link useQuery}’s `executeQuery` function. */\n  executeQuery: UseQueryExecute;\n}\n\n/** Component Wrapper around {@link useQuery} to run a GraphQL query.\n *\n * @remarks\n * `Query` is a component wrapper around the {@link useQuery} hook\n * that calls the {@link QueryProps.children} prop, as a function,\n * with the {@link QueryState} object.\n */\nexport function Query<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(props: QueryProps<Data, Variables>): ReactElement<any> {\n  const query = useQuery<Data, Variables>(props);\n  return props.children({ ...query[0], executeQuery: query[1] });\n}\n", "import type { ReactElement } from 'react';\nimport type { AnyVariables } from '@urql/core';\n\nimport type {\n  UseSubscriptionArgs,\n  UseSubscriptionState,\n  UseSubscriptionExecute,\n  SubscriptionHandler,\n} from '../hooks';\nimport { useSubscription } from '../hooks';\n\n/** Props accepted by {@link Subscription}.\n *\n * @remarks\n * `SubscriptionProps` are the props accepted by the {@link Subscription} component,\n * which is identical to {@link UseSubscriptionArgs} with an added\n * {@link SubscriptionProps.handler} prop, which {@link useSubscription} usually\n * accepts as an additional argument.\n *\n * The result, the {@link SubscriptionState} object, will be passed to\n * a {@link SubscriptionProps.children} function, passed as children\n * to the `Subscription` component.\n */\nexport type SubscriptionProps<\n  Data = any,\n  Result = Data,\n  Variables extends AnyVariables = AnyVariables,\n> = UseSubscriptionArgs<Variables, Data> & {\n  handler?: SubscriptionHandler<Data, Result>;\n  children(arg: SubscriptionState<Result, Variables>): ReactElement<any>;\n};\n\n/** Object that {@link SubscriptionProps.children} is called with.\n *\n * @remarks\n * This is an extented {@link UseSubscriptionState} with an added\n * {@link SubscriptionState.executeSubscription} method, which is usually\n * part of a tuple returned by {@link useSubscription}.\n */\nexport interface SubscriptionState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> extends UseSubscriptionState<Data, Variables> {\n  /** Alias to {@link useSubscription}’s `executeMutation` function. */\n  executeSubscription: UseSubscriptionExecute;\n}\n\n/** Component Wrapper around {@link useSubscription} to run a GraphQL subscription.\n *\n * @remarks\n * `Subscription` is a component wrapper around the {@link useSubscription} hook\n * that calls the {@link SubscriptionProps.children} prop, as a function,\n * with the {@link SubscriptionState} object.\n */\nexport function Subscription<\n  Data = any,\n  Result = Data,\n  Variables extends AnyVariables = AnyVariables,\n>(props: SubscriptionProps<Data, Result, Variables>): ReactElement<any> {\n  const subscription = useSubscription<Data, Result, Variables>(\n    props,\n    props.handler\n  );\n\n  return props.children({\n    ...subscription[0],\n    executeSubscription: subscription[1],\n  });\n}\n"],
  "mappings": "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",
  "names": ["error", "ReactDebugCurrentFrame", "a", "value", "type", "e", "i", "c", "n", "createContext", "moduleObject", "lazy", "useContext", "useState", "useRef", "useEffect", "useCallback", "useMemo", "subscribe", "s", "Component", "returnValue", "Kind", "NAME", "DOCUMENT", "OPERATION_DEFINITION", "VARIABLE_DEFINITION", "SELECTION_SET", "FIELD", "ARGUMENT", "FRAGMENT_SPREAD", "INLINE_FRAGMENT", "FRAGMENT_DEFINITION", "VARIABLE", "INT", "FLOAT", "STRING", "BOOLEAN", "NULL", "ENUM", "LIST", "OBJECT", "OBJECT_FIELD", "DIRECTIVE", "NAMED_TYPE", "LIST_TYPE", "NON_NULL_TYPE", "GraphQLError", "Error", "constructor", "message", "nodes", "source", "positions", "path", "originalError", "extensions", "super", "this", "name", "Array", "isArray", "_extensions", "originalExtensions", "toJSON", "toString", "Symbol", "toStringTag", "input", "idx", "error", "kind", "advance", "pattern", "lastIndex", "test", "slice", "leadingRe", "blockString", "string", "lines", "split", "out", "commonIndent", "firstNonEmptyLine", "lastNonEmptyLine", "length", "i", "replace", "ignored", "char", "charCodeAt", "nameRe", "valueRe", "RegExp", "ValueGroup", "complexStringRe", "value", "constant", "match", "exec", "values", "push", "fields", "Const", "Var", "Int", "floatPart", "Float", "BlockString", "block", "String", "JSON", "parse", "Enum", "arguments_", "args", "_name", "directives", "arguments", "type", "lists", "selectionRe", "SelectionGroup", "selectionSet", "selections", "Spread", "_directives", "typeCondition", "Name", "_alias", "_arguments", "_selectionSet", "alias", "fragmentDefinition", "_condition", "definitionRe", "operationDefinition", "operation", "_variableDefinitions", "variableDefinitions", "vars", "_type", "_defaultValue", "variable", "defaultValue", "_options", "body", "document", "definition", "definitions", "mapJoin", "value", "joiner", "mapper", "out", "index", "length", "printString", "string", "JSON", "stringify", "printBlockString", "replace", "LF", "nodes", "OperationDefinition", "node", "operation", "name", "variableDefinitions", "VariableDefinition", "directives", "Directive", "SelectionSet", "selectionSet", "Variable", "variable", "_print", "type", "defaultValue", "Field", "alias", "arguments", "args", "Argument", "slice", "StringValue", "block", "BooleanValue", "NullValue", "_node", "IntValue", "FloatValue", "EnumValue", "Name", "ListValue", "values", "ObjectValue", "fields", "ObjectField", "Document", "definitions", "selections", "FragmentSpread", "InlineFragment", "typeCondition", "FragmentDefinition", "NamedType", "ListType", "NonNullType", "kind", "print", "e", "e", "r", "t", "i", "a", "e", "f", "n", "s", "l", "u", "o", "r", "t", "i", "e", "a", "f", "n", "s", "l", "u", "r", "t", "i", "a", "e", "f", "n", "s", "l", "u", "r", "t", "i", "a", "e", "f", "n", "r", "t", "i", "a", "e", "f", "n", "e", "r", "t", "i", "a", "f", "n", "e", "r", "t", "i", "a", "e", "r", "t", "i", "e", "a", "rehydrateGraphQlError", "error", "message", "extensions", "name", "GraphQLError", "nodes", "source", "positions", "path", "CombinedError", "Error", "constructor", "input", "normalizedGraphQLErrors", "graphQLErrors", "map", "generateErrorMessage", "networkErr", "graphQlErrs", "err", "networkError", "super", "this", "response", "toString", "phash", "x", "seed", "h", "i", "l", "length", "charCodeAt", "seen", "Set", "cache", "WeakMap", "stringify", "has", "JSON", "toJSON", "Array", "isArray", "out", "value", "FileConstructor", "NoopConstructor", "BlobConstructor", "keys", "Object", "sort", "getPrototypeOf", "prototype", "key", "get", "Math", "random", "slice", "set", "__key", "add", "delete", "extract", "stringifyVariables", "clear", "File", "Blob", "GRAPHQL_STRING_RE", "REPLACE_CHAR_RE", "replaceOutsideStrings", "str", "idx", "replace", "sanitizeDocument", "node", "split", "join", "trim", "prints", "Map", "docs", "stringifyDocument", "printed", "loc", "body", "print", "start", "end", "locationOffset", "line", "column", "hashDocument", "definitions", "operationName", "getOperationName", "keyDocument", "query", "parse", "noLocation", "createRequest", "_query", "_variables", "variables", "printedVars", "kind", "Kind", "OPERATION_DEFINITION", "getOperationType", "operation", "makeResult", "result", "errors", "defaultHasNext", "data", "hasNext", "stale", "deepMerge", "target", "mergeResultPatch", "prevResult", "nextResult", "pending", "hasExtensions", "payload", "incremental", "withData", "_loop", "patch", "push", "assign", "prop", "part", "res", "find", "pendingRes", "id", "subPath", "items", "startIndex", "makeErrorResult", "makeFetchBody", "request", "documentId", "persistedQuery", "miss", "makeFetchURL", "useGETMethod", "context", "preferGetMethod", "url", "urlParts", "splitOutSearchParams", "finalUrl", "indexOf", "URLSearchParams", "serializeBody", "json", "files", "size", "form", "FormData", "append", "index", "file", "values", "makeFetchOptions", "headers", "accept", "extraOptions", "fetchOptions", "forEach", "toLowerCase", "serializedBody", "method", "decoder", "TextDecoder", "boundaryHeaderRe", "eventStreamRe", "decode", "async", "streamBody", "Symbol", "asyncIterator", "chunk", "reader", "getReader", "read", "done", "cancel", "chunks", "boundary", "buffer", "boundaryIndex", "fetchOperation", "networkMode", "Promise", "resolve", "contentType", "fetch", "results", "test", "parseMultipartMixed", "boundaryHeader", "match", "isPreamble", "preambleIndex", "parseEventStream", "parseJSON", "text", "parseMaybeJSON", "NODE_ENV", "console", "warn", "e", "status", "statusText", "makeFetchSource", "abortController", "AbortController", "signal", "onEnd", "abort", "filter", "fromAsyncIterable", "collectTypes", "obj", "types", "Array", "isArray", "item", "key", "add", "formatNode", "node", "definitions", "definition", "newDefinition", "push", "directives", "length", "_directives", "directive", "name", "value", "slice", "selections", "hasTypename", "kind", "Kind", "OPERATION_DEFINITION", "selectionSet", "selection", "FIELD", "alias", "newSelection", "NAME", "_generated", "formattedDocs", "Map", "formatDocument", "query", "keyDocument", "result", "get", "__key", "set", "Object", "defineProperty", "enumerable", "withPromise", "_source$", "source$", "sink", "toPromise", "take", "filter", "stale", "hasNext", "then", "onResolve", "onReject", "subscribe", "onResult", "makeOperation", "request", "context", "addMetadata", "operation", "meta", "noop", "gql", "parts", "fragmentNames", "source", "body", "i", "arguments", "unshift", "document", "FRAGMENT_DEFINITION", "stringifyDocument", "has", "console", "warn", "DOCUMENT", "shouldSkip", "mapTypeNames", "formattedOperation", "cacheExchange", "forward", "client", "dispatchDebug", "resultCache", "operationCache", "isOperationCached", "requestPolicy", "ops$", "cachedOps$", "map", "cachedResult", "type", "message", "makeResult", "data", "cacheOutcome", "reexecuteOperation", "op", "forwardedOps$", "tap", "response", "typenames", "additionalTypenames", "Set", "concat", "pendingOperations", "typeName", "operations", "values", "clear", "delete", "merge", "revalidated", "ssrExchange", "params", "staleWhileRevalidate", "includeExtensions", "invalidateQueue", "invalidate", "Promise", "resolve", "shift", "ssr", "isClient", "suspense", "deserializeResult", "JSON", "parse", "extensions", "error", "CombinedError", "networkError", "Error", "graphQLErrors", "serialized", "serializeResult", "stringify", "path", "restoreData", "restore", "extractData", "initialState", "subscriptionExchange", "forwardSubscription", "enableAllOperations", "isSubscriptionOperation", "isSubscriptionOperationFn", "subscriptionResults$", "mergeMap", "teardown$", "takeUntil", "observableish", "makeFetchBody", "make", "observer", "isComplete", "sub", "nextResult", "next", "mergeResultPatch", "errors", "makeErrorResult", "complete", "unsubscribe", "forward$", "debugExchange", "NODE_ENV", "log", "fetchExchange", "fetchResults$", "url", "makeFetchURL", "fetchOptions", "makeFetchOptions", "makeFetchSource", "onPush", "fetchSubscriptions", "composeExchanges", "exchanges", "reduceRight", "exchange", "forwarded", "operations$", "share", "event", "timestamp", "Date", "now", "mapExchange", "onOperation", "onError", "newResult", "fromPromise", "fromValue", "newOperation", "fallbackExchange", "_x", "Client", "opts", "ids", "replays", "active", "dispatched", "queue", "baseOpts", "fetch", "preferGetMethod", "makeSubject", "nextOperation", "isOperationBatchActive", "dispatchOperation", "makeResultSource", "result$", "res", "_instance", "results$", "takeWhile", "switchMap", "value$", "onEnd", "splice", "onStart", "instance", "this", "create", "prototype", "assign", "queued", "createRequestOperation", "requestOperationType", "getOperationType", "executeRequestOperation", "lazy", "replay", "executeQuery", "executeSubscription", "executeMutation", "readQuery", "variables", "createRequest", "subscription", "mutation", "subscribeToDebugTarget", "onEvent", "composedExchange", "publish", "createClient", "OBJ", "Context", "createContext", "Provider", "Consumer", "displayName", "useClient", "client", "useContext", "error", "console", "Error", "initialState", "fetching", "stale", "data", "extensions", "operation", "areOperationsEqual", "a", "b", "key", "computeNextState", "prevState", "result", "newState", "isShallowDifferent", "hasDepsChanged", "i", "l", "length", "reactSharedInternals", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "deferDispatch", "setState", "value", "ReactCurrentOwner", "current", "Promise", "resolve", "then", "useMutation", "query", "isMounted", "useRef", "state", "useState", "executeMutation", "useCallback", "variables", "context", "toPromise", "take", "filter", "hasNext", "onPush", "createRequest", "React", "useEffect", "useRequest", "prev", "undefined", "useMemo", "request", "getCacheForClient", "_react", "reclaim", "Set", "map", "Map", "operations$", "subscribe", "kind", "has", "delete", "get", "set", "dispose", "add", "isSuspense", "suspense", "useQuery", "args", "cache", "source", "pause", "executeQuery", "requestPolicy", "getSnapshot", "subscription", "_result", "takeWhile", "promise", "_resolve", "unsubscribe", "deps", "currentResult", "hasResult", "updateResult", "nextResult", "onEnd", "opts", "useSubscription", "handler", "handlerRef", "executeSubscription", "Mutation", "props", "mutation", "children", "Query", "Subscription"]
}
